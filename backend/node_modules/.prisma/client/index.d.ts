
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Operativo
 * 
 */
export type Operativo = $Result.DefaultSelection<Prisma.$OperativoPayload>
/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Rol
 * 
 */
export type Rol = $Result.DefaultSelection<Prisma.$RolPayload>
/**
 * Model UsuarioRol
 * 
 */
export type UsuarioRol = $Result.DefaultSelection<Prisma.$UsuarioRolPayload>
/**
 * Model Cita
 * 
 */
export type Cita = $Result.DefaultSelection<Prisma.$CitaPayload>
/**
 * Model FichaClinica
 * 
 */
export type FichaClinica = $Result.DefaultSelection<Prisma.$FichaClinicaPayload>
/**
 * Model Receta
 * 
 */
export type Receta = $Result.DefaultSelection<Prisma.$RecetaPayload>
/**
 * Model Producto
 * 
 */
export type Producto = $Result.DefaultSelection<Prisma.$ProductoPayload>
/**
 * Model Venta
 * 
 */
export type Venta = $Result.DefaultSelection<Prisma.$VentaPayload>
/**
 * Model ItemVenta
 * 
 */
export type ItemVenta = $Result.DefaultSelection<Prisma.$ItemVentaPayload>
/**
 * Model Garantia
 * 
 */
export type Garantia = $Result.DefaultSelection<Prisma.$GarantiaPayload>
/**
 * Model Alerta
 * 
 */
export type Alerta = $Result.DefaultSelection<Prisma.$AlertaPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const CitaEstado: {
  Programada: 'Programada',
  Confirmada: 'Confirmada',
  Atendida: 'Atendida',
  NoShow: 'NoShow',
  Cancelada: 'Cancelada'
};

export type CitaEstado = (typeof CitaEstado)[keyof typeof CitaEstado]


export const AlertaTipo: {
  Control: 'Control',
  Garantia: 'Garantia',
  Operativo: 'Operativo'
};

export type AlertaTipo = (typeof AlertaTipo)[keyof typeof AlertaTipo]


export const AlertaCanal: {
  SMS: 'SMS',
  Correo: 'Correo'
};

export type AlertaCanal = (typeof AlertaCanal)[keyof typeof AlertaCanal]

}

export type CitaEstado = $Enums.CitaEstado

export const CitaEstado: typeof $Enums.CitaEstado

export type AlertaTipo = $Enums.AlertaTipo

export const AlertaTipo: typeof $Enums.AlertaTipo

export type AlertaCanal = $Enums.AlertaCanal

export const AlertaCanal: typeof $Enums.AlertaCanal

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clientes
 * const clientes = await prisma.cliente.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clientes
   * const clientes = await prisma.cliente.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.operativo`: Exposes CRUD operations for the **Operativo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Operativos
    * const operativos = await prisma.operativo.findMany()
    * ```
    */
  get operativo(): Prisma.OperativoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rol`: Exposes CRUD operations for the **Rol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rols
    * const rols = await prisma.rol.findMany()
    * ```
    */
  get rol(): Prisma.RolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuarioRol`: Exposes CRUD operations for the **UsuarioRol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsuarioRols
    * const usuarioRols = await prisma.usuarioRol.findMany()
    * ```
    */
  get usuarioRol(): Prisma.UsuarioRolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cita`: Exposes CRUD operations for the **Cita** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Citas
    * const citas = await prisma.cita.findMany()
    * ```
    */
  get cita(): Prisma.CitaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fichaClinica`: Exposes CRUD operations for the **FichaClinica** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FichaClinicas
    * const fichaClinicas = await prisma.fichaClinica.findMany()
    * ```
    */
  get fichaClinica(): Prisma.FichaClinicaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.receta`: Exposes CRUD operations for the **Receta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recetas
    * const recetas = await prisma.receta.findMany()
    * ```
    */
  get receta(): Prisma.RecetaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.producto`: Exposes CRUD operations for the **Producto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productos
    * const productos = await prisma.producto.findMany()
    * ```
    */
  get producto(): Prisma.ProductoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.venta`: Exposes CRUD operations for the **Venta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ventas
    * const ventas = await prisma.venta.findMany()
    * ```
    */
  get venta(): Prisma.VentaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.itemVenta`: Exposes CRUD operations for the **ItemVenta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ItemVentas
    * const itemVentas = await prisma.itemVenta.findMany()
    * ```
    */
  get itemVenta(): Prisma.ItemVentaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.garantia`: Exposes CRUD operations for the **Garantia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Garantias
    * const garantias = await prisma.garantia.findMany()
    * ```
    */
  get garantia(): Prisma.GarantiaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alerta`: Exposes CRUD operations for the **Alerta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alertas
    * const alertas = await prisma.alerta.findMany()
    * ```
    */
  get alerta(): Prisma.AlertaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.1
   * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Cliente: 'Cliente',
    Operativo: 'Operativo',
    Usuario: 'Usuario',
    Rol: 'Rol',
    UsuarioRol: 'UsuarioRol',
    Cita: 'Cita',
    FichaClinica: 'FichaClinica',
    Receta: 'Receta',
    Producto: 'Producto',
    Venta: 'Venta',
    ItemVenta: 'ItemVenta',
    Garantia: 'Garantia',
    Alerta: 'Alerta'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "cliente" | "operativo" | "usuario" | "rol" | "usuarioRol" | "cita" | "fichaClinica" | "receta" | "producto" | "venta" | "itemVenta" | "garantia" | "alerta"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Operativo: {
        payload: Prisma.$OperativoPayload<ExtArgs>
        fields: Prisma.OperativoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperativoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperativoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperativoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperativoPayload>
          }
          findFirst: {
            args: Prisma.OperativoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperativoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperativoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperativoPayload>
          }
          findMany: {
            args: Prisma.OperativoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperativoPayload>[]
          }
          create: {
            args: Prisma.OperativoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperativoPayload>
          }
          createMany: {
            args: Prisma.OperativoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OperativoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperativoPayload>
          }
          update: {
            args: Prisma.OperativoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperativoPayload>
          }
          deleteMany: {
            args: Prisma.OperativoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperativoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OperativoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperativoPayload>
          }
          aggregate: {
            args: Prisma.OperativoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperativo>
          }
          groupBy: {
            args: Prisma.OperativoGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperativoGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperativoCountArgs<ExtArgs>
            result: $Utils.Optional<OperativoCountAggregateOutputType> | number
          }
        }
      }
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Rol: {
        payload: Prisma.$RolPayload<ExtArgs>
        fields: Prisma.RolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>
          }
          findFirst: {
            args: Prisma.RolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>
          }
          findMany: {
            args: Prisma.RolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>[]
          }
          create: {
            args: Prisma.RolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>
          }
          createMany: {
            args: Prisma.RolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>
          }
          update: {
            args: Prisma.RolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>
          }
          deleteMany: {
            args: Prisma.RolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolPayload>
          }
          aggregate: {
            args: Prisma.RolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRol>
          }
          groupBy: {
            args: Prisma.RolGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolCountArgs<ExtArgs>
            result: $Utils.Optional<RolCountAggregateOutputType> | number
          }
        }
      }
      UsuarioRol: {
        payload: Prisma.$UsuarioRolPayload<ExtArgs>
        fields: Prisma.UsuarioRolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioRolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioRolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>
          }
          findFirst: {
            args: Prisma.UsuarioRolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioRolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>
          }
          findMany: {
            args: Prisma.UsuarioRolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>[]
          }
          create: {
            args: Prisma.UsuarioRolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>
          }
          createMany: {
            args: Prisma.UsuarioRolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsuarioRolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>
          }
          update: {
            args: Prisma.UsuarioRolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioRolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioRolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioRolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioRolPayload>
          }
          aggregate: {
            args: Prisma.UsuarioRolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuarioRol>
          }
          groupBy: {
            args: Prisma.UsuarioRolGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioRolGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioRolCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioRolCountAggregateOutputType> | number
          }
        }
      }
      Cita: {
        payload: Prisma.$CitaPayload<ExtArgs>
        fields: Prisma.CitaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CitaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CitaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>
          }
          findFirst: {
            args: Prisma.CitaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CitaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>
          }
          findMany: {
            args: Prisma.CitaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>[]
          }
          create: {
            args: Prisma.CitaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>
          }
          createMany: {
            args: Prisma.CitaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CitaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>
          }
          update: {
            args: Prisma.CitaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>
          }
          deleteMany: {
            args: Prisma.CitaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CitaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CitaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitaPayload>
          }
          aggregate: {
            args: Prisma.CitaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCita>
          }
          groupBy: {
            args: Prisma.CitaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CitaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CitaCountArgs<ExtArgs>
            result: $Utils.Optional<CitaCountAggregateOutputType> | number
          }
        }
      }
      FichaClinica: {
        payload: Prisma.$FichaClinicaPayload<ExtArgs>
        fields: Prisma.FichaClinicaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FichaClinicaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FichaClinicaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FichaClinicaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FichaClinicaPayload>
          }
          findFirst: {
            args: Prisma.FichaClinicaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FichaClinicaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FichaClinicaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FichaClinicaPayload>
          }
          findMany: {
            args: Prisma.FichaClinicaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FichaClinicaPayload>[]
          }
          create: {
            args: Prisma.FichaClinicaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FichaClinicaPayload>
          }
          createMany: {
            args: Prisma.FichaClinicaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FichaClinicaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FichaClinicaPayload>
          }
          update: {
            args: Prisma.FichaClinicaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FichaClinicaPayload>
          }
          deleteMany: {
            args: Prisma.FichaClinicaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FichaClinicaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FichaClinicaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FichaClinicaPayload>
          }
          aggregate: {
            args: Prisma.FichaClinicaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFichaClinica>
          }
          groupBy: {
            args: Prisma.FichaClinicaGroupByArgs<ExtArgs>
            result: $Utils.Optional<FichaClinicaGroupByOutputType>[]
          }
          count: {
            args: Prisma.FichaClinicaCountArgs<ExtArgs>
            result: $Utils.Optional<FichaClinicaCountAggregateOutputType> | number
          }
        }
      }
      Receta: {
        payload: Prisma.$RecetaPayload<ExtArgs>
        fields: Prisma.RecetaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecetaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecetaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecetaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecetaPayload>
          }
          findFirst: {
            args: Prisma.RecetaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecetaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecetaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecetaPayload>
          }
          findMany: {
            args: Prisma.RecetaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecetaPayload>[]
          }
          create: {
            args: Prisma.RecetaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecetaPayload>
          }
          createMany: {
            args: Prisma.RecetaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RecetaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecetaPayload>
          }
          update: {
            args: Prisma.RecetaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecetaPayload>
          }
          deleteMany: {
            args: Prisma.RecetaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecetaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecetaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecetaPayload>
          }
          aggregate: {
            args: Prisma.RecetaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceta>
          }
          groupBy: {
            args: Prisma.RecetaGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecetaGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecetaCountArgs<ExtArgs>
            result: $Utils.Optional<RecetaCountAggregateOutputType> | number
          }
        }
      }
      Producto: {
        payload: Prisma.$ProductoPayload<ExtArgs>
        fields: Prisma.ProductoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>
          }
          findFirst: {
            args: Prisma.ProductoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>
          }
          findMany: {
            args: Prisma.ProductoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>[]
          }
          create: {
            args: Prisma.ProductoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>
          }
          createMany: {
            args: Prisma.ProductoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>
          }
          update: {
            args: Prisma.ProductoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>
          }
          deleteMany: {
            args: Prisma.ProductoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoPayload>
          }
          aggregate: {
            args: Prisma.ProductoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProducto>
          }
          groupBy: {
            args: Prisma.ProductoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductoCountArgs<ExtArgs>
            result: $Utils.Optional<ProductoCountAggregateOutputType> | number
          }
        }
      }
      Venta: {
        payload: Prisma.$VentaPayload<ExtArgs>
        fields: Prisma.VentaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VentaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VentaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          findFirst: {
            args: Prisma.VentaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VentaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          findMany: {
            args: Prisma.VentaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>[]
          }
          create: {
            args: Prisma.VentaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          createMany: {
            args: Prisma.VentaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VentaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          update: {
            args: Prisma.VentaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          deleteMany: {
            args: Prisma.VentaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VentaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VentaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          aggregate: {
            args: Prisma.VentaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVenta>
          }
          groupBy: {
            args: Prisma.VentaGroupByArgs<ExtArgs>
            result: $Utils.Optional<VentaGroupByOutputType>[]
          }
          count: {
            args: Prisma.VentaCountArgs<ExtArgs>
            result: $Utils.Optional<VentaCountAggregateOutputType> | number
          }
        }
      }
      ItemVenta: {
        payload: Prisma.$ItemVentaPayload<ExtArgs>
        fields: Prisma.ItemVentaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemVentaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemVentaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemVentaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemVentaPayload>
          }
          findFirst: {
            args: Prisma.ItemVentaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemVentaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemVentaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemVentaPayload>
          }
          findMany: {
            args: Prisma.ItemVentaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemVentaPayload>[]
          }
          create: {
            args: Prisma.ItemVentaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemVentaPayload>
          }
          createMany: {
            args: Prisma.ItemVentaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ItemVentaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemVentaPayload>
          }
          update: {
            args: Prisma.ItemVentaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemVentaPayload>
          }
          deleteMany: {
            args: Prisma.ItemVentaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemVentaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemVentaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemVentaPayload>
          }
          aggregate: {
            args: Prisma.ItemVentaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItemVenta>
          }
          groupBy: {
            args: Prisma.ItemVentaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemVentaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemVentaCountArgs<ExtArgs>
            result: $Utils.Optional<ItemVentaCountAggregateOutputType> | number
          }
        }
      }
      Garantia: {
        payload: Prisma.$GarantiaPayload<ExtArgs>
        fields: Prisma.GarantiaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GarantiaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GarantiaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GarantiaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GarantiaPayload>
          }
          findFirst: {
            args: Prisma.GarantiaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GarantiaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GarantiaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GarantiaPayload>
          }
          findMany: {
            args: Prisma.GarantiaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GarantiaPayload>[]
          }
          create: {
            args: Prisma.GarantiaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GarantiaPayload>
          }
          createMany: {
            args: Prisma.GarantiaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GarantiaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GarantiaPayload>
          }
          update: {
            args: Prisma.GarantiaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GarantiaPayload>
          }
          deleteMany: {
            args: Prisma.GarantiaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GarantiaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GarantiaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GarantiaPayload>
          }
          aggregate: {
            args: Prisma.GarantiaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGarantia>
          }
          groupBy: {
            args: Prisma.GarantiaGroupByArgs<ExtArgs>
            result: $Utils.Optional<GarantiaGroupByOutputType>[]
          }
          count: {
            args: Prisma.GarantiaCountArgs<ExtArgs>
            result: $Utils.Optional<GarantiaCountAggregateOutputType> | number
          }
        }
      }
      Alerta: {
        payload: Prisma.$AlertaPayload<ExtArgs>
        fields: Prisma.AlertaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlertaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlertaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>
          }
          findFirst: {
            args: Prisma.AlertaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlertaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>
          }
          findMany: {
            args: Prisma.AlertaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>[]
          }
          create: {
            args: Prisma.AlertaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>
          }
          createMany: {
            args: Prisma.AlertaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AlertaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>
          }
          update: {
            args: Prisma.AlertaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>
          }
          deleteMany: {
            args: Prisma.AlertaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlertaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlertaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>
          }
          aggregate: {
            args: Prisma.AlertaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlerta>
          }
          groupBy: {
            args: Prisma.AlertaGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlertaGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlertaCountArgs<ExtArgs>
            result: $Utils.Optional<AlertaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    cliente?: ClienteOmit
    operativo?: OperativoOmit
    usuario?: UsuarioOmit
    rol?: RolOmit
    usuarioRol?: UsuarioRolOmit
    cita?: CitaOmit
    fichaClinica?: FichaClinicaOmit
    receta?: RecetaOmit
    producto?: ProductoOmit
    venta?: VentaOmit
    itemVenta?: ItemVentaOmit
    garantia?: GarantiaOmit
    alerta?: AlertaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    alertas: number
    citas: number
    ventas: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alertas?: boolean | ClienteCountOutputTypeCountAlertasArgs
    citas?: boolean | ClienteCountOutputTypeCountCitasArgs
    ventas?: boolean | ClienteCountOutputTypeCountVentasArgs
  }

  // Custom InputTypes
  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountAlertasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertaWhereInput
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountCitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CitaWhereInput
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountVentasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VentaWhereInput
  }


  /**
   * Count Type OperativoCountOutputType
   */

  export type OperativoCountOutputType = {
    citas: number
  }

  export type OperativoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    citas?: boolean | OperativoCountOutputTypeCountCitasArgs
  }

  // Custom InputTypes
  /**
   * OperativoCountOutputType without action
   */
  export type OperativoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperativoCountOutputType
     */
    select?: OperativoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OperativoCountOutputType without action
   */
  export type OperativoCountOutputTypeCountCitasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CitaWhereInput
  }


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    roles: number
    clientesCaptados: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | UsuarioCountOutputTypeCountRolesArgs
    clientesCaptados?: boolean | UsuarioCountOutputTypeCountClientesCaptadosArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioRolWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountClientesCaptadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
  }


  /**
   * Count Type RolCountOutputType
   */

  export type RolCountOutputType = {
    usuarios: number
  }

  export type RolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarios?: boolean | RolCountOutputTypeCountUsuariosArgs
  }

  // Custom InputTypes
  /**
   * RolCountOutputType without action
   */
  export type RolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolCountOutputType
     */
    select?: RolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RolCountOutputType without action
   */
  export type RolCountOutputTypeCountUsuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioRolWhereInput
  }


  /**
   * Count Type FichaClinicaCountOutputType
   */

  export type FichaClinicaCountOutputType = {
    recetas: number
  }

  export type FichaClinicaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recetas?: boolean | FichaClinicaCountOutputTypeCountRecetasArgs
  }

  // Custom InputTypes
  /**
   * FichaClinicaCountOutputType without action
   */
  export type FichaClinicaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FichaClinicaCountOutputType
     */
    select?: FichaClinicaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FichaClinicaCountOutputType without action
   */
  export type FichaClinicaCountOutputTypeCountRecetasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecetaWhereInput
  }


  /**
   * Count Type RecetaCountOutputType
   */

  export type RecetaCountOutputType = {
    ventas: number
  }

  export type RecetaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ventas?: boolean | RecetaCountOutputTypeCountVentasArgs
  }

  // Custom InputTypes
  /**
   * RecetaCountOutputType without action
   */
  export type RecetaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecetaCountOutputType
     */
    select?: RecetaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RecetaCountOutputType without action
   */
  export type RecetaCountOutputTypeCountVentasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VentaWhereInput
  }


  /**
   * Count Type ProductoCountOutputType
   */

  export type ProductoCountOutputType = {
    items: number
  }

  export type ProductoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ProductoCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * ProductoCountOutputType without action
   */
  export type ProductoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoCountOutputType
     */
    select?: ProductoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductoCountOutputType without action
   */
  export type ProductoCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemVentaWhereInput
  }


  /**
   * Count Type VentaCountOutputType
   */

  export type VentaCountOutputType = {
    items: number
  }

  export type VentaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | VentaCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * VentaCountOutputType without action
   */
  export type VentaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VentaCountOutputType
     */
    select?: VentaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VentaCountOutputType without action
   */
  export type VentaCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemVentaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    idCliente: number | null
    idVendedor: number | null
  }

  export type ClienteSumAggregateOutputType = {
    idCliente: number | null
    idVendedor: number | null
  }

  export type ClienteMinAggregateOutputType = {
    idCliente: number | null
    rut: string | null
    nombre: string | null
    telefono: string | null
    correo: string | null
    direccion: string | null
    sector: string | null
    fechaCreacion: Date | null
    idVendedor: number | null
  }

  export type ClienteMaxAggregateOutputType = {
    idCliente: number | null
    rut: string | null
    nombre: string | null
    telefono: string | null
    correo: string | null
    direccion: string | null
    sector: string | null
    fechaCreacion: Date | null
    idVendedor: number | null
  }

  export type ClienteCountAggregateOutputType = {
    idCliente: number
    rut: number
    nombre: number
    telefono: number
    correo: number
    direccion: number
    sector: number
    fechaCreacion: number
    idVendedor: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    idCliente?: true
    idVendedor?: true
  }

  export type ClienteSumAggregateInputType = {
    idCliente?: true
    idVendedor?: true
  }

  export type ClienteMinAggregateInputType = {
    idCliente?: true
    rut?: true
    nombre?: true
    telefono?: true
    correo?: true
    direccion?: true
    sector?: true
    fechaCreacion?: true
    idVendedor?: true
  }

  export type ClienteMaxAggregateInputType = {
    idCliente?: true
    rut?: true
    nombre?: true
    telefono?: true
    correo?: true
    direccion?: true
    sector?: true
    fechaCreacion?: true
    idVendedor?: true
  }

  export type ClienteCountAggregateInputType = {
    idCliente?: true
    rut?: true
    nombre?: true
    telefono?: true
    correo?: true
    direccion?: true
    sector?: true
    fechaCreacion?: true
    idVendedor?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    idCliente: number
    rut: string
    nombre: string
    telefono: string | null
    correo: string | null
    direccion: string | null
    sector: string | null
    fechaCreacion: Date
    idVendedor: number | null
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idCliente?: boolean
    rut?: boolean
    nombre?: boolean
    telefono?: boolean
    correo?: boolean
    direccion?: boolean
    sector?: boolean
    fechaCreacion?: boolean
    idVendedor?: boolean
    vendedor?: boolean | Cliente$vendedorArgs<ExtArgs>
    alertas?: boolean | Cliente$alertasArgs<ExtArgs>
    citas?: boolean | Cliente$citasArgs<ExtArgs>
    ventas?: boolean | Cliente$ventasArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>



  export type ClienteSelectScalar = {
    idCliente?: boolean
    rut?: boolean
    nombre?: boolean
    telefono?: boolean
    correo?: boolean
    direccion?: boolean
    sector?: boolean
    fechaCreacion?: boolean
    idVendedor?: boolean
  }

  export type ClienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idCliente" | "rut" | "nombre" | "telefono" | "correo" | "direccion" | "sector" | "fechaCreacion" | "idVendedor", ExtArgs["result"]["cliente"]>
  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendedor?: boolean | Cliente$vendedorArgs<ExtArgs>
    alertas?: boolean | Cliente$alertasArgs<ExtArgs>
    citas?: boolean | Cliente$citasArgs<ExtArgs>
    ventas?: boolean | Cliente$ventasArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      vendedor: Prisma.$UsuarioPayload<ExtArgs> | null
      alertas: Prisma.$AlertaPayload<ExtArgs>[]
      citas: Prisma.$CitaPayload<ExtArgs>[]
      ventas: Prisma.$VentaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idCliente: number
      rut: string
      nombre: string
      telefono: string | null
      correo: string | null
      direccion: string | null
      sector: string | null
      fechaCreacion: Date
      idVendedor: number | null
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteFindUniqueArgs>(args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteFindFirstArgs>(args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `idCliente`
     * const clienteWithIdClienteOnly = await prisma.cliente.findMany({ select: { idCliente: true } })
     * 
     */
    findMany<T extends ClienteFindManyArgs>(args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends ClienteCreateArgs>(args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clientes.
     * @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteCreateManyArgs>(args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends ClienteDeleteArgs>(args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteUpdateArgs>(args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteDeleteManyArgs>(args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteUpdateManyArgs>(args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends ClienteUpsertArgs>(args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vendedor<T extends Cliente$vendedorArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$vendedorArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    alertas<T extends Cliente$alertasArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$alertasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    citas<T extends Cliente$citasArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$citasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ventas<T extends Cliente$ventasArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$ventasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cliente model
   */
  interface ClienteFieldRefs {
    readonly idCliente: FieldRef<"Cliente", 'Int'>
    readonly rut: FieldRef<"Cliente", 'String'>
    readonly nombre: FieldRef<"Cliente", 'String'>
    readonly telefono: FieldRef<"Cliente", 'String'>
    readonly correo: FieldRef<"Cliente", 'String'>
    readonly direccion: FieldRef<"Cliente", 'String'>
    readonly sector: FieldRef<"Cliente", 'String'>
    readonly fechaCreacion: FieldRef<"Cliente", 'DateTime'>
    readonly idVendedor: FieldRef<"Cliente", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to update.
     */
    limit?: number
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to delete.
     */
    limit?: number
  }

  /**
   * Cliente.vendedor
   */
  export type Cliente$vendedorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
  }

  /**
   * Cliente.alertas
   */
  export type Cliente$alertasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alerta
     */
    omit?: AlertaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    where?: AlertaWhereInput
    orderBy?: AlertaOrderByWithRelationInput | AlertaOrderByWithRelationInput[]
    cursor?: AlertaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertaScalarFieldEnum | AlertaScalarFieldEnum[]
  }

  /**
   * Cliente.citas
   */
  export type Cliente$citasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    where?: CitaWhereInput
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    cursor?: CitaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CitaScalarFieldEnum | CitaScalarFieldEnum[]
  }

  /**
   * Cliente.ventas
   */
  export type Cliente$ventasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    where?: VentaWhereInput
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    cursor?: VentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
  }


  /**
   * Model Operativo
   */

  export type AggregateOperativo = {
    _count: OperativoCountAggregateOutputType | null
    _avg: OperativoAvgAggregateOutputType | null
    _sum: OperativoSumAggregateOutputType | null
    _min: OperativoMinAggregateOutputType | null
    _max: OperativoMaxAggregateOutputType | null
  }

  export type OperativoAvgAggregateOutputType = {
    idOperativo: number | null
    cupos: number | null
  }

  export type OperativoSumAggregateOutputType = {
    idOperativo: number | null
    cupos: number | null
  }

  export type OperativoMinAggregateOutputType = {
    idOperativo: number | null
    nombre: string | null
    fecha: Date | null
    lugar: string | null
    cupos: number | null
  }

  export type OperativoMaxAggregateOutputType = {
    idOperativo: number | null
    nombre: string | null
    fecha: Date | null
    lugar: string | null
    cupos: number | null
  }

  export type OperativoCountAggregateOutputType = {
    idOperativo: number
    nombre: number
    fecha: number
    lugar: number
    cupos: number
    _all: number
  }


  export type OperativoAvgAggregateInputType = {
    idOperativo?: true
    cupos?: true
  }

  export type OperativoSumAggregateInputType = {
    idOperativo?: true
    cupos?: true
  }

  export type OperativoMinAggregateInputType = {
    idOperativo?: true
    nombre?: true
    fecha?: true
    lugar?: true
    cupos?: true
  }

  export type OperativoMaxAggregateInputType = {
    idOperativo?: true
    nombre?: true
    fecha?: true
    lugar?: true
    cupos?: true
  }

  export type OperativoCountAggregateInputType = {
    idOperativo?: true
    nombre?: true
    fecha?: true
    lugar?: true
    cupos?: true
    _all?: true
  }

  export type OperativoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operativo to aggregate.
     */
    where?: OperativoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operativos to fetch.
     */
    orderBy?: OperativoOrderByWithRelationInput | OperativoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperativoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operativos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operativos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Operativos
    **/
    _count?: true | OperativoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OperativoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OperativoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperativoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperativoMaxAggregateInputType
  }

  export type GetOperativoAggregateType<T extends OperativoAggregateArgs> = {
        [P in keyof T & keyof AggregateOperativo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperativo[P]>
      : GetScalarType<T[P], AggregateOperativo[P]>
  }




  export type OperativoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperativoWhereInput
    orderBy?: OperativoOrderByWithAggregationInput | OperativoOrderByWithAggregationInput[]
    by: OperativoScalarFieldEnum[] | OperativoScalarFieldEnum
    having?: OperativoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperativoCountAggregateInputType | true
    _avg?: OperativoAvgAggregateInputType
    _sum?: OperativoSumAggregateInputType
    _min?: OperativoMinAggregateInputType
    _max?: OperativoMaxAggregateInputType
  }

  export type OperativoGroupByOutputType = {
    idOperativo: number
    nombre: string
    fecha: Date
    lugar: string | null
    cupos: number | null
    _count: OperativoCountAggregateOutputType | null
    _avg: OperativoAvgAggregateOutputType | null
    _sum: OperativoSumAggregateOutputType | null
    _min: OperativoMinAggregateOutputType | null
    _max: OperativoMaxAggregateOutputType | null
  }

  type GetOperativoGroupByPayload<T extends OperativoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperativoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperativoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperativoGroupByOutputType[P]>
            : GetScalarType<T[P], OperativoGroupByOutputType[P]>
        }
      >
    >


  export type OperativoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idOperativo?: boolean
    nombre?: boolean
    fecha?: boolean
    lugar?: boolean
    cupos?: boolean
    citas?: boolean | Operativo$citasArgs<ExtArgs>
    _count?: boolean | OperativoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operativo"]>



  export type OperativoSelectScalar = {
    idOperativo?: boolean
    nombre?: boolean
    fecha?: boolean
    lugar?: boolean
    cupos?: boolean
  }

  export type OperativoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idOperativo" | "nombre" | "fecha" | "lugar" | "cupos", ExtArgs["result"]["operativo"]>
  export type OperativoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    citas?: boolean | Operativo$citasArgs<ExtArgs>
    _count?: boolean | OperativoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OperativoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Operativo"
    objects: {
      citas: Prisma.$CitaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idOperativo: number
      nombre: string
      fecha: Date
      lugar: string | null
      cupos: number | null
    }, ExtArgs["result"]["operativo"]>
    composites: {}
  }

  type OperativoGetPayload<S extends boolean | null | undefined | OperativoDefaultArgs> = $Result.GetResult<Prisma.$OperativoPayload, S>

  type OperativoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OperativoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OperativoCountAggregateInputType | true
    }

  export interface OperativoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Operativo'], meta: { name: 'Operativo' } }
    /**
     * Find zero or one Operativo that matches the filter.
     * @param {OperativoFindUniqueArgs} args - Arguments to find a Operativo
     * @example
     * // Get one Operativo
     * const operativo = await prisma.operativo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperativoFindUniqueArgs>(args: SelectSubset<T, OperativoFindUniqueArgs<ExtArgs>>): Prisma__OperativoClient<$Result.GetResult<Prisma.$OperativoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Operativo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OperativoFindUniqueOrThrowArgs} args - Arguments to find a Operativo
     * @example
     * // Get one Operativo
     * const operativo = await prisma.operativo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperativoFindUniqueOrThrowArgs>(args: SelectSubset<T, OperativoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperativoClient<$Result.GetResult<Prisma.$OperativoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Operativo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperativoFindFirstArgs} args - Arguments to find a Operativo
     * @example
     * // Get one Operativo
     * const operativo = await prisma.operativo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperativoFindFirstArgs>(args?: SelectSubset<T, OperativoFindFirstArgs<ExtArgs>>): Prisma__OperativoClient<$Result.GetResult<Prisma.$OperativoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Operativo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperativoFindFirstOrThrowArgs} args - Arguments to find a Operativo
     * @example
     * // Get one Operativo
     * const operativo = await prisma.operativo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperativoFindFirstOrThrowArgs>(args?: SelectSubset<T, OperativoFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperativoClient<$Result.GetResult<Prisma.$OperativoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Operativos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperativoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Operativos
     * const operativos = await prisma.operativo.findMany()
     * 
     * // Get first 10 Operativos
     * const operativos = await prisma.operativo.findMany({ take: 10 })
     * 
     * // Only select the `idOperativo`
     * const operativoWithIdOperativoOnly = await prisma.operativo.findMany({ select: { idOperativo: true } })
     * 
     */
    findMany<T extends OperativoFindManyArgs>(args?: SelectSubset<T, OperativoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperativoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Operativo.
     * @param {OperativoCreateArgs} args - Arguments to create a Operativo.
     * @example
     * // Create one Operativo
     * const Operativo = await prisma.operativo.create({
     *   data: {
     *     // ... data to create a Operativo
     *   }
     * })
     * 
     */
    create<T extends OperativoCreateArgs>(args: SelectSubset<T, OperativoCreateArgs<ExtArgs>>): Prisma__OperativoClient<$Result.GetResult<Prisma.$OperativoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Operativos.
     * @param {OperativoCreateManyArgs} args - Arguments to create many Operativos.
     * @example
     * // Create many Operativos
     * const operativo = await prisma.operativo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperativoCreateManyArgs>(args?: SelectSubset<T, OperativoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Operativo.
     * @param {OperativoDeleteArgs} args - Arguments to delete one Operativo.
     * @example
     * // Delete one Operativo
     * const Operativo = await prisma.operativo.delete({
     *   where: {
     *     // ... filter to delete one Operativo
     *   }
     * })
     * 
     */
    delete<T extends OperativoDeleteArgs>(args: SelectSubset<T, OperativoDeleteArgs<ExtArgs>>): Prisma__OperativoClient<$Result.GetResult<Prisma.$OperativoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Operativo.
     * @param {OperativoUpdateArgs} args - Arguments to update one Operativo.
     * @example
     * // Update one Operativo
     * const operativo = await prisma.operativo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperativoUpdateArgs>(args: SelectSubset<T, OperativoUpdateArgs<ExtArgs>>): Prisma__OperativoClient<$Result.GetResult<Prisma.$OperativoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Operativos.
     * @param {OperativoDeleteManyArgs} args - Arguments to filter Operativos to delete.
     * @example
     * // Delete a few Operativos
     * const { count } = await prisma.operativo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperativoDeleteManyArgs>(args?: SelectSubset<T, OperativoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operativos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperativoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Operativos
     * const operativo = await prisma.operativo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperativoUpdateManyArgs>(args: SelectSubset<T, OperativoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Operativo.
     * @param {OperativoUpsertArgs} args - Arguments to update or create a Operativo.
     * @example
     * // Update or create a Operativo
     * const operativo = await prisma.operativo.upsert({
     *   create: {
     *     // ... data to create a Operativo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Operativo we want to update
     *   }
     * })
     */
    upsert<T extends OperativoUpsertArgs>(args: SelectSubset<T, OperativoUpsertArgs<ExtArgs>>): Prisma__OperativoClient<$Result.GetResult<Prisma.$OperativoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Operativos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperativoCountArgs} args - Arguments to filter Operativos to count.
     * @example
     * // Count the number of Operativos
     * const count = await prisma.operativo.count({
     *   where: {
     *     // ... the filter for the Operativos we want to count
     *   }
     * })
    **/
    count<T extends OperativoCountArgs>(
      args?: Subset<T, OperativoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperativoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Operativo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperativoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperativoAggregateArgs>(args: Subset<T, OperativoAggregateArgs>): Prisma.PrismaPromise<GetOperativoAggregateType<T>>

    /**
     * Group by Operativo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperativoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperativoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperativoGroupByArgs['orderBy'] }
        : { orderBy?: OperativoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperativoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperativoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Operativo model
   */
  readonly fields: OperativoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Operativo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperativoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    citas<T extends Operativo$citasArgs<ExtArgs> = {}>(args?: Subset<T, Operativo$citasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Operativo model
   */
  interface OperativoFieldRefs {
    readonly idOperativo: FieldRef<"Operativo", 'Int'>
    readonly nombre: FieldRef<"Operativo", 'String'>
    readonly fecha: FieldRef<"Operativo", 'DateTime'>
    readonly lugar: FieldRef<"Operativo", 'String'>
    readonly cupos: FieldRef<"Operativo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Operativo findUnique
   */
  export type OperativoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operativo
     */
    select?: OperativoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operativo
     */
    omit?: OperativoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperativoInclude<ExtArgs> | null
    /**
     * Filter, which Operativo to fetch.
     */
    where: OperativoWhereUniqueInput
  }

  /**
   * Operativo findUniqueOrThrow
   */
  export type OperativoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operativo
     */
    select?: OperativoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operativo
     */
    omit?: OperativoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperativoInclude<ExtArgs> | null
    /**
     * Filter, which Operativo to fetch.
     */
    where: OperativoWhereUniqueInput
  }

  /**
   * Operativo findFirst
   */
  export type OperativoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operativo
     */
    select?: OperativoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operativo
     */
    omit?: OperativoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperativoInclude<ExtArgs> | null
    /**
     * Filter, which Operativo to fetch.
     */
    where?: OperativoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operativos to fetch.
     */
    orderBy?: OperativoOrderByWithRelationInput | OperativoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operativos.
     */
    cursor?: OperativoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operativos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operativos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operativos.
     */
    distinct?: OperativoScalarFieldEnum | OperativoScalarFieldEnum[]
  }

  /**
   * Operativo findFirstOrThrow
   */
  export type OperativoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operativo
     */
    select?: OperativoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operativo
     */
    omit?: OperativoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperativoInclude<ExtArgs> | null
    /**
     * Filter, which Operativo to fetch.
     */
    where?: OperativoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operativos to fetch.
     */
    orderBy?: OperativoOrderByWithRelationInput | OperativoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operativos.
     */
    cursor?: OperativoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operativos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operativos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operativos.
     */
    distinct?: OperativoScalarFieldEnum | OperativoScalarFieldEnum[]
  }

  /**
   * Operativo findMany
   */
  export type OperativoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operativo
     */
    select?: OperativoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operativo
     */
    omit?: OperativoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperativoInclude<ExtArgs> | null
    /**
     * Filter, which Operativos to fetch.
     */
    where?: OperativoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operativos to fetch.
     */
    orderBy?: OperativoOrderByWithRelationInput | OperativoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Operativos.
     */
    cursor?: OperativoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operativos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operativos.
     */
    skip?: number
    distinct?: OperativoScalarFieldEnum | OperativoScalarFieldEnum[]
  }

  /**
   * Operativo create
   */
  export type OperativoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operativo
     */
    select?: OperativoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operativo
     */
    omit?: OperativoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperativoInclude<ExtArgs> | null
    /**
     * The data needed to create a Operativo.
     */
    data: XOR<OperativoCreateInput, OperativoUncheckedCreateInput>
  }

  /**
   * Operativo createMany
   */
  export type OperativoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Operativos.
     */
    data: OperativoCreateManyInput | OperativoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Operativo update
   */
  export type OperativoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operativo
     */
    select?: OperativoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operativo
     */
    omit?: OperativoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperativoInclude<ExtArgs> | null
    /**
     * The data needed to update a Operativo.
     */
    data: XOR<OperativoUpdateInput, OperativoUncheckedUpdateInput>
    /**
     * Choose, which Operativo to update.
     */
    where: OperativoWhereUniqueInput
  }

  /**
   * Operativo updateMany
   */
  export type OperativoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Operativos.
     */
    data: XOR<OperativoUpdateManyMutationInput, OperativoUncheckedUpdateManyInput>
    /**
     * Filter which Operativos to update
     */
    where?: OperativoWhereInput
    /**
     * Limit how many Operativos to update.
     */
    limit?: number
  }

  /**
   * Operativo upsert
   */
  export type OperativoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operativo
     */
    select?: OperativoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operativo
     */
    omit?: OperativoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperativoInclude<ExtArgs> | null
    /**
     * The filter to search for the Operativo to update in case it exists.
     */
    where: OperativoWhereUniqueInput
    /**
     * In case the Operativo found by the `where` argument doesn't exist, create a new Operativo with this data.
     */
    create: XOR<OperativoCreateInput, OperativoUncheckedCreateInput>
    /**
     * In case the Operativo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperativoUpdateInput, OperativoUncheckedUpdateInput>
  }

  /**
   * Operativo delete
   */
  export type OperativoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operativo
     */
    select?: OperativoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operativo
     */
    omit?: OperativoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperativoInclude<ExtArgs> | null
    /**
     * Filter which Operativo to delete.
     */
    where: OperativoWhereUniqueInput
  }

  /**
   * Operativo deleteMany
   */
  export type OperativoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operativos to delete
     */
    where?: OperativoWhereInput
    /**
     * Limit how many Operativos to delete.
     */
    limit?: number
  }

  /**
   * Operativo.citas
   */
  export type Operativo$citasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    where?: CitaWhereInput
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    cursor?: CitaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CitaScalarFieldEnum | CitaScalarFieldEnum[]
  }

  /**
   * Operativo without action
   */
  export type OperativoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operativo
     */
    select?: OperativoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operativo
     */
    omit?: OperativoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperativoInclude<ExtArgs> | null
  }


  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    idUsuario: number | null
    activo: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    idUsuario: number | null
    activo: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    idUsuario: number | null
    nombre: string | null
    correo: string | null
    hashPassword: string | null
    activo: number | null
  }

  export type UsuarioMaxAggregateOutputType = {
    idUsuario: number | null
    nombre: string | null
    correo: string | null
    hashPassword: string | null
    activo: number | null
  }

  export type UsuarioCountAggregateOutputType = {
    idUsuario: number
    nombre: number
    correo: number
    hashPassword: number
    activo: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    idUsuario?: true
    activo?: true
  }

  export type UsuarioSumAggregateInputType = {
    idUsuario?: true
    activo?: true
  }

  export type UsuarioMinAggregateInputType = {
    idUsuario?: true
    nombre?: true
    correo?: true
    hashPassword?: true
    activo?: true
  }

  export type UsuarioMaxAggregateInputType = {
    idUsuario?: true
    nombre?: true
    correo?: true
    hashPassword?: true
    activo?: true
  }

  export type UsuarioCountAggregateInputType = {
    idUsuario?: true
    nombre?: true
    correo?: true
    hashPassword?: true
    activo?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    idUsuario: number
    nombre: string
    correo: string
    hashPassword: string
    activo: number
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUsuario?: boolean
    nombre?: boolean
    correo?: boolean
    hashPassword?: boolean
    activo?: boolean
    roles?: boolean | Usuario$rolesArgs<ExtArgs>
    clientesCaptados?: boolean | Usuario$clientesCaptadosArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>



  export type UsuarioSelectScalar = {
    idUsuario?: boolean
    nombre?: boolean
    correo?: boolean
    hashPassword?: boolean
    activo?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idUsuario" | "nombre" | "correo" | "hashPassword" | "activo", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | Usuario$rolesArgs<ExtArgs>
    clientesCaptados?: boolean | Usuario$clientesCaptadosArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      roles: Prisma.$UsuarioRolPayload<ExtArgs>[]
      clientesCaptados: Prisma.$ClientePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idUsuario: number
      nombre: string
      correo: string
      hashPassword: string
      activo: number
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `idUsuario`
     * const usuarioWithIdUsuarioOnly = await prisma.usuario.findMany({ select: { idUsuario: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roles<T extends Usuario$rolesArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    clientesCaptados<T extends Usuario$clientesCaptadosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$clientesCaptadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly idUsuario: FieldRef<"Usuario", 'Int'>
    readonly nombre: FieldRef<"Usuario", 'String'>
    readonly correo: FieldRef<"Usuario", 'String'>
    readonly hashPassword: FieldRef<"Usuario", 'String'>
    readonly activo: FieldRef<"Usuario", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.roles
   */
  export type Usuario$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    where?: UsuarioRolWhereInput
    orderBy?: UsuarioRolOrderByWithRelationInput | UsuarioRolOrderByWithRelationInput[]
    cursor?: UsuarioRolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioRolScalarFieldEnum | UsuarioRolScalarFieldEnum[]
  }

  /**
   * Usuario.clientesCaptados
   */
  export type Usuario$clientesCaptadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    cursor?: ClienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Rol
   */

  export type AggregateRol = {
    _count: RolCountAggregateOutputType | null
    _avg: RolAvgAggregateOutputType | null
    _sum: RolSumAggregateOutputType | null
    _min: RolMinAggregateOutputType | null
    _max: RolMaxAggregateOutputType | null
  }

  export type RolAvgAggregateOutputType = {
    idRol: number | null
  }

  export type RolSumAggregateOutputType = {
    idRol: number | null
  }

  export type RolMinAggregateOutputType = {
    idRol: number | null
    nombre: string | null
  }

  export type RolMaxAggregateOutputType = {
    idRol: number | null
    nombre: string | null
  }

  export type RolCountAggregateOutputType = {
    idRol: number
    nombre: number
    _all: number
  }


  export type RolAvgAggregateInputType = {
    idRol?: true
  }

  export type RolSumAggregateInputType = {
    idRol?: true
  }

  export type RolMinAggregateInputType = {
    idRol?: true
    nombre?: true
  }

  export type RolMaxAggregateInputType = {
    idRol?: true
    nombre?: true
  }

  export type RolCountAggregateInputType = {
    idRol?: true
    nombre?: true
    _all?: true
  }

  export type RolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rol to aggregate.
     */
    where?: RolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rols to fetch.
     */
    orderBy?: RolOrderByWithRelationInput | RolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rols
    **/
    _count?: true | RolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolMaxAggregateInputType
  }

  export type GetRolAggregateType<T extends RolAggregateArgs> = {
        [P in keyof T & keyof AggregateRol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRol[P]>
      : GetScalarType<T[P], AggregateRol[P]>
  }




  export type RolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolWhereInput
    orderBy?: RolOrderByWithAggregationInput | RolOrderByWithAggregationInput[]
    by: RolScalarFieldEnum[] | RolScalarFieldEnum
    having?: RolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolCountAggregateInputType | true
    _avg?: RolAvgAggregateInputType
    _sum?: RolSumAggregateInputType
    _min?: RolMinAggregateInputType
    _max?: RolMaxAggregateInputType
  }

  export type RolGroupByOutputType = {
    idRol: number
    nombre: string
    _count: RolCountAggregateOutputType | null
    _avg: RolAvgAggregateOutputType | null
    _sum: RolSumAggregateOutputType | null
    _min: RolMinAggregateOutputType | null
    _max: RolMaxAggregateOutputType | null
  }

  type GetRolGroupByPayload<T extends RolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolGroupByOutputType[P]>
            : GetScalarType<T[P], RolGroupByOutputType[P]>
        }
      >
    >


  export type RolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idRol?: boolean
    nombre?: boolean
    usuarios?: boolean | Rol$usuariosArgs<ExtArgs>
    _count?: boolean | RolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rol"]>



  export type RolSelectScalar = {
    idRol?: boolean
    nombre?: boolean
  }

  export type RolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idRol" | "nombre", ExtArgs["result"]["rol"]>
  export type RolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarios?: boolean | Rol$usuariosArgs<ExtArgs>
    _count?: boolean | RolCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rol"
    objects: {
      usuarios: Prisma.$UsuarioRolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idRol: number
      nombre: string
    }, ExtArgs["result"]["rol"]>
    composites: {}
  }

  type RolGetPayload<S extends boolean | null | undefined | RolDefaultArgs> = $Result.GetResult<Prisma.$RolPayload, S>

  type RolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RolCountAggregateInputType | true
    }

  export interface RolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rol'], meta: { name: 'Rol' } }
    /**
     * Find zero or one Rol that matches the filter.
     * @param {RolFindUniqueArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolFindUniqueArgs>(args: SelectSubset<T, RolFindUniqueArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Rol that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RolFindUniqueOrThrowArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolFindUniqueOrThrowArgs>(args: SelectSubset<T, RolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolFindFirstArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolFindFirstArgs>(args?: SelectSubset<T, RolFindFirstArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rol that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolFindFirstOrThrowArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolFindFirstOrThrowArgs>(args?: SelectSubset<T, RolFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rols
     * const rols = await prisma.rol.findMany()
     * 
     * // Get first 10 Rols
     * const rols = await prisma.rol.findMany({ take: 10 })
     * 
     * // Only select the `idRol`
     * const rolWithIdRolOnly = await prisma.rol.findMany({ select: { idRol: true } })
     * 
     */
    findMany<T extends RolFindManyArgs>(args?: SelectSubset<T, RolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Rol.
     * @param {RolCreateArgs} args - Arguments to create a Rol.
     * @example
     * // Create one Rol
     * const Rol = await prisma.rol.create({
     *   data: {
     *     // ... data to create a Rol
     *   }
     * })
     * 
     */
    create<T extends RolCreateArgs>(args: SelectSubset<T, RolCreateArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rols.
     * @param {RolCreateManyArgs} args - Arguments to create many Rols.
     * @example
     * // Create many Rols
     * const rol = await prisma.rol.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolCreateManyArgs>(args?: SelectSubset<T, RolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rol.
     * @param {RolDeleteArgs} args - Arguments to delete one Rol.
     * @example
     * // Delete one Rol
     * const Rol = await prisma.rol.delete({
     *   where: {
     *     // ... filter to delete one Rol
     *   }
     * })
     * 
     */
    delete<T extends RolDeleteArgs>(args: SelectSubset<T, RolDeleteArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Rol.
     * @param {RolUpdateArgs} args - Arguments to update one Rol.
     * @example
     * // Update one Rol
     * const rol = await prisma.rol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolUpdateArgs>(args: SelectSubset<T, RolUpdateArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rols.
     * @param {RolDeleteManyArgs} args - Arguments to filter Rols to delete.
     * @example
     * // Delete a few Rols
     * const { count } = await prisma.rol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolDeleteManyArgs>(args?: SelectSubset<T, RolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rols
     * const rol = await prisma.rol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolUpdateManyArgs>(args: SelectSubset<T, RolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rol.
     * @param {RolUpsertArgs} args - Arguments to update or create a Rol.
     * @example
     * // Update or create a Rol
     * const rol = await prisma.rol.upsert({
     *   create: {
     *     // ... data to create a Rol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rol we want to update
     *   }
     * })
     */
    upsert<T extends RolUpsertArgs>(args: SelectSubset<T, RolUpsertArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolCountArgs} args - Arguments to filter Rols to count.
     * @example
     * // Count the number of Rols
     * const count = await prisma.rol.count({
     *   where: {
     *     // ... the filter for the Rols we want to count
     *   }
     * })
    **/
    count<T extends RolCountArgs>(
      args?: Subset<T, RolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolAggregateArgs>(args: Subset<T, RolAggregateArgs>): Prisma.PrismaPromise<GetRolAggregateType<T>>

    /**
     * Group by Rol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolGroupByArgs['orderBy'] }
        : { orderBy?: RolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rol model
   */
  readonly fields: RolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuarios<T extends Rol$usuariosArgs<ExtArgs> = {}>(args?: Subset<T, Rol$usuariosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rol model
   */
  interface RolFieldRefs {
    readonly idRol: FieldRef<"Rol", 'Int'>
    readonly nombre: FieldRef<"Rol", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Rol findUnique
   */
  export type RolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * Filter, which Rol to fetch.
     */
    where: RolWhereUniqueInput
  }

  /**
   * Rol findUniqueOrThrow
   */
  export type RolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * Filter, which Rol to fetch.
     */
    where: RolWhereUniqueInput
  }

  /**
   * Rol findFirst
   */
  export type RolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * Filter, which Rol to fetch.
     */
    where?: RolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rols to fetch.
     */
    orderBy?: RolOrderByWithRelationInput | RolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rols.
     */
    cursor?: RolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rols.
     */
    distinct?: RolScalarFieldEnum | RolScalarFieldEnum[]
  }

  /**
   * Rol findFirstOrThrow
   */
  export type RolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * Filter, which Rol to fetch.
     */
    where?: RolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rols to fetch.
     */
    orderBy?: RolOrderByWithRelationInput | RolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rols.
     */
    cursor?: RolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rols.
     */
    distinct?: RolScalarFieldEnum | RolScalarFieldEnum[]
  }

  /**
   * Rol findMany
   */
  export type RolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * Filter, which Rols to fetch.
     */
    where?: RolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rols to fetch.
     */
    orderBy?: RolOrderByWithRelationInput | RolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rols.
     */
    cursor?: RolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rols.
     */
    skip?: number
    distinct?: RolScalarFieldEnum | RolScalarFieldEnum[]
  }

  /**
   * Rol create
   */
  export type RolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * The data needed to create a Rol.
     */
    data: XOR<RolCreateInput, RolUncheckedCreateInput>
  }

  /**
   * Rol createMany
   */
  export type RolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rols.
     */
    data: RolCreateManyInput | RolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rol update
   */
  export type RolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * The data needed to update a Rol.
     */
    data: XOR<RolUpdateInput, RolUncheckedUpdateInput>
    /**
     * Choose, which Rol to update.
     */
    where: RolWhereUniqueInput
  }

  /**
   * Rol updateMany
   */
  export type RolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rols.
     */
    data: XOR<RolUpdateManyMutationInput, RolUncheckedUpdateManyInput>
    /**
     * Filter which Rols to update
     */
    where?: RolWhereInput
    /**
     * Limit how many Rols to update.
     */
    limit?: number
  }

  /**
   * Rol upsert
   */
  export type RolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * The filter to search for the Rol to update in case it exists.
     */
    where: RolWhereUniqueInput
    /**
     * In case the Rol found by the `where` argument doesn't exist, create a new Rol with this data.
     */
    create: XOR<RolCreateInput, RolUncheckedCreateInput>
    /**
     * In case the Rol was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolUpdateInput, RolUncheckedUpdateInput>
  }

  /**
   * Rol delete
   */
  export type RolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
    /**
     * Filter which Rol to delete.
     */
    where: RolWhereUniqueInput
  }

  /**
   * Rol deleteMany
   */
  export type RolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rols to delete
     */
    where?: RolWhereInput
    /**
     * Limit how many Rols to delete.
     */
    limit?: number
  }

  /**
   * Rol.usuarios
   */
  export type Rol$usuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    where?: UsuarioRolWhereInput
    orderBy?: UsuarioRolOrderByWithRelationInput | UsuarioRolOrderByWithRelationInput[]
    cursor?: UsuarioRolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioRolScalarFieldEnum | UsuarioRolScalarFieldEnum[]
  }

  /**
   * Rol without action
   */
  export type RolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rol
     */
    omit?: RolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolInclude<ExtArgs> | null
  }


  /**
   * Model UsuarioRol
   */

  export type AggregateUsuarioRol = {
    _count: UsuarioRolCountAggregateOutputType | null
    _avg: UsuarioRolAvgAggregateOutputType | null
    _sum: UsuarioRolSumAggregateOutputType | null
    _min: UsuarioRolMinAggregateOutputType | null
    _max: UsuarioRolMaxAggregateOutputType | null
  }

  export type UsuarioRolAvgAggregateOutputType = {
    idUsuario: number | null
    idRol: number | null
  }

  export type UsuarioRolSumAggregateOutputType = {
    idUsuario: number | null
    idRol: number | null
  }

  export type UsuarioRolMinAggregateOutputType = {
    idUsuario: number | null
    idRol: number | null
  }

  export type UsuarioRolMaxAggregateOutputType = {
    idUsuario: number | null
    idRol: number | null
  }

  export type UsuarioRolCountAggregateOutputType = {
    idUsuario: number
    idRol: number
    _all: number
  }


  export type UsuarioRolAvgAggregateInputType = {
    idUsuario?: true
    idRol?: true
  }

  export type UsuarioRolSumAggregateInputType = {
    idUsuario?: true
    idRol?: true
  }

  export type UsuarioRolMinAggregateInputType = {
    idUsuario?: true
    idRol?: true
  }

  export type UsuarioRolMaxAggregateInputType = {
    idUsuario?: true
    idRol?: true
  }

  export type UsuarioRolCountAggregateInputType = {
    idUsuario?: true
    idRol?: true
    _all?: true
  }

  export type UsuarioRolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsuarioRol to aggregate.
     */
    where?: UsuarioRolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioRols to fetch.
     */
    orderBy?: UsuarioRolOrderByWithRelationInput | UsuarioRolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioRolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioRols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioRols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsuarioRols
    **/
    _count?: true | UsuarioRolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioRolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioRolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioRolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioRolMaxAggregateInputType
  }

  export type GetUsuarioRolAggregateType<T extends UsuarioRolAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarioRol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarioRol[P]>
      : GetScalarType<T[P], AggregateUsuarioRol[P]>
  }




  export type UsuarioRolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioRolWhereInput
    orderBy?: UsuarioRolOrderByWithAggregationInput | UsuarioRolOrderByWithAggregationInput[]
    by: UsuarioRolScalarFieldEnum[] | UsuarioRolScalarFieldEnum
    having?: UsuarioRolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioRolCountAggregateInputType | true
    _avg?: UsuarioRolAvgAggregateInputType
    _sum?: UsuarioRolSumAggregateInputType
    _min?: UsuarioRolMinAggregateInputType
    _max?: UsuarioRolMaxAggregateInputType
  }

  export type UsuarioRolGroupByOutputType = {
    idUsuario: number
    idRol: number
    _count: UsuarioRolCountAggregateOutputType | null
    _avg: UsuarioRolAvgAggregateOutputType | null
    _sum: UsuarioRolSumAggregateOutputType | null
    _min: UsuarioRolMinAggregateOutputType | null
    _max: UsuarioRolMaxAggregateOutputType | null
  }

  type GetUsuarioRolGroupByPayload<T extends UsuarioRolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioRolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioRolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioRolGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioRolGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioRolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUsuario?: boolean
    idRol?: boolean
    rol?: boolean | RolDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarioRol"]>



  export type UsuarioRolSelectScalar = {
    idUsuario?: boolean
    idRol?: boolean
  }

  export type UsuarioRolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idUsuario" | "idRol", ExtArgs["result"]["usuarioRol"]>
  export type UsuarioRolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rol?: boolean | RolDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $UsuarioRolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsuarioRol"
    objects: {
      rol: Prisma.$RolPayload<ExtArgs>
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idUsuario: number
      idRol: number
    }, ExtArgs["result"]["usuarioRol"]>
    composites: {}
  }

  type UsuarioRolGetPayload<S extends boolean | null | undefined | UsuarioRolDefaultArgs> = $Result.GetResult<Prisma.$UsuarioRolPayload, S>

  type UsuarioRolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioRolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioRolCountAggregateInputType | true
    }

  export interface UsuarioRolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsuarioRol'], meta: { name: 'UsuarioRol' } }
    /**
     * Find zero or one UsuarioRol that matches the filter.
     * @param {UsuarioRolFindUniqueArgs} args - Arguments to find a UsuarioRol
     * @example
     * // Get one UsuarioRol
     * const usuarioRol = await prisma.usuarioRol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioRolFindUniqueArgs>(args: SelectSubset<T, UsuarioRolFindUniqueArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UsuarioRol that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioRolFindUniqueOrThrowArgs} args - Arguments to find a UsuarioRol
     * @example
     * // Get one UsuarioRol
     * const usuarioRol = await prisma.usuarioRol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioRolFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioRolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsuarioRol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolFindFirstArgs} args - Arguments to find a UsuarioRol
     * @example
     * // Get one UsuarioRol
     * const usuarioRol = await prisma.usuarioRol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioRolFindFirstArgs>(args?: SelectSubset<T, UsuarioRolFindFirstArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsuarioRol that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolFindFirstOrThrowArgs} args - Arguments to find a UsuarioRol
     * @example
     * // Get one UsuarioRol
     * const usuarioRol = await prisma.usuarioRol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioRolFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioRolFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UsuarioRols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsuarioRols
     * const usuarioRols = await prisma.usuarioRol.findMany()
     * 
     * // Get first 10 UsuarioRols
     * const usuarioRols = await prisma.usuarioRol.findMany({ take: 10 })
     * 
     * // Only select the `idUsuario`
     * const usuarioRolWithIdUsuarioOnly = await prisma.usuarioRol.findMany({ select: { idUsuario: true } })
     * 
     */
    findMany<T extends UsuarioRolFindManyArgs>(args?: SelectSubset<T, UsuarioRolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UsuarioRol.
     * @param {UsuarioRolCreateArgs} args - Arguments to create a UsuarioRol.
     * @example
     * // Create one UsuarioRol
     * const UsuarioRol = await prisma.usuarioRol.create({
     *   data: {
     *     // ... data to create a UsuarioRol
     *   }
     * })
     * 
     */
    create<T extends UsuarioRolCreateArgs>(args: SelectSubset<T, UsuarioRolCreateArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UsuarioRols.
     * @param {UsuarioRolCreateManyArgs} args - Arguments to create many UsuarioRols.
     * @example
     * // Create many UsuarioRols
     * const usuarioRol = await prisma.usuarioRol.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioRolCreateManyArgs>(args?: SelectSubset<T, UsuarioRolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UsuarioRol.
     * @param {UsuarioRolDeleteArgs} args - Arguments to delete one UsuarioRol.
     * @example
     * // Delete one UsuarioRol
     * const UsuarioRol = await prisma.usuarioRol.delete({
     *   where: {
     *     // ... filter to delete one UsuarioRol
     *   }
     * })
     * 
     */
    delete<T extends UsuarioRolDeleteArgs>(args: SelectSubset<T, UsuarioRolDeleteArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UsuarioRol.
     * @param {UsuarioRolUpdateArgs} args - Arguments to update one UsuarioRol.
     * @example
     * // Update one UsuarioRol
     * const usuarioRol = await prisma.usuarioRol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioRolUpdateArgs>(args: SelectSubset<T, UsuarioRolUpdateArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UsuarioRols.
     * @param {UsuarioRolDeleteManyArgs} args - Arguments to filter UsuarioRols to delete.
     * @example
     * // Delete a few UsuarioRols
     * const { count } = await prisma.usuarioRol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioRolDeleteManyArgs>(args?: SelectSubset<T, UsuarioRolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsuarioRols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsuarioRols
     * const usuarioRol = await prisma.usuarioRol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioRolUpdateManyArgs>(args: SelectSubset<T, UsuarioRolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsuarioRol.
     * @param {UsuarioRolUpsertArgs} args - Arguments to update or create a UsuarioRol.
     * @example
     * // Update or create a UsuarioRol
     * const usuarioRol = await prisma.usuarioRol.upsert({
     *   create: {
     *     // ... data to create a UsuarioRol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsuarioRol we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioRolUpsertArgs>(args: SelectSubset<T, UsuarioRolUpsertArgs<ExtArgs>>): Prisma__UsuarioRolClient<$Result.GetResult<Prisma.$UsuarioRolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UsuarioRols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolCountArgs} args - Arguments to filter UsuarioRols to count.
     * @example
     * // Count the number of UsuarioRols
     * const count = await prisma.usuarioRol.count({
     *   where: {
     *     // ... the filter for the UsuarioRols we want to count
     *   }
     * })
    **/
    count<T extends UsuarioRolCountArgs>(
      args?: Subset<T, UsuarioRolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioRolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsuarioRol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioRolAggregateArgs>(args: Subset<T, UsuarioRolAggregateArgs>): Prisma.PrismaPromise<GetUsuarioRolAggregateType<T>>

    /**
     * Group by UsuarioRol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioRolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioRolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioRolGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioRolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioRolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioRolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsuarioRol model
   */
  readonly fields: UsuarioRolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsuarioRol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioRolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rol<T extends RolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RolDefaultArgs<ExtArgs>>): Prisma__RolClient<$Result.GetResult<Prisma.$RolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsuarioRol model
   */
  interface UsuarioRolFieldRefs {
    readonly idUsuario: FieldRef<"UsuarioRol", 'Int'>
    readonly idRol: FieldRef<"UsuarioRol", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UsuarioRol findUnique
   */
  export type UsuarioRolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioRol to fetch.
     */
    where: UsuarioRolWhereUniqueInput
  }

  /**
   * UsuarioRol findUniqueOrThrow
   */
  export type UsuarioRolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioRol to fetch.
     */
    where: UsuarioRolWhereUniqueInput
  }

  /**
   * UsuarioRol findFirst
   */
  export type UsuarioRolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioRol to fetch.
     */
    where?: UsuarioRolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioRols to fetch.
     */
    orderBy?: UsuarioRolOrderByWithRelationInput | UsuarioRolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsuarioRols.
     */
    cursor?: UsuarioRolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioRols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioRols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsuarioRols.
     */
    distinct?: UsuarioRolScalarFieldEnum | UsuarioRolScalarFieldEnum[]
  }

  /**
   * UsuarioRol findFirstOrThrow
   */
  export type UsuarioRolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioRol to fetch.
     */
    where?: UsuarioRolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioRols to fetch.
     */
    orderBy?: UsuarioRolOrderByWithRelationInput | UsuarioRolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsuarioRols.
     */
    cursor?: UsuarioRolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioRols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioRols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsuarioRols.
     */
    distinct?: UsuarioRolScalarFieldEnum | UsuarioRolScalarFieldEnum[]
  }

  /**
   * UsuarioRol findMany
   */
  export type UsuarioRolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioRols to fetch.
     */
    where?: UsuarioRolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioRols to fetch.
     */
    orderBy?: UsuarioRolOrderByWithRelationInput | UsuarioRolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsuarioRols.
     */
    cursor?: UsuarioRolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioRols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioRols.
     */
    skip?: number
    distinct?: UsuarioRolScalarFieldEnum | UsuarioRolScalarFieldEnum[]
  }

  /**
   * UsuarioRol create
   */
  export type UsuarioRolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * The data needed to create a UsuarioRol.
     */
    data: XOR<UsuarioRolCreateInput, UsuarioRolUncheckedCreateInput>
  }

  /**
   * UsuarioRol createMany
   */
  export type UsuarioRolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsuarioRols.
     */
    data: UsuarioRolCreateManyInput | UsuarioRolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsuarioRol update
   */
  export type UsuarioRolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * The data needed to update a UsuarioRol.
     */
    data: XOR<UsuarioRolUpdateInput, UsuarioRolUncheckedUpdateInput>
    /**
     * Choose, which UsuarioRol to update.
     */
    where: UsuarioRolWhereUniqueInput
  }

  /**
   * UsuarioRol updateMany
   */
  export type UsuarioRolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsuarioRols.
     */
    data: XOR<UsuarioRolUpdateManyMutationInput, UsuarioRolUncheckedUpdateManyInput>
    /**
     * Filter which UsuarioRols to update
     */
    where?: UsuarioRolWhereInput
    /**
     * Limit how many UsuarioRols to update.
     */
    limit?: number
  }

  /**
   * UsuarioRol upsert
   */
  export type UsuarioRolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * The filter to search for the UsuarioRol to update in case it exists.
     */
    where: UsuarioRolWhereUniqueInput
    /**
     * In case the UsuarioRol found by the `where` argument doesn't exist, create a new UsuarioRol with this data.
     */
    create: XOR<UsuarioRolCreateInput, UsuarioRolUncheckedCreateInput>
    /**
     * In case the UsuarioRol was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioRolUpdateInput, UsuarioRolUncheckedUpdateInput>
  }

  /**
   * UsuarioRol delete
   */
  export type UsuarioRolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
    /**
     * Filter which UsuarioRol to delete.
     */
    where: UsuarioRolWhereUniqueInput
  }

  /**
   * UsuarioRol deleteMany
   */
  export type UsuarioRolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsuarioRols to delete
     */
    where?: UsuarioRolWhereInput
    /**
     * Limit how many UsuarioRols to delete.
     */
    limit?: number
  }

  /**
   * UsuarioRol without action
   */
  export type UsuarioRolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioRol
     */
    select?: UsuarioRolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioRol
     */
    omit?: UsuarioRolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioRolInclude<ExtArgs> | null
  }


  /**
   * Model Cita
   */

  export type AggregateCita = {
    _count: CitaCountAggregateOutputType | null
    _avg: CitaAvgAggregateOutputType | null
    _sum: CitaSumAggregateOutputType | null
    _min: CitaMinAggregateOutputType | null
    _max: CitaMaxAggregateOutputType | null
  }

  export type CitaAvgAggregateOutputType = {
    idCita: number | null
    idCliente: number | null
    idOperativo: number | null
  }

  export type CitaSumAggregateOutputType = {
    idCita: number | null
    idCliente: number | null
    idOperativo: number | null
  }

  export type CitaMinAggregateOutputType = {
    idCita: number | null
    idCliente: number | null
    idOperativo: number | null
    fechaHora: Date | null
    estado: $Enums.CitaEstado | null
  }

  export type CitaMaxAggregateOutputType = {
    idCita: number | null
    idCliente: number | null
    idOperativo: number | null
    fechaHora: Date | null
    estado: $Enums.CitaEstado | null
  }

  export type CitaCountAggregateOutputType = {
    idCita: number
    idCliente: number
    idOperativo: number
    fechaHora: number
    estado: number
    _all: number
  }


  export type CitaAvgAggregateInputType = {
    idCita?: true
    idCliente?: true
    idOperativo?: true
  }

  export type CitaSumAggregateInputType = {
    idCita?: true
    idCliente?: true
    idOperativo?: true
  }

  export type CitaMinAggregateInputType = {
    idCita?: true
    idCliente?: true
    idOperativo?: true
    fechaHora?: true
    estado?: true
  }

  export type CitaMaxAggregateInputType = {
    idCita?: true
    idCliente?: true
    idOperativo?: true
    fechaHora?: true
    estado?: true
  }

  export type CitaCountAggregateInputType = {
    idCita?: true
    idCliente?: true
    idOperativo?: true
    fechaHora?: true
    estado?: true
    _all?: true
  }

  export type CitaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cita to aggregate.
     */
    where?: CitaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Citas to fetch.
     */
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CitaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Citas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Citas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Citas
    **/
    _count?: true | CitaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CitaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CitaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CitaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CitaMaxAggregateInputType
  }

  export type GetCitaAggregateType<T extends CitaAggregateArgs> = {
        [P in keyof T & keyof AggregateCita]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCita[P]>
      : GetScalarType<T[P], AggregateCita[P]>
  }




  export type CitaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CitaWhereInput
    orderBy?: CitaOrderByWithAggregationInput | CitaOrderByWithAggregationInput[]
    by: CitaScalarFieldEnum[] | CitaScalarFieldEnum
    having?: CitaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CitaCountAggregateInputType | true
    _avg?: CitaAvgAggregateInputType
    _sum?: CitaSumAggregateInputType
    _min?: CitaMinAggregateInputType
    _max?: CitaMaxAggregateInputType
  }

  export type CitaGroupByOutputType = {
    idCita: number
    idCliente: number
    idOperativo: number | null
    fechaHora: Date
    estado: $Enums.CitaEstado
    _count: CitaCountAggregateOutputType | null
    _avg: CitaAvgAggregateOutputType | null
    _sum: CitaSumAggregateOutputType | null
    _min: CitaMinAggregateOutputType | null
    _max: CitaMaxAggregateOutputType | null
  }

  type GetCitaGroupByPayload<T extends CitaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CitaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CitaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CitaGroupByOutputType[P]>
            : GetScalarType<T[P], CitaGroupByOutputType[P]>
        }
      >
    >


  export type CitaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idCita?: boolean
    idCliente?: boolean
    idOperativo?: boolean
    fechaHora?: boolean
    estado?: boolean
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    operativo?: boolean | Cita$operativoArgs<ExtArgs>
    ficha?: boolean | Cita$fichaArgs<ExtArgs>
  }, ExtArgs["result"]["cita"]>



  export type CitaSelectScalar = {
    idCita?: boolean
    idCliente?: boolean
    idOperativo?: boolean
    fechaHora?: boolean
    estado?: boolean
  }

  export type CitaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idCita" | "idCliente" | "idOperativo" | "fechaHora" | "estado", ExtArgs["result"]["cita"]>
  export type CitaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    operativo?: boolean | Cita$operativoArgs<ExtArgs>
    ficha?: boolean | Cita$fichaArgs<ExtArgs>
  }

  export type $CitaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cita"
    objects: {
      cliente: Prisma.$ClientePayload<ExtArgs>
      operativo: Prisma.$OperativoPayload<ExtArgs> | null
      ficha: Prisma.$FichaClinicaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      idCita: number
      idCliente: number
      idOperativo: number | null
      fechaHora: Date
      estado: $Enums.CitaEstado
    }, ExtArgs["result"]["cita"]>
    composites: {}
  }

  type CitaGetPayload<S extends boolean | null | undefined | CitaDefaultArgs> = $Result.GetResult<Prisma.$CitaPayload, S>

  type CitaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CitaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CitaCountAggregateInputType | true
    }

  export interface CitaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cita'], meta: { name: 'Cita' } }
    /**
     * Find zero or one Cita that matches the filter.
     * @param {CitaFindUniqueArgs} args - Arguments to find a Cita
     * @example
     * // Get one Cita
     * const cita = await prisma.cita.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CitaFindUniqueArgs>(args: SelectSubset<T, CitaFindUniqueArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cita that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CitaFindUniqueOrThrowArgs} args - Arguments to find a Cita
     * @example
     * // Get one Cita
     * const cita = await prisma.cita.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CitaFindUniqueOrThrowArgs>(args: SelectSubset<T, CitaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cita that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaFindFirstArgs} args - Arguments to find a Cita
     * @example
     * // Get one Cita
     * const cita = await prisma.cita.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CitaFindFirstArgs>(args?: SelectSubset<T, CitaFindFirstArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cita that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaFindFirstOrThrowArgs} args - Arguments to find a Cita
     * @example
     * // Get one Cita
     * const cita = await prisma.cita.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CitaFindFirstOrThrowArgs>(args?: SelectSubset<T, CitaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Citas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Citas
     * const citas = await prisma.cita.findMany()
     * 
     * // Get first 10 Citas
     * const citas = await prisma.cita.findMany({ take: 10 })
     * 
     * // Only select the `idCita`
     * const citaWithIdCitaOnly = await prisma.cita.findMany({ select: { idCita: true } })
     * 
     */
    findMany<T extends CitaFindManyArgs>(args?: SelectSubset<T, CitaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cita.
     * @param {CitaCreateArgs} args - Arguments to create a Cita.
     * @example
     * // Create one Cita
     * const Cita = await prisma.cita.create({
     *   data: {
     *     // ... data to create a Cita
     *   }
     * })
     * 
     */
    create<T extends CitaCreateArgs>(args: SelectSubset<T, CitaCreateArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Citas.
     * @param {CitaCreateManyArgs} args - Arguments to create many Citas.
     * @example
     * // Create many Citas
     * const cita = await prisma.cita.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CitaCreateManyArgs>(args?: SelectSubset<T, CitaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cita.
     * @param {CitaDeleteArgs} args - Arguments to delete one Cita.
     * @example
     * // Delete one Cita
     * const Cita = await prisma.cita.delete({
     *   where: {
     *     // ... filter to delete one Cita
     *   }
     * })
     * 
     */
    delete<T extends CitaDeleteArgs>(args: SelectSubset<T, CitaDeleteArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cita.
     * @param {CitaUpdateArgs} args - Arguments to update one Cita.
     * @example
     * // Update one Cita
     * const cita = await prisma.cita.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CitaUpdateArgs>(args: SelectSubset<T, CitaUpdateArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Citas.
     * @param {CitaDeleteManyArgs} args - Arguments to filter Citas to delete.
     * @example
     * // Delete a few Citas
     * const { count } = await prisma.cita.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CitaDeleteManyArgs>(args?: SelectSubset<T, CitaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Citas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Citas
     * const cita = await prisma.cita.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CitaUpdateManyArgs>(args: SelectSubset<T, CitaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cita.
     * @param {CitaUpsertArgs} args - Arguments to update or create a Cita.
     * @example
     * // Update or create a Cita
     * const cita = await prisma.cita.upsert({
     *   create: {
     *     // ... data to create a Cita
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cita we want to update
     *   }
     * })
     */
    upsert<T extends CitaUpsertArgs>(args: SelectSubset<T, CitaUpsertArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Citas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaCountArgs} args - Arguments to filter Citas to count.
     * @example
     * // Count the number of Citas
     * const count = await prisma.cita.count({
     *   where: {
     *     // ... the filter for the Citas we want to count
     *   }
     * })
    **/
    count<T extends CitaCountArgs>(
      args?: Subset<T, CitaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CitaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cita.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CitaAggregateArgs>(args: Subset<T, CitaAggregateArgs>): Prisma.PrismaPromise<GetCitaAggregateType<T>>

    /**
     * Group by Cita.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CitaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CitaGroupByArgs['orderBy'] }
        : { orderBy?: CitaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CitaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCitaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cita model
   */
  readonly fields: CitaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cita.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CitaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    operativo<T extends Cita$operativoArgs<ExtArgs> = {}>(args?: Subset<T, Cita$operativoArgs<ExtArgs>>): Prisma__OperativoClient<$Result.GetResult<Prisma.$OperativoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ficha<T extends Cita$fichaArgs<ExtArgs> = {}>(args?: Subset<T, Cita$fichaArgs<ExtArgs>>): Prisma__FichaClinicaClient<$Result.GetResult<Prisma.$FichaClinicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cita model
   */
  interface CitaFieldRefs {
    readonly idCita: FieldRef<"Cita", 'Int'>
    readonly idCliente: FieldRef<"Cita", 'Int'>
    readonly idOperativo: FieldRef<"Cita", 'Int'>
    readonly fechaHora: FieldRef<"Cita", 'DateTime'>
    readonly estado: FieldRef<"Cita", 'CitaEstado'>
  }
    

  // Custom InputTypes
  /**
   * Cita findUnique
   */
  export type CitaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * Filter, which Cita to fetch.
     */
    where: CitaWhereUniqueInput
  }

  /**
   * Cita findUniqueOrThrow
   */
  export type CitaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * Filter, which Cita to fetch.
     */
    where: CitaWhereUniqueInput
  }

  /**
   * Cita findFirst
   */
  export type CitaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * Filter, which Cita to fetch.
     */
    where?: CitaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Citas to fetch.
     */
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Citas.
     */
    cursor?: CitaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Citas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Citas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Citas.
     */
    distinct?: CitaScalarFieldEnum | CitaScalarFieldEnum[]
  }

  /**
   * Cita findFirstOrThrow
   */
  export type CitaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * Filter, which Cita to fetch.
     */
    where?: CitaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Citas to fetch.
     */
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Citas.
     */
    cursor?: CitaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Citas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Citas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Citas.
     */
    distinct?: CitaScalarFieldEnum | CitaScalarFieldEnum[]
  }

  /**
   * Cita findMany
   */
  export type CitaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * Filter, which Citas to fetch.
     */
    where?: CitaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Citas to fetch.
     */
    orderBy?: CitaOrderByWithRelationInput | CitaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Citas.
     */
    cursor?: CitaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Citas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Citas.
     */
    skip?: number
    distinct?: CitaScalarFieldEnum | CitaScalarFieldEnum[]
  }

  /**
   * Cita create
   */
  export type CitaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * The data needed to create a Cita.
     */
    data: XOR<CitaCreateInput, CitaUncheckedCreateInput>
  }

  /**
   * Cita createMany
   */
  export type CitaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Citas.
     */
    data: CitaCreateManyInput | CitaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cita update
   */
  export type CitaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * The data needed to update a Cita.
     */
    data: XOR<CitaUpdateInput, CitaUncheckedUpdateInput>
    /**
     * Choose, which Cita to update.
     */
    where: CitaWhereUniqueInput
  }

  /**
   * Cita updateMany
   */
  export type CitaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Citas.
     */
    data: XOR<CitaUpdateManyMutationInput, CitaUncheckedUpdateManyInput>
    /**
     * Filter which Citas to update
     */
    where?: CitaWhereInput
    /**
     * Limit how many Citas to update.
     */
    limit?: number
  }

  /**
   * Cita upsert
   */
  export type CitaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * The filter to search for the Cita to update in case it exists.
     */
    where: CitaWhereUniqueInput
    /**
     * In case the Cita found by the `where` argument doesn't exist, create a new Cita with this data.
     */
    create: XOR<CitaCreateInput, CitaUncheckedCreateInput>
    /**
     * In case the Cita was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CitaUpdateInput, CitaUncheckedUpdateInput>
  }

  /**
   * Cita delete
   */
  export type CitaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
    /**
     * Filter which Cita to delete.
     */
    where: CitaWhereUniqueInput
  }

  /**
   * Cita deleteMany
   */
  export type CitaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Citas to delete
     */
    where?: CitaWhereInput
    /**
     * Limit how many Citas to delete.
     */
    limit?: number
  }

  /**
   * Cita.operativo
   */
  export type Cita$operativoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operativo
     */
    select?: OperativoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operativo
     */
    omit?: OperativoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperativoInclude<ExtArgs> | null
    where?: OperativoWhereInput
  }

  /**
   * Cita.ficha
   */
  export type Cita$fichaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FichaClinica
     */
    select?: FichaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FichaClinica
     */
    omit?: FichaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FichaClinicaInclude<ExtArgs> | null
    where?: FichaClinicaWhereInput
  }

  /**
   * Cita without action
   */
  export type CitaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cita
     */
    select?: CitaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cita
     */
    omit?: CitaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitaInclude<ExtArgs> | null
  }


  /**
   * Model FichaClinica
   */

  export type AggregateFichaClinica = {
    _count: FichaClinicaCountAggregateOutputType | null
    _avg: FichaClinicaAvgAggregateOutputType | null
    _sum: FichaClinicaSumAggregateOutputType | null
    _min: FichaClinicaMinAggregateOutputType | null
    _max: FichaClinicaMaxAggregateOutputType | null
  }

  export type FichaClinicaAvgAggregateOutputType = {
    idFicha: number | null
    idCita: number | null
  }

  export type FichaClinicaSumAggregateOutputType = {
    idFicha: number | null
    idCita: number | null
  }

  export type FichaClinicaMinAggregateOutputType = {
    idFicha: number | null
    idCita: number | null
    antecedentesGenerales: string | null
    antecedentesOftalmologicos: string | null
    observaciones: string | null
    fechaRegistro: Date | null
  }

  export type FichaClinicaMaxAggregateOutputType = {
    idFicha: number | null
    idCita: number | null
    antecedentesGenerales: string | null
    antecedentesOftalmologicos: string | null
    observaciones: string | null
    fechaRegistro: Date | null
  }

  export type FichaClinicaCountAggregateOutputType = {
    idFicha: number
    idCita: number
    antecedentesGenerales: number
    antecedentesOftalmologicos: number
    observaciones: number
    fechaRegistro: number
    _all: number
  }


  export type FichaClinicaAvgAggregateInputType = {
    idFicha?: true
    idCita?: true
  }

  export type FichaClinicaSumAggregateInputType = {
    idFicha?: true
    idCita?: true
  }

  export type FichaClinicaMinAggregateInputType = {
    idFicha?: true
    idCita?: true
    antecedentesGenerales?: true
    antecedentesOftalmologicos?: true
    observaciones?: true
    fechaRegistro?: true
  }

  export type FichaClinicaMaxAggregateInputType = {
    idFicha?: true
    idCita?: true
    antecedentesGenerales?: true
    antecedentesOftalmologicos?: true
    observaciones?: true
    fechaRegistro?: true
  }

  export type FichaClinicaCountAggregateInputType = {
    idFicha?: true
    idCita?: true
    antecedentesGenerales?: true
    antecedentesOftalmologicos?: true
    observaciones?: true
    fechaRegistro?: true
    _all?: true
  }

  export type FichaClinicaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FichaClinica to aggregate.
     */
    where?: FichaClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FichaClinicas to fetch.
     */
    orderBy?: FichaClinicaOrderByWithRelationInput | FichaClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FichaClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FichaClinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FichaClinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FichaClinicas
    **/
    _count?: true | FichaClinicaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FichaClinicaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FichaClinicaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FichaClinicaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FichaClinicaMaxAggregateInputType
  }

  export type GetFichaClinicaAggregateType<T extends FichaClinicaAggregateArgs> = {
        [P in keyof T & keyof AggregateFichaClinica]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFichaClinica[P]>
      : GetScalarType<T[P], AggregateFichaClinica[P]>
  }




  export type FichaClinicaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FichaClinicaWhereInput
    orderBy?: FichaClinicaOrderByWithAggregationInput | FichaClinicaOrderByWithAggregationInput[]
    by: FichaClinicaScalarFieldEnum[] | FichaClinicaScalarFieldEnum
    having?: FichaClinicaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FichaClinicaCountAggregateInputType | true
    _avg?: FichaClinicaAvgAggregateInputType
    _sum?: FichaClinicaSumAggregateInputType
    _min?: FichaClinicaMinAggregateInputType
    _max?: FichaClinicaMaxAggregateInputType
  }

  export type FichaClinicaGroupByOutputType = {
    idFicha: number
    idCita: number
    antecedentesGenerales: string | null
    antecedentesOftalmologicos: string | null
    observaciones: string | null
    fechaRegistro: Date
    _count: FichaClinicaCountAggregateOutputType | null
    _avg: FichaClinicaAvgAggregateOutputType | null
    _sum: FichaClinicaSumAggregateOutputType | null
    _min: FichaClinicaMinAggregateOutputType | null
    _max: FichaClinicaMaxAggregateOutputType | null
  }

  type GetFichaClinicaGroupByPayload<T extends FichaClinicaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FichaClinicaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FichaClinicaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FichaClinicaGroupByOutputType[P]>
            : GetScalarType<T[P], FichaClinicaGroupByOutputType[P]>
        }
      >
    >


  export type FichaClinicaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idFicha?: boolean
    idCita?: boolean
    antecedentesGenerales?: boolean
    antecedentesOftalmologicos?: boolean
    observaciones?: boolean
    fechaRegistro?: boolean
    cita?: boolean | CitaDefaultArgs<ExtArgs>
    recetas?: boolean | FichaClinica$recetasArgs<ExtArgs>
    _count?: boolean | FichaClinicaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fichaClinica"]>



  export type FichaClinicaSelectScalar = {
    idFicha?: boolean
    idCita?: boolean
    antecedentesGenerales?: boolean
    antecedentesOftalmologicos?: boolean
    observaciones?: boolean
    fechaRegistro?: boolean
  }

  export type FichaClinicaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idFicha" | "idCita" | "antecedentesGenerales" | "antecedentesOftalmologicos" | "observaciones" | "fechaRegistro", ExtArgs["result"]["fichaClinica"]>
  export type FichaClinicaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cita?: boolean | CitaDefaultArgs<ExtArgs>
    recetas?: boolean | FichaClinica$recetasArgs<ExtArgs>
    _count?: boolean | FichaClinicaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $FichaClinicaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FichaClinica"
    objects: {
      cita: Prisma.$CitaPayload<ExtArgs>
      recetas: Prisma.$RecetaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idFicha: number
      idCita: number
      antecedentesGenerales: string | null
      antecedentesOftalmologicos: string | null
      observaciones: string | null
      fechaRegistro: Date
    }, ExtArgs["result"]["fichaClinica"]>
    composites: {}
  }

  type FichaClinicaGetPayload<S extends boolean | null | undefined | FichaClinicaDefaultArgs> = $Result.GetResult<Prisma.$FichaClinicaPayload, S>

  type FichaClinicaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FichaClinicaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FichaClinicaCountAggregateInputType | true
    }

  export interface FichaClinicaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FichaClinica'], meta: { name: 'FichaClinica' } }
    /**
     * Find zero or one FichaClinica that matches the filter.
     * @param {FichaClinicaFindUniqueArgs} args - Arguments to find a FichaClinica
     * @example
     * // Get one FichaClinica
     * const fichaClinica = await prisma.fichaClinica.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FichaClinicaFindUniqueArgs>(args: SelectSubset<T, FichaClinicaFindUniqueArgs<ExtArgs>>): Prisma__FichaClinicaClient<$Result.GetResult<Prisma.$FichaClinicaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FichaClinica that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FichaClinicaFindUniqueOrThrowArgs} args - Arguments to find a FichaClinica
     * @example
     * // Get one FichaClinica
     * const fichaClinica = await prisma.fichaClinica.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FichaClinicaFindUniqueOrThrowArgs>(args: SelectSubset<T, FichaClinicaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FichaClinicaClient<$Result.GetResult<Prisma.$FichaClinicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FichaClinica that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FichaClinicaFindFirstArgs} args - Arguments to find a FichaClinica
     * @example
     * // Get one FichaClinica
     * const fichaClinica = await prisma.fichaClinica.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FichaClinicaFindFirstArgs>(args?: SelectSubset<T, FichaClinicaFindFirstArgs<ExtArgs>>): Prisma__FichaClinicaClient<$Result.GetResult<Prisma.$FichaClinicaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FichaClinica that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FichaClinicaFindFirstOrThrowArgs} args - Arguments to find a FichaClinica
     * @example
     * // Get one FichaClinica
     * const fichaClinica = await prisma.fichaClinica.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FichaClinicaFindFirstOrThrowArgs>(args?: SelectSubset<T, FichaClinicaFindFirstOrThrowArgs<ExtArgs>>): Prisma__FichaClinicaClient<$Result.GetResult<Prisma.$FichaClinicaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FichaClinicas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FichaClinicaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FichaClinicas
     * const fichaClinicas = await prisma.fichaClinica.findMany()
     * 
     * // Get first 10 FichaClinicas
     * const fichaClinicas = await prisma.fichaClinica.findMany({ take: 10 })
     * 
     * // Only select the `idFicha`
     * const fichaClinicaWithIdFichaOnly = await prisma.fichaClinica.findMany({ select: { idFicha: true } })
     * 
     */
    findMany<T extends FichaClinicaFindManyArgs>(args?: SelectSubset<T, FichaClinicaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FichaClinicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FichaClinica.
     * @param {FichaClinicaCreateArgs} args - Arguments to create a FichaClinica.
     * @example
     * // Create one FichaClinica
     * const FichaClinica = await prisma.fichaClinica.create({
     *   data: {
     *     // ... data to create a FichaClinica
     *   }
     * })
     * 
     */
    create<T extends FichaClinicaCreateArgs>(args: SelectSubset<T, FichaClinicaCreateArgs<ExtArgs>>): Prisma__FichaClinicaClient<$Result.GetResult<Prisma.$FichaClinicaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FichaClinicas.
     * @param {FichaClinicaCreateManyArgs} args - Arguments to create many FichaClinicas.
     * @example
     * // Create many FichaClinicas
     * const fichaClinica = await prisma.fichaClinica.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FichaClinicaCreateManyArgs>(args?: SelectSubset<T, FichaClinicaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FichaClinica.
     * @param {FichaClinicaDeleteArgs} args - Arguments to delete one FichaClinica.
     * @example
     * // Delete one FichaClinica
     * const FichaClinica = await prisma.fichaClinica.delete({
     *   where: {
     *     // ... filter to delete one FichaClinica
     *   }
     * })
     * 
     */
    delete<T extends FichaClinicaDeleteArgs>(args: SelectSubset<T, FichaClinicaDeleteArgs<ExtArgs>>): Prisma__FichaClinicaClient<$Result.GetResult<Prisma.$FichaClinicaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FichaClinica.
     * @param {FichaClinicaUpdateArgs} args - Arguments to update one FichaClinica.
     * @example
     * // Update one FichaClinica
     * const fichaClinica = await prisma.fichaClinica.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FichaClinicaUpdateArgs>(args: SelectSubset<T, FichaClinicaUpdateArgs<ExtArgs>>): Prisma__FichaClinicaClient<$Result.GetResult<Prisma.$FichaClinicaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FichaClinicas.
     * @param {FichaClinicaDeleteManyArgs} args - Arguments to filter FichaClinicas to delete.
     * @example
     * // Delete a few FichaClinicas
     * const { count } = await prisma.fichaClinica.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FichaClinicaDeleteManyArgs>(args?: SelectSubset<T, FichaClinicaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FichaClinicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FichaClinicaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FichaClinicas
     * const fichaClinica = await prisma.fichaClinica.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FichaClinicaUpdateManyArgs>(args: SelectSubset<T, FichaClinicaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FichaClinica.
     * @param {FichaClinicaUpsertArgs} args - Arguments to update or create a FichaClinica.
     * @example
     * // Update or create a FichaClinica
     * const fichaClinica = await prisma.fichaClinica.upsert({
     *   create: {
     *     // ... data to create a FichaClinica
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FichaClinica we want to update
     *   }
     * })
     */
    upsert<T extends FichaClinicaUpsertArgs>(args: SelectSubset<T, FichaClinicaUpsertArgs<ExtArgs>>): Prisma__FichaClinicaClient<$Result.GetResult<Prisma.$FichaClinicaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FichaClinicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FichaClinicaCountArgs} args - Arguments to filter FichaClinicas to count.
     * @example
     * // Count the number of FichaClinicas
     * const count = await prisma.fichaClinica.count({
     *   where: {
     *     // ... the filter for the FichaClinicas we want to count
     *   }
     * })
    **/
    count<T extends FichaClinicaCountArgs>(
      args?: Subset<T, FichaClinicaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FichaClinicaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FichaClinica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FichaClinicaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FichaClinicaAggregateArgs>(args: Subset<T, FichaClinicaAggregateArgs>): Prisma.PrismaPromise<GetFichaClinicaAggregateType<T>>

    /**
     * Group by FichaClinica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FichaClinicaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FichaClinicaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FichaClinicaGroupByArgs['orderBy'] }
        : { orderBy?: FichaClinicaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FichaClinicaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFichaClinicaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FichaClinica model
   */
  readonly fields: FichaClinicaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FichaClinica.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FichaClinicaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cita<T extends CitaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CitaDefaultArgs<ExtArgs>>): Prisma__CitaClient<$Result.GetResult<Prisma.$CitaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    recetas<T extends FichaClinica$recetasArgs<ExtArgs> = {}>(args?: Subset<T, FichaClinica$recetasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecetaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FichaClinica model
   */
  interface FichaClinicaFieldRefs {
    readonly idFicha: FieldRef<"FichaClinica", 'Int'>
    readonly idCita: FieldRef<"FichaClinica", 'Int'>
    readonly antecedentesGenerales: FieldRef<"FichaClinica", 'String'>
    readonly antecedentesOftalmologicos: FieldRef<"FichaClinica", 'String'>
    readonly observaciones: FieldRef<"FichaClinica", 'String'>
    readonly fechaRegistro: FieldRef<"FichaClinica", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FichaClinica findUnique
   */
  export type FichaClinicaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FichaClinica
     */
    select?: FichaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FichaClinica
     */
    omit?: FichaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FichaClinicaInclude<ExtArgs> | null
    /**
     * Filter, which FichaClinica to fetch.
     */
    where: FichaClinicaWhereUniqueInput
  }

  /**
   * FichaClinica findUniqueOrThrow
   */
  export type FichaClinicaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FichaClinica
     */
    select?: FichaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FichaClinica
     */
    omit?: FichaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FichaClinicaInclude<ExtArgs> | null
    /**
     * Filter, which FichaClinica to fetch.
     */
    where: FichaClinicaWhereUniqueInput
  }

  /**
   * FichaClinica findFirst
   */
  export type FichaClinicaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FichaClinica
     */
    select?: FichaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FichaClinica
     */
    omit?: FichaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FichaClinicaInclude<ExtArgs> | null
    /**
     * Filter, which FichaClinica to fetch.
     */
    where?: FichaClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FichaClinicas to fetch.
     */
    orderBy?: FichaClinicaOrderByWithRelationInput | FichaClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FichaClinicas.
     */
    cursor?: FichaClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FichaClinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FichaClinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FichaClinicas.
     */
    distinct?: FichaClinicaScalarFieldEnum | FichaClinicaScalarFieldEnum[]
  }

  /**
   * FichaClinica findFirstOrThrow
   */
  export type FichaClinicaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FichaClinica
     */
    select?: FichaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FichaClinica
     */
    omit?: FichaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FichaClinicaInclude<ExtArgs> | null
    /**
     * Filter, which FichaClinica to fetch.
     */
    where?: FichaClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FichaClinicas to fetch.
     */
    orderBy?: FichaClinicaOrderByWithRelationInput | FichaClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FichaClinicas.
     */
    cursor?: FichaClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FichaClinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FichaClinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FichaClinicas.
     */
    distinct?: FichaClinicaScalarFieldEnum | FichaClinicaScalarFieldEnum[]
  }

  /**
   * FichaClinica findMany
   */
  export type FichaClinicaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FichaClinica
     */
    select?: FichaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FichaClinica
     */
    omit?: FichaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FichaClinicaInclude<ExtArgs> | null
    /**
     * Filter, which FichaClinicas to fetch.
     */
    where?: FichaClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FichaClinicas to fetch.
     */
    orderBy?: FichaClinicaOrderByWithRelationInput | FichaClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FichaClinicas.
     */
    cursor?: FichaClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FichaClinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FichaClinicas.
     */
    skip?: number
    distinct?: FichaClinicaScalarFieldEnum | FichaClinicaScalarFieldEnum[]
  }

  /**
   * FichaClinica create
   */
  export type FichaClinicaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FichaClinica
     */
    select?: FichaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FichaClinica
     */
    omit?: FichaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FichaClinicaInclude<ExtArgs> | null
    /**
     * The data needed to create a FichaClinica.
     */
    data: XOR<FichaClinicaCreateInput, FichaClinicaUncheckedCreateInput>
  }

  /**
   * FichaClinica createMany
   */
  export type FichaClinicaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FichaClinicas.
     */
    data: FichaClinicaCreateManyInput | FichaClinicaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FichaClinica update
   */
  export type FichaClinicaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FichaClinica
     */
    select?: FichaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FichaClinica
     */
    omit?: FichaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FichaClinicaInclude<ExtArgs> | null
    /**
     * The data needed to update a FichaClinica.
     */
    data: XOR<FichaClinicaUpdateInput, FichaClinicaUncheckedUpdateInput>
    /**
     * Choose, which FichaClinica to update.
     */
    where: FichaClinicaWhereUniqueInput
  }

  /**
   * FichaClinica updateMany
   */
  export type FichaClinicaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FichaClinicas.
     */
    data: XOR<FichaClinicaUpdateManyMutationInput, FichaClinicaUncheckedUpdateManyInput>
    /**
     * Filter which FichaClinicas to update
     */
    where?: FichaClinicaWhereInput
    /**
     * Limit how many FichaClinicas to update.
     */
    limit?: number
  }

  /**
   * FichaClinica upsert
   */
  export type FichaClinicaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FichaClinica
     */
    select?: FichaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FichaClinica
     */
    omit?: FichaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FichaClinicaInclude<ExtArgs> | null
    /**
     * The filter to search for the FichaClinica to update in case it exists.
     */
    where: FichaClinicaWhereUniqueInput
    /**
     * In case the FichaClinica found by the `where` argument doesn't exist, create a new FichaClinica with this data.
     */
    create: XOR<FichaClinicaCreateInput, FichaClinicaUncheckedCreateInput>
    /**
     * In case the FichaClinica was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FichaClinicaUpdateInput, FichaClinicaUncheckedUpdateInput>
  }

  /**
   * FichaClinica delete
   */
  export type FichaClinicaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FichaClinica
     */
    select?: FichaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FichaClinica
     */
    omit?: FichaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FichaClinicaInclude<ExtArgs> | null
    /**
     * Filter which FichaClinica to delete.
     */
    where: FichaClinicaWhereUniqueInput
  }

  /**
   * FichaClinica deleteMany
   */
  export type FichaClinicaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FichaClinicas to delete
     */
    where?: FichaClinicaWhereInput
    /**
     * Limit how many FichaClinicas to delete.
     */
    limit?: number
  }

  /**
   * FichaClinica.recetas
   */
  export type FichaClinica$recetasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receta
     */
    select?: RecetaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receta
     */
    omit?: RecetaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecetaInclude<ExtArgs> | null
    where?: RecetaWhereInput
    orderBy?: RecetaOrderByWithRelationInput | RecetaOrderByWithRelationInput[]
    cursor?: RecetaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecetaScalarFieldEnum | RecetaScalarFieldEnum[]
  }

  /**
   * FichaClinica without action
   */
  export type FichaClinicaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FichaClinica
     */
    select?: FichaClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FichaClinica
     */
    omit?: FichaClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FichaClinicaInclude<ExtArgs> | null
  }


  /**
   * Model Receta
   */

  export type AggregateReceta = {
    _count: RecetaCountAggregateOutputType | null
    _avg: RecetaAvgAggregateOutputType | null
    _sum: RecetaSumAggregateOutputType | null
    _min: RecetaMinAggregateOutputType | null
    _max: RecetaMaxAggregateOutputType | null
  }

  export type RecetaAvgAggregateOutputType = {
    idReceta: number | null
    idFicha: number | null
    odEsfera: Decimal | null
    odCilindro: Decimal | null
    odEje: number | null
    oiEsfera: Decimal | null
    oiCilindro: Decimal | null
    oiEje: number | null
    adicion: Decimal | null
    pd: Decimal | null
    vigenciaDias: number | null
  }

  export type RecetaSumAggregateOutputType = {
    idReceta: number | null
    idFicha: number | null
    odEsfera: Decimal | null
    odCilindro: Decimal | null
    odEje: number | null
    oiEsfera: Decimal | null
    oiCilindro: Decimal | null
    oiEje: number | null
    adicion: Decimal | null
    pd: Decimal | null
    vigenciaDias: number | null
  }

  export type RecetaMinAggregateOutputType = {
    idReceta: number | null
    idFicha: number | null
    odEsfera: Decimal | null
    odCilindro: Decimal | null
    odEje: number | null
    oiEsfera: Decimal | null
    oiCilindro: Decimal | null
    oiEje: number | null
    adicion: Decimal | null
    pd: Decimal | null
    vigenciaDias: number | null
    fechaEmision: Date | null
  }

  export type RecetaMaxAggregateOutputType = {
    idReceta: number | null
    idFicha: number | null
    odEsfera: Decimal | null
    odCilindro: Decimal | null
    odEje: number | null
    oiEsfera: Decimal | null
    oiCilindro: Decimal | null
    oiEje: number | null
    adicion: Decimal | null
    pd: Decimal | null
    vigenciaDias: number | null
    fechaEmision: Date | null
  }

  export type RecetaCountAggregateOutputType = {
    idReceta: number
    idFicha: number
    odEsfera: number
    odCilindro: number
    odEje: number
    oiEsfera: number
    oiCilindro: number
    oiEje: number
    adicion: number
    pd: number
    vigenciaDias: number
    fechaEmision: number
    _all: number
  }


  export type RecetaAvgAggregateInputType = {
    idReceta?: true
    idFicha?: true
    odEsfera?: true
    odCilindro?: true
    odEje?: true
    oiEsfera?: true
    oiCilindro?: true
    oiEje?: true
    adicion?: true
    pd?: true
    vigenciaDias?: true
  }

  export type RecetaSumAggregateInputType = {
    idReceta?: true
    idFicha?: true
    odEsfera?: true
    odCilindro?: true
    odEje?: true
    oiEsfera?: true
    oiCilindro?: true
    oiEje?: true
    adicion?: true
    pd?: true
    vigenciaDias?: true
  }

  export type RecetaMinAggregateInputType = {
    idReceta?: true
    idFicha?: true
    odEsfera?: true
    odCilindro?: true
    odEje?: true
    oiEsfera?: true
    oiCilindro?: true
    oiEje?: true
    adicion?: true
    pd?: true
    vigenciaDias?: true
    fechaEmision?: true
  }

  export type RecetaMaxAggregateInputType = {
    idReceta?: true
    idFicha?: true
    odEsfera?: true
    odCilindro?: true
    odEje?: true
    oiEsfera?: true
    oiCilindro?: true
    oiEje?: true
    adicion?: true
    pd?: true
    vigenciaDias?: true
    fechaEmision?: true
  }

  export type RecetaCountAggregateInputType = {
    idReceta?: true
    idFicha?: true
    odEsfera?: true
    odCilindro?: true
    odEje?: true
    oiEsfera?: true
    oiCilindro?: true
    oiEje?: true
    adicion?: true
    pd?: true
    vigenciaDias?: true
    fechaEmision?: true
    _all?: true
  }

  export type RecetaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receta to aggregate.
     */
    where?: RecetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recetas to fetch.
     */
    orderBy?: RecetaOrderByWithRelationInput | RecetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recetas
    **/
    _count?: true | RecetaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecetaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecetaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecetaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecetaMaxAggregateInputType
  }

  export type GetRecetaAggregateType<T extends RecetaAggregateArgs> = {
        [P in keyof T & keyof AggregateReceta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceta[P]>
      : GetScalarType<T[P], AggregateReceta[P]>
  }




  export type RecetaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecetaWhereInput
    orderBy?: RecetaOrderByWithAggregationInput | RecetaOrderByWithAggregationInput[]
    by: RecetaScalarFieldEnum[] | RecetaScalarFieldEnum
    having?: RecetaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecetaCountAggregateInputType | true
    _avg?: RecetaAvgAggregateInputType
    _sum?: RecetaSumAggregateInputType
    _min?: RecetaMinAggregateInputType
    _max?: RecetaMaxAggregateInputType
  }

  export type RecetaGroupByOutputType = {
    idReceta: number
    idFicha: number
    odEsfera: Decimal | null
    odCilindro: Decimal | null
    odEje: number | null
    oiEsfera: Decimal | null
    oiCilindro: Decimal | null
    oiEje: number | null
    adicion: Decimal | null
    pd: Decimal | null
    vigenciaDias: number | null
    fechaEmision: Date
    _count: RecetaCountAggregateOutputType | null
    _avg: RecetaAvgAggregateOutputType | null
    _sum: RecetaSumAggregateOutputType | null
    _min: RecetaMinAggregateOutputType | null
    _max: RecetaMaxAggregateOutputType | null
  }

  type GetRecetaGroupByPayload<T extends RecetaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecetaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecetaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecetaGroupByOutputType[P]>
            : GetScalarType<T[P], RecetaGroupByOutputType[P]>
        }
      >
    >


  export type RecetaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idReceta?: boolean
    idFicha?: boolean
    odEsfera?: boolean
    odCilindro?: boolean
    odEje?: boolean
    oiEsfera?: boolean
    oiCilindro?: boolean
    oiEje?: boolean
    adicion?: boolean
    pd?: boolean
    vigenciaDias?: boolean
    fechaEmision?: boolean
    ficha?: boolean | FichaClinicaDefaultArgs<ExtArgs>
    ventas?: boolean | Receta$ventasArgs<ExtArgs>
    _count?: boolean | RecetaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receta"]>



  export type RecetaSelectScalar = {
    idReceta?: boolean
    idFicha?: boolean
    odEsfera?: boolean
    odCilindro?: boolean
    odEje?: boolean
    oiEsfera?: boolean
    oiCilindro?: boolean
    oiEje?: boolean
    adicion?: boolean
    pd?: boolean
    vigenciaDias?: boolean
    fechaEmision?: boolean
  }

  export type RecetaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idReceta" | "idFicha" | "odEsfera" | "odCilindro" | "odEje" | "oiEsfera" | "oiCilindro" | "oiEje" | "adicion" | "pd" | "vigenciaDias" | "fechaEmision", ExtArgs["result"]["receta"]>
  export type RecetaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ficha?: boolean | FichaClinicaDefaultArgs<ExtArgs>
    ventas?: boolean | Receta$ventasArgs<ExtArgs>
    _count?: boolean | RecetaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RecetaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Receta"
    objects: {
      ficha: Prisma.$FichaClinicaPayload<ExtArgs>
      ventas: Prisma.$VentaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idReceta: number
      idFicha: number
      odEsfera: Prisma.Decimal | null
      odCilindro: Prisma.Decimal | null
      odEje: number | null
      oiEsfera: Prisma.Decimal | null
      oiCilindro: Prisma.Decimal | null
      oiEje: number | null
      adicion: Prisma.Decimal | null
      pd: Prisma.Decimal | null
      vigenciaDias: number | null
      fechaEmision: Date
    }, ExtArgs["result"]["receta"]>
    composites: {}
  }

  type RecetaGetPayload<S extends boolean | null | undefined | RecetaDefaultArgs> = $Result.GetResult<Prisma.$RecetaPayload, S>

  type RecetaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecetaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecetaCountAggregateInputType | true
    }

  export interface RecetaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Receta'], meta: { name: 'Receta' } }
    /**
     * Find zero or one Receta that matches the filter.
     * @param {RecetaFindUniqueArgs} args - Arguments to find a Receta
     * @example
     * // Get one Receta
     * const receta = await prisma.receta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecetaFindUniqueArgs>(args: SelectSubset<T, RecetaFindUniqueArgs<ExtArgs>>): Prisma__RecetaClient<$Result.GetResult<Prisma.$RecetaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Receta that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecetaFindUniqueOrThrowArgs} args - Arguments to find a Receta
     * @example
     * // Get one Receta
     * const receta = await prisma.receta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecetaFindUniqueOrThrowArgs>(args: SelectSubset<T, RecetaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecetaClient<$Result.GetResult<Prisma.$RecetaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Receta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecetaFindFirstArgs} args - Arguments to find a Receta
     * @example
     * // Get one Receta
     * const receta = await prisma.receta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecetaFindFirstArgs>(args?: SelectSubset<T, RecetaFindFirstArgs<ExtArgs>>): Prisma__RecetaClient<$Result.GetResult<Prisma.$RecetaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Receta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecetaFindFirstOrThrowArgs} args - Arguments to find a Receta
     * @example
     * // Get one Receta
     * const receta = await prisma.receta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecetaFindFirstOrThrowArgs>(args?: SelectSubset<T, RecetaFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecetaClient<$Result.GetResult<Prisma.$RecetaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Recetas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecetaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recetas
     * const recetas = await prisma.receta.findMany()
     * 
     * // Get first 10 Recetas
     * const recetas = await prisma.receta.findMany({ take: 10 })
     * 
     * // Only select the `idReceta`
     * const recetaWithIdRecetaOnly = await prisma.receta.findMany({ select: { idReceta: true } })
     * 
     */
    findMany<T extends RecetaFindManyArgs>(args?: SelectSubset<T, RecetaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecetaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Receta.
     * @param {RecetaCreateArgs} args - Arguments to create a Receta.
     * @example
     * // Create one Receta
     * const Receta = await prisma.receta.create({
     *   data: {
     *     // ... data to create a Receta
     *   }
     * })
     * 
     */
    create<T extends RecetaCreateArgs>(args: SelectSubset<T, RecetaCreateArgs<ExtArgs>>): Prisma__RecetaClient<$Result.GetResult<Prisma.$RecetaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Recetas.
     * @param {RecetaCreateManyArgs} args - Arguments to create many Recetas.
     * @example
     * // Create many Recetas
     * const receta = await prisma.receta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecetaCreateManyArgs>(args?: SelectSubset<T, RecetaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Receta.
     * @param {RecetaDeleteArgs} args - Arguments to delete one Receta.
     * @example
     * // Delete one Receta
     * const Receta = await prisma.receta.delete({
     *   where: {
     *     // ... filter to delete one Receta
     *   }
     * })
     * 
     */
    delete<T extends RecetaDeleteArgs>(args: SelectSubset<T, RecetaDeleteArgs<ExtArgs>>): Prisma__RecetaClient<$Result.GetResult<Prisma.$RecetaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Receta.
     * @param {RecetaUpdateArgs} args - Arguments to update one Receta.
     * @example
     * // Update one Receta
     * const receta = await prisma.receta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecetaUpdateArgs>(args: SelectSubset<T, RecetaUpdateArgs<ExtArgs>>): Prisma__RecetaClient<$Result.GetResult<Prisma.$RecetaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Recetas.
     * @param {RecetaDeleteManyArgs} args - Arguments to filter Recetas to delete.
     * @example
     * // Delete a few Recetas
     * const { count } = await prisma.receta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecetaDeleteManyArgs>(args?: SelectSubset<T, RecetaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecetaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recetas
     * const receta = await prisma.receta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecetaUpdateManyArgs>(args: SelectSubset<T, RecetaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Receta.
     * @param {RecetaUpsertArgs} args - Arguments to update or create a Receta.
     * @example
     * // Update or create a Receta
     * const receta = await prisma.receta.upsert({
     *   create: {
     *     // ... data to create a Receta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Receta we want to update
     *   }
     * })
     */
    upsert<T extends RecetaUpsertArgs>(args: SelectSubset<T, RecetaUpsertArgs<ExtArgs>>): Prisma__RecetaClient<$Result.GetResult<Prisma.$RecetaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Recetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecetaCountArgs} args - Arguments to filter Recetas to count.
     * @example
     * // Count the number of Recetas
     * const count = await prisma.receta.count({
     *   where: {
     *     // ... the filter for the Recetas we want to count
     *   }
     * })
    **/
    count<T extends RecetaCountArgs>(
      args?: Subset<T, RecetaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecetaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Receta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecetaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecetaAggregateArgs>(args: Subset<T, RecetaAggregateArgs>): Prisma.PrismaPromise<GetRecetaAggregateType<T>>

    /**
     * Group by Receta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecetaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecetaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecetaGroupByArgs['orderBy'] }
        : { orderBy?: RecetaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecetaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecetaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Receta model
   */
  readonly fields: RecetaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Receta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecetaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ficha<T extends FichaClinicaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FichaClinicaDefaultArgs<ExtArgs>>): Prisma__FichaClinicaClient<$Result.GetResult<Prisma.$FichaClinicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ventas<T extends Receta$ventasArgs<ExtArgs> = {}>(args?: Subset<T, Receta$ventasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Receta model
   */
  interface RecetaFieldRefs {
    readonly idReceta: FieldRef<"Receta", 'Int'>
    readonly idFicha: FieldRef<"Receta", 'Int'>
    readonly odEsfera: FieldRef<"Receta", 'Decimal'>
    readonly odCilindro: FieldRef<"Receta", 'Decimal'>
    readonly odEje: FieldRef<"Receta", 'Int'>
    readonly oiEsfera: FieldRef<"Receta", 'Decimal'>
    readonly oiCilindro: FieldRef<"Receta", 'Decimal'>
    readonly oiEje: FieldRef<"Receta", 'Int'>
    readonly adicion: FieldRef<"Receta", 'Decimal'>
    readonly pd: FieldRef<"Receta", 'Decimal'>
    readonly vigenciaDias: FieldRef<"Receta", 'Int'>
    readonly fechaEmision: FieldRef<"Receta", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Receta findUnique
   */
  export type RecetaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receta
     */
    select?: RecetaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receta
     */
    omit?: RecetaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecetaInclude<ExtArgs> | null
    /**
     * Filter, which Receta to fetch.
     */
    where: RecetaWhereUniqueInput
  }

  /**
   * Receta findUniqueOrThrow
   */
  export type RecetaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receta
     */
    select?: RecetaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receta
     */
    omit?: RecetaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecetaInclude<ExtArgs> | null
    /**
     * Filter, which Receta to fetch.
     */
    where: RecetaWhereUniqueInput
  }

  /**
   * Receta findFirst
   */
  export type RecetaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receta
     */
    select?: RecetaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receta
     */
    omit?: RecetaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecetaInclude<ExtArgs> | null
    /**
     * Filter, which Receta to fetch.
     */
    where?: RecetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recetas to fetch.
     */
    orderBy?: RecetaOrderByWithRelationInput | RecetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recetas.
     */
    cursor?: RecetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recetas.
     */
    distinct?: RecetaScalarFieldEnum | RecetaScalarFieldEnum[]
  }

  /**
   * Receta findFirstOrThrow
   */
  export type RecetaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receta
     */
    select?: RecetaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receta
     */
    omit?: RecetaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecetaInclude<ExtArgs> | null
    /**
     * Filter, which Receta to fetch.
     */
    where?: RecetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recetas to fetch.
     */
    orderBy?: RecetaOrderByWithRelationInput | RecetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recetas.
     */
    cursor?: RecetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recetas.
     */
    distinct?: RecetaScalarFieldEnum | RecetaScalarFieldEnum[]
  }

  /**
   * Receta findMany
   */
  export type RecetaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receta
     */
    select?: RecetaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receta
     */
    omit?: RecetaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecetaInclude<ExtArgs> | null
    /**
     * Filter, which Recetas to fetch.
     */
    where?: RecetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recetas to fetch.
     */
    orderBy?: RecetaOrderByWithRelationInput | RecetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recetas.
     */
    cursor?: RecetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recetas.
     */
    skip?: number
    distinct?: RecetaScalarFieldEnum | RecetaScalarFieldEnum[]
  }

  /**
   * Receta create
   */
  export type RecetaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receta
     */
    select?: RecetaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receta
     */
    omit?: RecetaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecetaInclude<ExtArgs> | null
    /**
     * The data needed to create a Receta.
     */
    data: XOR<RecetaCreateInput, RecetaUncheckedCreateInput>
  }

  /**
   * Receta createMany
   */
  export type RecetaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recetas.
     */
    data: RecetaCreateManyInput | RecetaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Receta update
   */
  export type RecetaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receta
     */
    select?: RecetaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receta
     */
    omit?: RecetaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecetaInclude<ExtArgs> | null
    /**
     * The data needed to update a Receta.
     */
    data: XOR<RecetaUpdateInput, RecetaUncheckedUpdateInput>
    /**
     * Choose, which Receta to update.
     */
    where: RecetaWhereUniqueInput
  }

  /**
   * Receta updateMany
   */
  export type RecetaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recetas.
     */
    data: XOR<RecetaUpdateManyMutationInput, RecetaUncheckedUpdateManyInput>
    /**
     * Filter which Recetas to update
     */
    where?: RecetaWhereInput
    /**
     * Limit how many Recetas to update.
     */
    limit?: number
  }

  /**
   * Receta upsert
   */
  export type RecetaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receta
     */
    select?: RecetaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receta
     */
    omit?: RecetaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecetaInclude<ExtArgs> | null
    /**
     * The filter to search for the Receta to update in case it exists.
     */
    where: RecetaWhereUniqueInput
    /**
     * In case the Receta found by the `where` argument doesn't exist, create a new Receta with this data.
     */
    create: XOR<RecetaCreateInput, RecetaUncheckedCreateInput>
    /**
     * In case the Receta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecetaUpdateInput, RecetaUncheckedUpdateInput>
  }

  /**
   * Receta delete
   */
  export type RecetaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receta
     */
    select?: RecetaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receta
     */
    omit?: RecetaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecetaInclude<ExtArgs> | null
    /**
     * Filter which Receta to delete.
     */
    where: RecetaWhereUniqueInput
  }

  /**
   * Receta deleteMany
   */
  export type RecetaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recetas to delete
     */
    where?: RecetaWhereInput
    /**
     * Limit how many Recetas to delete.
     */
    limit?: number
  }

  /**
   * Receta.ventas
   */
  export type Receta$ventasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    where?: VentaWhereInput
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    cursor?: VentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Receta without action
   */
  export type RecetaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receta
     */
    select?: RecetaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receta
     */
    omit?: RecetaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecetaInclude<ExtArgs> | null
  }


  /**
   * Model Producto
   */

  export type AggregateProducto = {
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  export type ProductoAvgAggregateOutputType = {
    idProducto: number | null
    precio: Decimal | null
  }

  export type ProductoSumAggregateOutputType = {
    idProducto: number | null
    precio: Decimal | null
  }

  export type ProductoMinAggregateOutputType = {
    idProducto: number | null
    codigo: string | null
    nombre: string | null
    precio: Decimal | null
    tipo: string | null
  }

  export type ProductoMaxAggregateOutputType = {
    idProducto: number | null
    codigo: string | null
    nombre: string | null
    precio: Decimal | null
    tipo: string | null
  }

  export type ProductoCountAggregateOutputType = {
    idProducto: number
    codigo: number
    nombre: number
    precio: number
    tipo: number
    _all: number
  }


  export type ProductoAvgAggregateInputType = {
    idProducto?: true
    precio?: true
  }

  export type ProductoSumAggregateInputType = {
    idProducto?: true
    precio?: true
  }

  export type ProductoMinAggregateInputType = {
    idProducto?: true
    codigo?: true
    nombre?: true
    precio?: true
    tipo?: true
  }

  export type ProductoMaxAggregateInputType = {
    idProducto?: true
    codigo?: true
    nombre?: true
    precio?: true
    tipo?: true
  }

  export type ProductoCountAggregateInputType = {
    idProducto?: true
    codigo?: true
    nombre?: true
    precio?: true
    tipo?: true
    _all?: true
  }

  export type ProductoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Producto to aggregate.
     */
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: ProductoOrderByWithRelationInput | ProductoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Productos
    **/
    _count?: true | ProductoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductoMaxAggregateInputType
  }

  export type GetProductoAggregateType<T extends ProductoAggregateArgs> = {
        [P in keyof T & keyof AggregateProducto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducto[P]>
      : GetScalarType<T[P], AggregateProducto[P]>
  }




  export type ProductoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductoWhereInput
    orderBy?: ProductoOrderByWithAggregationInput | ProductoOrderByWithAggregationInput[]
    by: ProductoScalarFieldEnum[] | ProductoScalarFieldEnum
    having?: ProductoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductoCountAggregateInputType | true
    _avg?: ProductoAvgAggregateInputType
    _sum?: ProductoSumAggregateInputType
    _min?: ProductoMinAggregateInputType
    _max?: ProductoMaxAggregateInputType
  }

  export type ProductoGroupByOutputType = {
    idProducto: number
    codigo: string
    nombre: string
    precio: Decimal
    tipo: string | null
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  type GetProductoGroupByPayload<T extends ProductoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductoGroupByOutputType[P]>
            : GetScalarType<T[P], ProductoGroupByOutputType[P]>
        }
      >
    >


  export type ProductoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idProducto?: boolean
    codigo?: boolean
    nombre?: boolean
    precio?: boolean
    tipo?: boolean
    items?: boolean | Producto$itemsArgs<ExtArgs>
    _count?: boolean | ProductoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["producto"]>



  export type ProductoSelectScalar = {
    idProducto?: boolean
    codigo?: boolean
    nombre?: boolean
    precio?: boolean
    tipo?: boolean
  }

  export type ProductoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idProducto" | "codigo" | "nombre" | "precio" | "tipo", ExtArgs["result"]["producto"]>
  export type ProductoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | Producto$itemsArgs<ExtArgs>
    _count?: boolean | ProductoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Producto"
    objects: {
      items: Prisma.$ItemVentaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idProducto: number
      codigo: string
      nombre: string
      precio: Prisma.Decimal
      tipo: string | null
    }, ExtArgs["result"]["producto"]>
    composites: {}
  }

  type ProductoGetPayload<S extends boolean | null | undefined | ProductoDefaultArgs> = $Result.GetResult<Prisma.$ProductoPayload, S>

  type ProductoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductoCountAggregateInputType | true
    }

  export interface ProductoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Producto'], meta: { name: 'Producto' } }
    /**
     * Find zero or one Producto that matches the filter.
     * @param {ProductoFindUniqueArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductoFindUniqueArgs>(args: SelectSubset<T, ProductoFindUniqueArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Producto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductoFindUniqueOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Producto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoFindFirstArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductoFindFirstArgs>(args?: SelectSubset<T, ProductoFindFirstArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Producto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoFindFirstOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Productos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productos
     * const productos = await prisma.producto.findMany()
     * 
     * // Get first 10 Productos
     * const productos = await prisma.producto.findMany({ take: 10 })
     * 
     * // Only select the `idProducto`
     * const productoWithIdProductoOnly = await prisma.producto.findMany({ select: { idProducto: true } })
     * 
     */
    findMany<T extends ProductoFindManyArgs>(args?: SelectSubset<T, ProductoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Producto.
     * @param {ProductoCreateArgs} args - Arguments to create a Producto.
     * @example
     * // Create one Producto
     * const Producto = await prisma.producto.create({
     *   data: {
     *     // ... data to create a Producto
     *   }
     * })
     * 
     */
    create<T extends ProductoCreateArgs>(args: SelectSubset<T, ProductoCreateArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Productos.
     * @param {ProductoCreateManyArgs} args - Arguments to create many Productos.
     * @example
     * // Create many Productos
     * const producto = await prisma.producto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductoCreateManyArgs>(args?: SelectSubset<T, ProductoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Producto.
     * @param {ProductoDeleteArgs} args - Arguments to delete one Producto.
     * @example
     * // Delete one Producto
     * const Producto = await prisma.producto.delete({
     *   where: {
     *     // ... filter to delete one Producto
     *   }
     * })
     * 
     */
    delete<T extends ProductoDeleteArgs>(args: SelectSubset<T, ProductoDeleteArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Producto.
     * @param {ProductoUpdateArgs} args - Arguments to update one Producto.
     * @example
     * // Update one Producto
     * const producto = await prisma.producto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductoUpdateArgs>(args: SelectSubset<T, ProductoUpdateArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Productos.
     * @param {ProductoDeleteManyArgs} args - Arguments to filter Productos to delete.
     * @example
     * // Delete a few Productos
     * const { count } = await prisma.producto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductoDeleteManyArgs>(args?: SelectSubset<T, ProductoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productos
     * const producto = await prisma.producto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductoUpdateManyArgs>(args: SelectSubset<T, ProductoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Producto.
     * @param {ProductoUpsertArgs} args - Arguments to update or create a Producto.
     * @example
     * // Update or create a Producto
     * const producto = await prisma.producto.upsert({
     *   create: {
     *     // ... data to create a Producto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Producto we want to update
     *   }
     * })
     */
    upsert<T extends ProductoUpsertArgs>(args: SelectSubset<T, ProductoUpsertArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoCountArgs} args - Arguments to filter Productos to count.
     * @example
     * // Count the number of Productos
     * const count = await prisma.producto.count({
     *   where: {
     *     // ... the filter for the Productos we want to count
     *   }
     * })
    **/
    count<T extends ProductoCountArgs>(
      args?: Subset<T, ProductoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductoAggregateArgs>(args: Subset<T, ProductoAggregateArgs>): Prisma.PrismaPromise<GetProductoAggregateType<T>>

    /**
     * Group by Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductoGroupByArgs['orderBy'] }
        : { orderBy?: ProductoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Producto model
   */
  readonly fields: ProductoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Producto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends Producto$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Producto$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemVentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Producto model
   */
  interface ProductoFieldRefs {
    readonly idProducto: FieldRef<"Producto", 'Int'>
    readonly codigo: FieldRef<"Producto", 'String'>
    readonly nombre: FieldRef<"Producto", 'String'>
    readonly precio: FieldRef<"Producto", 'Decimal'>
    readonly tipo: FieldRef<"Producto", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Producto findUnique
   */
  export type ProductoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * Filter, which Producto to fetch.
     */
    where: ProductoWhereUniqueInput
  }

  /**
   * Producto findUniqueOrThrow
   */
  export type ProductoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * Filter, which Producto to fetch.
     */
    where: ProductoWhereUniqueInput
  }

  /**
   * Producto findFirst
   */
  export type ProductoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * Filter, which Producto to fetch.
     */
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: ProductoOrderByWithRelationInput | ProductoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Productos.
     */
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Productos.
     */
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }

  /**
   * Producto findFirstOrThrow
   */
  export type ProductoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * Filter, which Producto to fetch.
     */
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: ProductoOrderByWithRelationInput | ProductoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Productos.
     */
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Productos.
     */
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }

  /**
   * Producto findMany
   */
  export type ProductoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * Filter, which Productos to fetch.
     */
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: ProductoOrderByWithRelationInput | ProductoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Productos.
     */
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }

  /**
   * Producto create
   */
  export type ProductoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * The data needed to create a Producto.
     */
    data: XOR<ProductoCreateInput, ProductoUncheckedCreateInput>
  }

  /**
   * Producto createMany
   */
  export type ProductoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Productos.
     */
    data: ProductoCreateManyInput | ProductoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Producto update
   */
  export type ProductoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * The data needed to update a Producto.
     */
    data: XOR<ProductoUpdateInput, ProductoUncheckedUpdateInput>
    /**
     * Choose, which Producto to update.
     */
    where: ProductoWhereUniqueInput
  }

  /**
   * Producto updateMany
   */
  export type ProductoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Productos.
     */
    data: XOR<ProductoUpdateManyMutationInput, ProductoUncheckedUpdateManyInput>
    /**
     * Filter which Productos to update
     */
    where?: ProductoWhereInput
    /**
     * Limit how many Productos to update.
     */
    limit?: number
  }

  /**
   * Producto upsert
   */
  export type ProductoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * The filter to search for the Producto to update in case it exists.
     */
    where: ProductoWhereUniqueInput
    /**
     * In case the Producto found by the `where` argument doesn't exist, create a new Producto with this data.
     */
    create: XOR<ProductoCreateInput, ProductoUncheckedCreateInput>
    /**
     * In case the Producto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductoUpdateInput, ProductoUncheckedUpdateInput>
  }

  /**
   * Producto delete
   */
  export type ProductoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
    /**
     * Filter which Producto to delete.
     */
    where: ProductoWhereUniqueInput
  }

  /**
   * Producto deleteMany
   */
  export type ProductoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Productos to delete
     */
    where?: ProductoWhereInput
    /**
     * Limit how many Productos to delete.
     */
    limit?: number
  }

  /**
   * Producto.items
   */
  export type Producto$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemVenta
     */
    select?: ItemVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemVenta
     */
    omit?: ItemVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemVentaInclude<ExtArgs> | null
    where?: ItemVentaWhereInput
    orderBy?: ItemVentaOrderByWithRelationInput | ItemVentaOrderByWithRelationInput[]
    cursor?: ItemVentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemVentaScalarFieldEnum | ItemVentaScalarFieldEnum[]
  }

  /**
   * Producto without action
   */
  export type ProductoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Producto
     */
    omit?: ProductoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoInclude<ExtArgs> | null
  }


  /**
   * Model Venta
   */

  export type AggregateVenta = {
    _count: VentaCountAggregateOutputType | null
    _avg: VentaAvgAggregateOutputType | null
    _sum: VentaSumAggregateOutputType | null
    _min: VentaMinAggregateOutputType | null
    _max: VentaMaxAggregateOutputType | null
  }

  export type VentaAvgAggregateOutputType = {
    idVenta: number | null
    idCliente: number | null
    idReceta: number | null
    total: Decimal | null
  }

  export type VentaSumAggregateOutputType = {
    idVenta: number | null
    idCliente: number | null
    idReceta: number | null
    total: Decimal | null
  }

  export type VentaMinAggregateOutputType = {
    idVenta: number | null
    idCliente: number | null
    idReceta: number | null
    fechaVenta: Date | null
    total: Decimal | null
  }

  export type VentaMaxAggregateOutputType = {
    idVenta: number | null
    idCliente: number | null
    idReceta: number | null
    fechaVenta: Date | null
    total: Decimal | null
  }

  export type VentaCountAggregateOutputType = {
    idVenta: number
    idCliente: number
    idReceta: number
    fechaVenta: number
    total: number
    _all: number
  }


  export type VentaAvgAggregateInputType = {
    idVenta?: true
    idCliente?: true
    idReceta?: true
    total?: true
  }

  export type VentaSumAggregateInputType = {
    idVenta?: true
    idCliente?: true
    idReceta?: true
    total?: true
  }

  export type VentaMinAggregateInputType = {
    idVenta?: true
    idCliente?: true
    idReceta?: true
    fechaVenta?: true
    total?: true
  }

  export type VentaMaxAggregateInputType = {
    idVenta?: true
    idCliente?: true
    idReceta?: true
    fechaVenta?: true
    total?: true
  }

  export type VentaCountAggregateInputType = {
    idVenta?: true
    idCliente?: true
    idReceta?: true
    fechaVenta?: true
    total?: true
    _all?: true
  }

  export type VentaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Venta to aggregate.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ventas
    **/
    _count?: true | VentaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VentaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VentaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VentaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VentaMaxAggregateInputType
  }

  export type GetVentaAggregateType<T extends VentaAggregateArgs> = {
        [P in keyof T & keyof AggregateVenta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenta[P]>
      : GetScalarType<T[P], AggregateVenta[P]>
  }




  export type VentaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VentaWhereInput
    orderBy?: VentaOrderByWithAggregationInput | VentaOrderByWithAggregationInput[]
    by: VentaScalarFieldEnum[] | VentaScalarFieldEnum
    having?: VentaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VentaCountAggregateInputType | true
    _avg?: VentaAvgAggregateInputType
    _sum?: VentaSumAggregateInputType
    _min?: VentaMinAggregateInputType
    _max?: VentaMaxAggregateInputType
  }

  export type VentaGroupByOutputType = {
    idVenta: number
    idCliente: number
    idReceta: number | null
    fechaVenta: Date
    total: Decimal
    _count: VentaCountAggregateOutputType | null
    _avg: VentaAvgAggregateOutputType | null
    _sum: VentaSumAggregateOutputType | null
    _min: VentaMinAggregateOutputType | null
    _max: VentaMaxAggregateOutputType | null
  }

  type GetVentaGroupByPayload<T extends VentaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VentaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VentaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VentaGroupByOutputType[P]>
            : GetScalarType<T[P], VentaGroupByOutputType[P]>
        }
      >
    >


  export type VentaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idVenta?: boolean
    idCliente?: boolean
    idReceta?: boolean
    fechaVenta?: boolean
    total?: boolean
    items?: boolean | Venta$itemsArgs<ExtArgs>
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    receta?: boolean | Venta$recetaArgs<ExtArgs>
    _count?: boolean | VentaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venta"]>



  export type VentaSelectScalar = {
    idVenta?: boolean
    idCliente?: boolean
    idReceta?: boolean
    fechaVenta?: boolean
    total?: boolean
  }

  export type VentaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idVenta" | "idCliente" | "idReceta" | "fechaVenta" | "total", ExtArgs["result"]["venta"]>
  export type VentaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | Venta$itemsArgs<ExtArgs>
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    receta?: boolean | Venta$recetaArgs<ExtArgs>
    _count?: boolean | VentaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $VentaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Venta"
    objects: {
      items: Prisma.$ItemVentaPayload<ExtArgs>[]
      cliente: Prisma.$ClientePayload<ExtArgs>
      receta: Prisma.$RecetaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      idVenta: number
      idCliente: number
      idReceta: number | null
      fechaVenta: Date
      total: Prisma.Decimal
    }, ExtArgs["result"]["venta"]>
    composites: {}
  }

  type VentaGetPayload<S extends boolean | null | undefined | VentaDefaultArgs> = $Result.GetResult<Prisma.$VentaPayload, S>

  type VentaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VentaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VentaCountAggregateInputType | true
    }

  export interface VentaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Venta'], meta: { name: 'Venta' } }
    /**
     * Find zero or one Venta that matches the filter.
     * @param {VentaFindUniqueArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VentaFindUniqueArgs>(args: SelectSubset<T, VentaFindUniqueArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Venta that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VentaFindUniqueOrThrowArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VentaFindUniqueOrThrowArgs>(args: SelectSubset<T, VentaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Venta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaFindFirstArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VentaFindFirstArgs>(args?: SelectSubset<T, VentaFindFirstArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Venta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaFindFirstOrThrowArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VentaFindFirstOrThrowArgs>(args?: SelectSubset<T, VentaFindFirstOrThrowArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ventas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ventas
     * const ventas = await prisma.venta.findMany()
     * 
     * // Get first 10 Ventas
     * const ventas = await prisma.venta.findMany({ take: 10 })
     * 
     * // Only select the `idVenta`
     * const ventaWithIdVentaOnly = await prisma.venta.findMany({ select: { idVenta: true } })
     * 
     */
    findMany<T extends VentaFindManyArgs>(args?: SelectSubset<T, VentaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Venta.
     * @param {VentaCreateArgs} args - Arguments to create a Venta.
     * @example
     * // Create one Venta
     * const Venta = await prisma.venta.create({
     *   data: {
     *     // ... data to create a Venta
     *   }
     * })
     * 
     */
    create<T extends VentaCreateArgs>(args: SelectSubset<T, VentaCreateArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ventas.
     * @param {VentaCreateManyArgs} args - Arguments to create many Ventas.
     * @example
     * // Create many Ventas
     * const venta = await prisma.venta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VentaCreateManyArgs>(args?: SelectSubset<T, VentaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Venta.
     * @param {VentaDeleteArgs} args - Arguments to delete one Venta.
     * @example
     * // Delete one Venta
     * const Venta = await prisma.venta.delete({
     *   where: {
     *     // ... filter to delete one Venta
     *   }
     * })
     * 
     */
    delete<T extends VentaDeleteArgs>(args: SelectSubset<T, VentaDeleteArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Venta.
     * @param {VentaUpdateArgs} args - Arguments to update one Venta.
     * @example
     * // Update one Venta
     * const venta = await prisma.venta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VentaUpdateArgs>(args: SelectSubset<T, VentaUpdateArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ventas.
     * @param {VentaDeleteManyArgs} args - Arguments to filter Ventas to delete.
     * @example
     * // Delete a few Ventas
     * const { count } = await prisma.venta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VentaDeleteManyArgs>(args?: SelectSubset<T, VentaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ventas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ventas
     * const venta = await prisma.venta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VentaUpdateManyArgs>(args: SelectSubset<T, VentaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Venta.
     * @param {VentaUpsertArgs} args - Arguments to update or create a Venta.
     * @example
     * // Update or create a Venta
     * const venta = await prisma.venta.upsert({
     *   create: {
     *     // ... data to create a Venta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Venta we want to update
     *   }
     * })
     */
    upsert<T extends VentaUpsertArgs>(args: SelectSubset<T, VentaUpsertArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ventas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaCountArgs} args - Arguments to filter Ventas to count.
     * @example
     * // Count the number of Ventas
     * const count = await prisma.venta.count({
     *   where: {
     *     // ... the filter for the Ventas we want to count
     *   }
     * })
    **/
    count<T extends VentaCountArgs>(
      args?: Subset<T, VentaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VentaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Venta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VentaAggregateArgs>(args: Subset<T, VentaAggregateArgs>): Prisma.PrismaPromise<GetVentaAggregateType<T>>

    /**
     * Group by Venta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VentaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VentaGroupByArgs['orderBy'] }
        : { orderBy?: VentaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VentaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVentaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Venta model
   */
  readonly fields: VentaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Venta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VentaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends Venta$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Venta$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemVentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receta<T extends Venta$recetaArgs<ExtArgs> = {}>(args?: Subset<T, Venta$recetaArgs<ExtArgs>>): Prisma__RecetaClient<$Result.GetResult<Prisma.$RecetaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Venta model
   */
  interface VentaFieldRefs {
    readonly idVenta: FieldRef<"Venta", 'Int'>
    readonly idCliente: FieldRef<"Venta", 'Int'>
    readonly idReceta: FieldRef<"Venta", 'Int'>
    readonly fechaVenta: FieldRef<"Venta", 'DateTime'>
    readonly total: FieldRef<"Venta", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Venta findUnique
   */
  export type VentaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where: VentaWhereUniqueInput
  }

  /**
   * Venta findUniqueOrThrow
   */
  export type VentaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where: VentaWhereUniqueInput
  }

  /**
   * Venta findFirst
   */
  export type VentaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ventas.
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ventas.
     */
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Venta findFirstOrThrow
   */
  export type VentaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ventas.
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ventas.
     */
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Venta findMany
   */
  export type VentaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Ventas to fetch.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ventas.
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Venta create
   */
  export type VentaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * The data needed to create a Venta.
     */
    data: XOR<VentaCreateInput, VentaUncheckedCreateInput>
  }

  /**
   * Venta createMany
   */
  export type VentaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ventas.
     */
    data: VentaCreateManyInput | VentaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Venta update
   */
  export type VentaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * The data needed to update a Venta.
     */
    data: XOR<VentaUpdateInput, VentaUncheckedUpdateInput>
    /**
     * Choose, which Venta to update.
     */
    where: VentaWhereUniqueInput
  }

  /**
   * Venta updateMany
   */
  export type VentaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ventas.
     */
    data: XOR<VentaUpdateManyMutationInput, VentaUncheckedUpdateManyInput>
    /**
     * Filter which Ventas to update
     */
    where?: VentaWhereInput
    /**
     * Limit how many Ventas to update.
     */
    limit?: number
  }

  /**
   * Venta upsert
   */
  export type VentaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * The filter to search for the Venta to update in case it exists.
     */
    where: VentaWhereUniqueInput
    /**
     * In case the Venta found by the `where` argument doesn't exist, create a new Venta with this data.
     */
    create: XOR<VentaCreateInput, VentaUncheckedCreateInput>
    /**
     * In case the Venta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VentaUpdateInput, VentaUncheckedUpdateInput>
  }

  /**
   * Venta delete
   */
  export type VentaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter which Venta to delete.
     */
    where: VentaWhereUniqueInput
  }

  /**
   * Venta deleteMany
   */
  export type VentaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ventas to delete
     */
    where?: VentaWhereInput
    /**
     * Limit how many Ventas to delete.
     */
    limit?: number
  }

  /**
   * Venta.items
   */
  export type Venta$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemVenta
     */
    select?: ItemVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemVenta
     */
    omit?: ItemVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemVentaInclude<ExtArgs> | null
    where?: ItemVentaWhereInput
    orderBy?: ItemVentaOrderByWithRelationInput | ItemVentaOrderByWithRelationInput[]
    cursor?: ItemVentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemVentaScalarFieldEnum | ItemVentaScalarFieldEnum[]
  }

  /**
   * Venta.receta
   */
  export type Venta$recetaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receta
     */
    select?: RecetaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Receta
     */
    omit?: RecetaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecetaInclude<ExtArgs> | null
    where?: RecetaWhereInput
  }

  /**
   * Venta without action
   */
  export type VentaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
  }


  /**
   * Model ItemVenta
   */

  export type AggregateItemVenta = {
    _count: ItemVentaCountAggregateOutputType | null
    _avg: ItemVentaAvgAggregateOutputType | null
    _sum: ItemVentaSumAggregateOutputType | null
    _min: ItemVentaMinAggregateOutputType | null
    _max: ItemVentaMaxAggregateOutputType | null
  }

  export type ItemVentaAvgAggregateOutputType = {
    idItem: number | null
    idVenta: number | null
    idProducto: number | null
    cantidad: number | null
    precioUnitario: Decimal | null
  }

  export type ItemVentaSumAggregateOutputType = {
    idItem: number | null
    idVenta: number | null
    idProducto: number | null
    cantidad: number | null
    precioUnitario: Decimal | null
  }

  export type ItemVentaMinAggregateOutputType = {
    idItem: number | null
    idVenta: number | null
    idProducto: number | null
    cantidad: number | null
    precioUnitario: Decimal | null
  }

  export type ItemVentaMaxAggregateOutputType = {
    idItem: number | null
    idVenta: number | null
    idProducto: number | null
    cantidad: number | null
    precioUnitario: Decimal | null
  }

  export type ItemVentaCountAggregateOutputType = {
    idItem: number
    idVenta: number
    idProducto: number
    cantidad: number
    precioUnitario: number
    _all: number
  }


  export type ItemVentaAvgAggregateInputType = {
    idItem?: true
    idVenta?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type ItemVentaSumAggregateInputType = {
    idItem?: true
    idVenta?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type ItemVentaMinAggregateInputType = {
    idItem?: true
    idVenta?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type ItemVentaMaxAggregateInputType = {
    idItem?: true
    idVenta?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type ItemVentaCountAggregateInputType = {
    idItem?: true
    idVenta?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
    _all?: true
  }

  export type ItemVentaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItemVenta to aggregate.
     */
    where?: ItemVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemVentas to fetch.
     */
    orderBy?: ItemVentaOrderByWithRelationInput | ItemVentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemVentas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ItemVentas
    **/
    _count?: true | ItemVentaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemVentaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemVentaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemVentaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemVentaMaxAggregateInputType
  }

  export type GetItemVentaAggregateType<T extends ItemVentaAggregateArgs> = {
        [P in keyof T & keyof AggregateItemVenta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItemVenta[P]>
      : GetScalarType<T[P], AggregateItemVenta[P]>
  }




  export type ItemVentaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemVentaWhereInput
    orderBy?: ItemVentaOrderByWithAggregationInput | ItemVentaOrderByWithAggregationInput[]
    by: ItemVentaScalarFieldEnum[] | ItemVentaScalarFieldEnum
    having?: ItemVentaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemVentaCountAggregateInputType | true
    _avg?: ItemVentaAvgAggregateInputType
    _sum?: ItemVentaSumAggregateInputType
    _min?: ItemVentaMinAggregateInputType
    _max?: ItemVentaMaxAggregateInputType
  }

  export type ItemVentaGroupByOutputType = {
    idItem: number
    idVenta: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal
    _count: ItemVentaCountAggregateOutputType | null
    _avg: ItemVentaAvgAggregateOutputType | null
    _sum: ItemVentaSumAggregateOutputType | null
    _min: ItemVentaMinAggregateOutputType | null
    _max: ItemVentaMaxAggregateOutputType | null
  }

  type GetItemVentaGroupByPayload<T extends ItemVentaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemVentaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemVentaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemVentaGroupByOutputType[P]>
            : GetScalarType<T[P], ItemVentaGroupByOutputType[P]>
        }
      >
    >


  export type ItemVentaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idItem?: boolean
    idVenta?: boolean
    idProducto?: boolean
    cantidad?: boolean
    precioUnitario?: boolean
    garantia?: boolean | ItemVenta$garantiaArgs<ExtArgs>
    producto?: boolean | ProductoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["itemVenta"]>



  export type ItemVentaSelectScalar = {
    idItem?: boolean
    idVenta?: boolean
    idProducto?: boolean
    cantidad?: boolean
    precioUnitario?: boolean
  }

  export type ItemVentaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idItem" | "idVenta" | "idProducto" | "cantidad" | "precioUnitario", ExtArgs["result"]["itemVenta"]>
  export type ItemVentaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    garantia?: boolean | ItemVenta$garantiaArgs<ExtArgs>
    producto?: boolean | ProductoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }

  export type $ItemVentaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ItemVenta"
    objects: {
      garantia: Prisma.$GarantiaPayload<ExtArgs> | null
      producto: Prisma.$ProductoPayload<ExtArgs>
      venta: Prisma.$VentaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idItem: number
      idVenta: number
      idProducto: number
      cantidad: number
      precioUnitario: Prisma.Decimal
    }, ExtArgs["result"]["itemVenta"]>
    composites: {}
  }

  type ItemVentaGetPayload<S extends boolean | null | undefined | ItemVentaDefaultArgs> = $Result.GetResult<Prisma.$ItemVentaPayload, S>

  type ItemVentaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ItemVentaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ItemVentaCountAggregateInputType | true
    }

  export interface ItemVentaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ItemVenta'], meta: { name: 'ItemVenta' } }
    /**
     * Find zero or one ItemVenta that matches the filter.
     * @param {ItemVentaFindUniqueArgs} args - Arguments to find a ItemVenta
     * @example
     * // Get one ItemVenta
     * const itemVenta = await prisma.itemVenta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemVentaFindUniqueArgs>(args: SelectSubset<T, ItemVentaFindUniqueArgs<ExtArgs>>): Prisma__ItemVentaClient<$Result.GetResult<Prisma.$ItemVentaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ItemVenta that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ItemVentaFindUniqueOrThrowArgs} args - Arguments to find a ItemVenta
     * @example
     * // Get one ItemVenta
     * const itemVenta = await prisma.itemVenta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemVentaFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemVentaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemVentaClient<$Result.GetResult<Prisma.$ItemVentaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ItemVenta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemVentaFindFirstArgs} args - Arguments to find a ItemVenta
     * @example
     * // Get one ItemVenta
     * const itemVenta = await prisma.itemVenta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemVentaFindFirstArgs>(args?: SelectSubset<T, ItemVentaFindFirstArgs<ExtArgs>>): Prisma__ItemVentaClient<$Result.GetResult<Prisma.$ItemVentaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ItemVenta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemVentaFindFirstOrThrowArgs} args - Arguments to find a ItemVenta
     * @example
     * // Get one ItemVenta
     * const itemVenta = await prisma.itemVenta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemVentaFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemVentaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemVentaClient<$Result.GetResult<Prisma.$ItemVentaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ItemVentas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemVentaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ItemVentas
     * const itemVentas = await prisma.itemVenta.findMany()
     * 
     * // Get first 10 ItemVentas
     * const itemVentas = await prisma.itemVenta.findMany({ take: 10 })
     * 
     * // Only select the `idItem`
     * const itemVentaWithIdItemOnly = await prisma.itemVenta.findMany({ select: { idItem: true } })
     * 
     */
    findMany<T extends ItemVentaFindManyArgs>(args?: SelectSubset<T, ItemVentaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemVentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ItemVenta.
     * @param {ItemVentaCreateArgs} args - Arguments to create a ItemVenta.
     * @example
     * // Create one ItemVenta
     * const ItemVenta = await prisma.itemVenta.create({
     *   data: {
     *     // ... data to create a ItemVenta
     *   }
     * })
     * 
     */
    create<T extends ItemVentaCreateArgs>(args: SelectSubset<T, ItemVentaCreateArgs<ExtArgs>>): Prisma__ItemVentaClient<$Result.GetResult<Prisma.$ItemVentaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ItemVentas.
     * @param {ItemVentaCreateManyArgs} args - Arguments to create many ItemVentas.
     * @example
     * // Create many ItemVentas
     * const itemVenta = await prisma.itemVenta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemVentaCreateManyArgs>(args?: SelectSubset<T, ItemVentaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ItemVenta.
     * @param {ItemVentaDeleteArgs} args - Arguments to delete one ItemVenta.
     * @example
     * // Delete one ItemVenta
     * const ItemVenta = await prisma.itemVenta.delete({
     *   where: {
     *     // ... filter to delete one ItemVenta
     *   }
     * })
     * 
     */
    delete<T extends ItemVentaDeleteArgs>(args: SelectSubset<T, ItemVentaDeleteArgs<ExtArgs>>): Prisma__ItemVentaClient<$Result.GetResult<Prisma.$ItemVentaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ItemVenta.
     * @param {ItemVentaUpdateArgs} args - Arguments to update one ItemVenta.
     * @example
     * // Update one ItemVenta
     * const itemVenta = await prisma.itemVenta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemVentaUpdateArgs>(args: SelectSubset<T, ItemVentaUpdateArgs<ExtArgs>>): Prisma__ItemVentaClient<$Result.GetResult<Prisma.$ItemVentaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ItemVentas.
     * @param {ItemVentaDeleteManyArgs} args - Arguments to filter ItemVentas to delete.
     * @example
     * // Delete a few ItemVentas
     * const { count } = await prisma.itemVenta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemVentaDeleteManyArgs>(args?: SelectSubset<T, ItemVentaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ItemVentas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemVentaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ItemVentas
     * const itemVenta = await prisma.itemVenta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemVentaUpdateManyArgs>(args: SelectSubset<T, ItemVentaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ItemVenta.
     * @param {ItemVentaUpsertArgs} args - Arguments to update or create a ItemVenta.
     * @example
     * // Update or create a ItemVenta
     * const itemVenta = await prisma.itemVenta.upsert({
     *   create: {
     *     // ... data to create a ItemVenta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ItemVenta we want to update
     *   }
     * })
     */
    upsert<T extends ItemVentaUpsertArgs>(args: SelectSubset<T, ItemVentaUpsertArgs<ExtArgs>>): Prisma__ItemVentaClient<$Result.GetResult<Prisma.$ItemVentaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ItemVentas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemVentaCountArgs} args - Arguments to filter ItemVentas to count.
     * @example
     * // Count the number of ItemVentas
     * const count = await prisma.itemVenta.count({
     *   where: {
     *     // ... the filter for the ItemVentas we want to count
     *   }
     * })
    **/
    count<T extends ItemVentaCountArgs>(
      args?: Subset<T, ItemVentaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemVentaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ItemVenta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemVentaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemVentaAggregateArgs>(args: Subset<T, ItemVentaAggregateArgs>): Prisma.PrismaPromise<GetItemVentaAggregateType<T>>

    /**
     * Group by ItemVenta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemVentaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemVentaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemVentaGroupByArgs['orderBy'] }
        : { orderBy?: ItemVentaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemVentaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemVentaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ItemVenta model
   */
  readonly fields: ItemVentaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ItemVenta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemVentaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    garantia<T extends ItemVenta$garantiaArgs<ExtArgs> = {}>(args?: Subset<T, ItemVenta$garantiaArgs<ExtArgs>>): Prisma__GarantiaClient<$Result.GetResult<Prisma.$GarantiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    producto<T extends ProductoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductoDefaultArgs<ExtArgs>>): Prisma__ProductoClient<$Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    venta<T extends VentaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VentaDefaultArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ItemVenta model
   */
  interface ItemVentaFieldRefs {
    readonly idItem: FieldRef<"ItemVenta", 'Int'>
    readonly idVenta: FieldRef<"ItemVenta", 'Int'>
    readonly idProducto: FieldRef<"ItemVenta", 'Int'>
    readonly cantidad: FieldRef<"ItemVenta", 'Int'>
    readonly precioUnitario: FieldRef<"ItemVenta", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * ItemVenta findUnique
   */
  export type ItemVentaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemVenta
     */
    select?: ItemVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemVenta
     */
    omit?: ItemVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemVentaInclude<ExtArgs> | null
    /**
     * Filter, which ItemVenta to fetch.
     */
    where: ItemVentaWhereUniqueInput
  }

  /**
   * ItemVenta findUniqueOrThrow
   */
  export type ItemVentaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemVenta
     */
    select?: ItemVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemVenta
     */
    omit?: ItemVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemVentaInclude<ExtArgs> | null
    /**
     * Filter, which ItemVenta to fetch.
     */
    where: ItemVentaWhereUniqueInput
  }

  /**
   * ItemVenta findFirst
   */
  export type ItemVentaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemVenta
     */
    select?: ItemVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemVenta
     */
    omit?: ItemVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemVentaInclude<ExtArgs> | null
    /**
     * Filter, which ItemVenta to fetch.
     */
    where?: ItemVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemVentas to fetch.
     */
    orderBy?: ItemVentaOrderByWithRelationInput | ItemVentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItemVentas.
     */
    cursor?: ItemVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemVentas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItemVentas.
     */
    distinct?: ItemVentaScalarFieldEnum | ItemVentaScalarFieldEnum[]
  }

  /**
   * ItemVenta findFirstOrThrow
   */
  export type ItemVentaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemVenta
     */
    select?: ItemVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemVenta
     */
    omit?: ItemVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemVentaInclude<ExtArgs> | null
    /**
     * Filter, which ItemVenta to fetch.
     */
    where?: ItemVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemVentas to fetch.
     */
    orderBy?: ItemVentaOrderByWithRelationInput | ItemVentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItemVentas.
     */
    cursor?: ItemVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemVentas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItemVentas.
     */
    distinct?: ItemVentaScalarFieldEnum | ItemVentaScalarFieldEnum[]
  }

  /**
   * ItemVenta findMany
   */
  export type ItemVentaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemVenta
     */
    select?: ItemVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemVenta
     */
    omit?: ItemVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemVentaInclude<ExtArgs> | null
    /**
     * Filter, which ItemVentas to fetch.
     */
    where?: ItemVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemVentas to fetch.
     */
    orderBy?: ItemVentaOrderByWithRelationInput | ItemVentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ItemVentas.
     */
    cursor?: ItemVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemVentas.
     */
    skip?: number
    distinct?: ItemVentaScalarFieldEnum | ItemVentaScalarFieldEnum[]
  }

  /**
   * ItemVenta create
   */
  export type ItemVentaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemVenta
     */
    select?: ItemVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemVenta
     */
    omit?: ItemVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemVentaInclude<ExtArgs> | null
    /**
     * The data needed to create a ItemVenta.
     */
    data: XOR<ItemVentaCreateInput, ItemVentaUncheckedCreateInput>
  }

  /**
   * ItemVenta createMany
   */
  export type ItemVentaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ItemVentas.
     */
    data: ItemVentaCreateManyInput | ItemVentaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ItemVenta update
   */
  export type ItemVentaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemVenta
     */
    select?: ItemVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemVenta
     */
    omit?: ItemVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemVentaInclude<ExtArgs> | null
    /**
     * The data needed to update a ItemVenta.
     */
    data: XOR<ItemVentaUpdateInput, ItemVentaUncheckedUpdateInput>
    /**
     * Choose, which ItemVenta to update.
     */
    where: ItemVentaWhereUniqueInput
  }

  /**
   * ItemVenta updateMany
   */
  export type ItemVentaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ItemVentas.
     */
    data: XOR<ItemVentaUpdateManyMutationInput, ItemVentaUncheckedUpdateManyInput>
    /**
     * Filter which ItemVentas to update
     */
    where?: ItemVentaWhereInput
    /**
     * Limit how many ItemVentas to update.
     */
    limit?: number
  }

  /**
   * ItemVenta upsert
   */
  export type ItemVentaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemVenta
     */
    select?: ItemVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemVenta
     */
    omit?: ItemVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemVentaInclude<ExtArgs> | null
    /**
     * The filter to search for the ItemVenta to update in case it exists.
     */
    where: ItemVentaWhereUniqueInput
    /**
     * In case the ItemVenta found by the `where` argument doesn't exist, create a new ItemVenta with this data.
     */
    create: XOR<ItemVentaCreateInput, ItemVentaUncheckedCreateInput>
    /**
     * In case the ItemVenta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemVentaUpdateInput, ItemVentaUncheckedUpdateInput>
  }

  /**
   * ItemVenta delete
   */
  export type ItemVentaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemVenta
     */
    select?: ItemVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemVenta
     */
    omit?: ItemVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemVentaInclude<ExtArgs> | null
    /**
     * Filter which ItemVenta to delete.
     */
    where: ItemVentaWhereUniqueInput
  }

  /**
   * ItemVenta deleteMany
   */
  export type ItemVentaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItemVentas to delete
     */
    where?: ItemVentaWhereInput
    /**
     * Limit how many ItemVentas to delete.
     */
    limit?: number
  }

  /**
   * ItemVenta.garantia
   */
  export type ItemVenta$garantiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Garantia
     */
    select?: GarantiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Garantia
     */
    omit?: GarantiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GarantiaInclude<ExtArgs> | null
    where?: GarantiaWhereInput
  }

  /**
   * ItemVenta without action
   */
  export type ItemVentaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemVenta
     */
    select?: ItemVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemVenta
     */
    omit?: ItemVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemVentaInclude<ExtArgs> | null
  }


  /**
   * Model Garantia
   */

  export type AggregateGarantia = {
    _count: GarantiaCountAggregateOutputType | null
    _avg: GarantiaAvgAggregateOutputType | null
    _sum: GarantiaSumAggregateOutputType | null
    _min: GarantiaMinAggregateOutputType | null
    _max: GarantiaMaxAggregateOutputType | null
  }

  export type GarantiaAvgAggregateOutputType = {
    idGarantia: number | null
    idItem: number | null
  }

  export type GarantiaSumAggregateOutputType = {
    idGarantia: number | null
    idItem: number | null
  }

  export type GarantiaMinAggregateOutputType = {
    idGarantia: number | null
    idItem: number | null
    fechaInicio: Date | null
    fechaFin: Date | null
    condiciones: string | null
  }

  export type GarantiaMaxAggregateOutputType = {
    idGarantia: number | null
    idItem: number | null
    fechaInicio: Date | null
    fechaFin: Date | null
    condiciones: string | null
  }

  export type GarantiaCountAggregateOutputType = {
    idGarantia: number
    idItem: number
    fechaInicio: number
    fechaFin: number
    condiciones: number
    _all: number
  }


  export type GarantiaAvgAggregateInputType = {
    idGarantia?: true
    idItem?: true
  }

  export type GarantiaSumAggregateInputType = {
    idGarantia?: true
    idItem?: true
  }

  export type GarantiaMinAggregateInputType = {
    idGarantia?: true
    idItem?: true
    fechaInicio?: true
    fechaFin?: true
    condiciones?: true
  }

  export type GarantiaMaxAggregateInputType = {
    idGarantia?: true
    idItem?: true
    fechaInicio?: true
    fechaFin?: true
    condiciones?: true
  }

  export type GarantiaCountAggregateInputType = {
    idGarantia?: true
    idItem?: true
    fechaInicio?: true
    fechaFin?: true
    condiciones?: true
    _all?: true
  }

  export type GarantiaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Garantia to aggregate.
     */
    where?: GarantiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Garantias to fetch.
     */
    orderBy?: GarantiaOrderByWithRelationInput | GarantiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GarantiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Garantias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Garantias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Garantias
    **/
    _count?: true | GarantiaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GarantiaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GarantiaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GarantiaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GarantiaMaxAggregateInputType
  }

  export type GetGarantiaAggregateType<T extends GarantiaAggregateArgs> = {
        [P in keyof T & keyof AggregateGarantia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGarantia[P]>
      : GetScalarType<T[P], AggregateGarantia[P]>
  }




  export type GarantiaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GarantiaWhereInput
    orderBy?: GarantiaOrderByWithAggregationInput | GarantiaOrderByWithAggregationInput[]
    by: GarantiaScalarFieldEnum[] | GarantiaScalarFieldEnum
    having?: GarantiaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GarantiaCountAggregateInputType | true
    _avg?: GarantiaAvgAggregateInputType
    _sum?: GarantiaSumAggregateInputType
    _min?: GarantiaMinAggregateInputType
    _max?: GarantiaMaxAggregateInputType
  }

  export type GarantiaGroupByOutputType = {
    idGarantia: number
    idItem: number
    fechaInicio: Date
    fechaFin: Date
    condiciones: string | null
    _count: GarantiaCountAggregateOutputType | null
    _avg: GarantiaAvgAggregateOutputType | null
    _sum: GarantiaSumAggregateOutputType | null
    _min: GarantiaMinAggregateOutputType | null
    _max: GarantiaMaxAggregateOutputType | null
  }

  type GetGarantiaGroupByPayload<T extends GarantiaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GarantiaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GarantiaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GarantiaGroupByOutputType[P]>
            : GetScalarType<T[P], GarantiaGroupByOutputType[P]>
        }
      >
    >


  export type GarantiaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idGarantia?: boolean
    idItem?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    condiciones?: boolean
    item?: boolean | ItemVentaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["garantia"]>



  export type GarantiaSelectScalar = {
    idGarantia?: boolean
    idItem?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    condiciones?: boolean
  }

  export type GarantiaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idGarantia" | "idItem" | "fechaInicio" | "fechaFin" | "condiciones", ExtArgs["result"]["garantia"]>
  export type GarantiaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | ItemVentaDefaultArgs<ExtArgs>
  }

  export type $GarantiaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Garantia"
    objects: {
      item: Prisma.$ItemVentaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idGarantia: number
      idItem: number
      fechaInicio: Date
      fechaFin: Date
      condiciones: string | null
    }, ExtArgs["result"]["garantia"]>
    composites: {}
  }

  type GarantiaGetPayload<S extends boolean | null | undefined | GarantiaDefaultArgs> = $Result.GetResult<Prisma.$GarantiaPayload, S>

  type GarantiaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GarantiaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GarantiaCountAggregateInputType | true
    }

  export interface GarantiaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Garantia'], meta: { name: 'Garantia' } }
    /**
     * Find zero or one Garantia that matches the filter.
     * @param {GarantiaFindUniqueArgs} args - Arguments to find a Garantia
     * @example
     * // Get one Garantia
     * const garantia = await prisma.garantia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GarantiaFindUniqueArgs>(args: SelectSubset<T, GarantiaFindUniqueArgs<ExtArgs>>): Prisma__GarantiaClient<$Result.GetResult<Prisma.$GarantiaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Garantia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GarantiaFindUniqueOrThrowArgs} args - Arguments to find a Garantia
     * @example
     * // Get one Garantia
     * const garantia = await prisma.garantia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GarantiaFindUniqueOrThrowArgs>(args: SelectSubset<T, GarantiaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GarantiaClient<$Result.GetResult<Prisma.$GarantiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Garantia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GarantiaFindFirstArgs} args - Arguments to find a Garantia
     * @example
     * // Get one Garantia
     * const garantia = await prisma.garantia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GarantiaFindFirstArgs>(args?: SelectSubset<T, GarantiaFindFirstArgs<ExtArgs>>): Prisma__GarantiaClient<$Result.GetResult<Prisma.$GarantiaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Garantia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GarantiaFindFirstOrThrowArgs} args - Arguments to find a Garantia
     * @example
     * // Get one Garantia
     * const garantia = await prisma.garantia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GarantiaFindFirstOrThrowArgs>(args?: SelectSubset<T, GarantiaFindFirstOrThrowArgs<ExtArgs>>): Prisma__GarantiaClient<$Result.GetResult<Prisma.$GarantiaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Garantias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GarantiaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Garantias
     * const garantias = await prisma.garantia.findMany()
     * 
     * // Get first 10 Garantias
     * const garantias = await prisma.garantia.findMany({ take: 10 })
     * 
     * // Only select the `idGarantia`
     * const garantiaWithIdGarantiaOnly = await prisma.garantia.findMany({ select: { idGarantia: true } })
     * 
     */
    findMany<T extends GarantiaFindManyArgs>(args?: SelectSubset<T, GarantiaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GarantiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Garantia.
     * @param {GarantiaCreateArgs} args - Arguments to create a Garantia.
     * @example
     * // Create one Garantia
     * const Garantia = await prisma.garantia.create({
     *   data: {
     *     // ... data to create a Garantia
     *   }
     * })
     * 
     */
    create<T extends GarantiaCreateArgs>(args: SelectSubset<T, GarantiaCreateArgs<ExtArgs>>): Prisma__GarantiaClient<$Result.GetResult<Prisma.$GarantiaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Garantias.
     * @param {GarantiaCreateManyArgs} args - Arguments to create many Garantias.
     * @example
     * // Create many Garantias
     * const garantia = await prisma.garantia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GarantiaCreateManyArgs>(args?: SelectSubset<T, GarantiaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Garantia.
     * @param {GarantiaDeleteArgs} args - Arguments to delete one Garantia.
     * @example
     * // Delete one Garantia
     * const Garantia = await prisma.garantia.delete({
     *   where: {
     *     // ... filter to delete one Garantia
     *   }
     * })
     * 
     */
    delete<T extends GarantiaDeleteArgs>(args: SelectSubset<T, GarantiaDeleteArgs<ExtArgs>>): Prisma__GarantiaClient<$Result.GetResult<Prisma.$GarantiaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Garantia.
     * @param {GarantiaUpdateArgs} args - Arguments to update one Garantia.
     * @example
     * // Update one Garantia
     * const garantia = await prisma.garantia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GarantiaUpdateArgs>(args: SelectSubset<T, GarantiaUpdateArgs<ExtArgs>>): Prisma__GarantiaClient<$Result.GetResult<Prisma.$GarantiaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Garantias.
     * @param {GarantiaDeleteManyArgs} args - Arguments to filter Garantias to delete.
     * @example
     * // Delete a few Garantias
     * const { count } = await prisma.garantia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GarantiaDeleteManyArgs>(args?: SelectSubset<T, GarantiaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Garantias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GarantiaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Garantias
     * const garantia = await prisma.garantia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GarantiaUpdateManyArgs>(args: SelectSubset<T, GarantiaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Garantia.
     * @param {GarantiaUpsertArgs} args - Arguments to update or create a Garantia.
     * @example
     * // Update or create a Garantia
     * const garantia = await prisma.garantia.upsert({
     *   create: {
     *     // ... data to create a Garantia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Garantia we want to update
     *   }
     * })
     */
    upsert<T extends GarantiaUpsertArgs>(args: SelectSubset<T, GarantiaUpsertArgs<ExtArgs>>): Prisma__GarantiaClient<$Result.GetResult<Prisma.$GarantiaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Garantias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GarantiaCountArgs} args - Arguments to filter Garantias to count.
     * @example
     * // Count the number of Garantias
     * const count = await prisma.garantia.count({
     *   where: {
     *     // ... the filter for the Garantias we want to count
     *   }
     * })
    **/
    count<T extends GarantiaCountArgs>(
      args?: Subset<T, GarantiaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GarantiaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Garantia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GarantiaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GarantiaAggregateArgs>(args: Subset<T, GarantiaAggregateArgs>): Prisma.PrismaPromise<GetGarantiaAggregateType<T>>

    /**
     * Group by Garantia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GarantiaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GarantiaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GarantiaGroupByArgs['orderBy'] }
        : { orderBy?: GarantiaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GarantiaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGarantiaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Garantia model
   */
  readonly fields: GarantiaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Garantia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GarantiaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends ItemVentaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemVentaDefaultArgs<ExtArgs>>): Prisma__ItemVentaClient<$Result.GetResult<Prisma.$ItemVentaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Garantia model
   */
  interface GarantiaFieldRefs {
    readonly idGarantia: FieldRef<"Garantia", 'Int'>
    readonly idItem: FieldRef<"Garantia", 'Int'>
    readonly fechaInicio: FieldRef<"Garantia", 'DateTime'>
    readonly fechaFin: FieldRef<"Garantia", 'DateTime'>
    readonly condiciones: FieldRef<"Garantia", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Garantia findUnique
   */
  export type GarantiaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Garantia
     */
    select?: GarantiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Garantia
     */
    omit?: GarantiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GarantiaInclude<ExtArgs> | null
    /**
     * Filter, which Garantia to fetch.
     */
    where: GarantiaWhereUniqueInput
  }

  /**
   * Garantia findUniqueOrThrow
   */
  export type GarantiaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Garantia
     */
    select?: GarantiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Garantia
     */
    omit?: GarantiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GarantiaInclude<ExtArgs> | null
    /**
     * Filter, which Garantia to fetch.
     */
    where: GarantiaWhereUniqueInput
  }

  /**
   * Garantia findFirst
   */
  export type GarantiaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Garantia
     */
    select?: GarantiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Garantia
     */
    omit?: GarantiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GarantiaInclude<ExtArgs> | null
    /**
     * Filter, which Garantia to fetch.
     */
    where?: GarantiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Garantias to fetch.
     */
    orderBy?: GarantiaOrderByWithRelationInput | GarantiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Garantias.
     */
    cursor?: GarantiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Garantias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Garantias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Garantias.
     */
    distinct?: GarantiaScalarFieldEnum | GarantiaScalarFieldEnum[]
  }

  /**
   * Garantia findFirstOrThrow
   */
  export type GarantiaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Garantia
     */
    select?: GarantiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Garantia
     */
    omit?: GarantiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GarantiaInclude<ExtArgs> | null
    /**
     * Filter, which Garantia to fetch.
     */
    where?: GarantiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Garantias to fetch.
     */
    orderBy?: GarantiaOrderByWithRelationInput | GarantiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Garantias.
     */
    cursor?: GarantiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Garantias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Garantias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Garantias.
     */
    distinct?: GarantiaScalarFieldEnum | GarantiaScalarFieldEnum[]
  }

  /**
   * Garantia findMany
   */
  export type GarantiaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Garantia
     */
    select?: GarantiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Garantia
     */
    omit?: GarantiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GarantiaInclude<ExtArgs> | null
    /**
     * Filter, which Garantias to fetch.
     */
    where?: GarantiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Garantias to fetch.
     */
    orderBy?: GarantiaOrderByWithRelationInput | GarantiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Garantias.
     */
    cursor?: GarantiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Garantias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Garantias.
     */
    skip?: number
    distinct?: GarantiaScalarFieldEnum | GarantiaScalarFieldEnum[]
  }

  /**
   * Garantia create
   */
  export type GarantiaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Garantia
     */
    select?: GarantiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Garantia
     */
    omit?: GarantiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GarantiaInclude<ExtArgs> | null
    /**
     * The data needed to create a Garantia.
     */
    data: XOR<GarantiaCreateInput, GarantiaUncheckedCreateInput>
  }

  /**
   * Garantia createMany
   */
  export type GarantiaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Garantias.
     */
    data: GarantiaCreateManyInput | GarantiaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Garantia update
   */
  export type GarantiaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Garantia
     */
    select?: GarantiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Garantia
     */
    omit?: GarantiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GarantiaInclude<ExtArgs> | null
    /**
     * The data needed to update a Garantia.
     */
    data: XOR<GarantiaUpdateInput, GarantiaUncheckedUpdateInput>
    /**
     * Choose, which Garantia to update.
     */
    where: GarantiaWhereUniqueInput
  }

  /**
   * Garantia updateMany
   */
  export type GarantiaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Garantias.
     */
    data: XOR<GarantiaUpdateManyMutationInput, GarantiaUncheckedUpdateManyInput>
    /**
     * Filter which Garantias to update
     */
    where?: GarantiaWhereInput
    /**
     * Limit how many Garantias to update.
     */
    limit?: number
  }

  /**
   * Garantia upsert
   */
  export type GarantiaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Garantia
     */
    select?: GarantiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Garantia
     */
    omit?: GarantiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GarantiaInclude<ExtArgs> | null
    /**
     * The filter to search for the Garantia to update in case it exists.
     */
    where: GarantiaWhereUniqueInput
    /**
     * In case the Garantia found by the `where` argument doesn't exist, create a new Garantia with this data.
     */
    create: XOR<GarantiaCreateInput, GarantiaUncheckedCreateInput>
    /**
     * In case the Garantia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GarantiaUpdateInput, GarantiaUncheckedUpdateInput>
  }

  /**
   * Garantia delete
   */
  export type GarantiaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Garantia
     */
    select?: GarantiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Garantia
     */
    omit?: GarantiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GarantiaInclude<ExtArgs> | null
    /**
     * Filter which Garantia to delete.
     */
    where: GarantiaWhereUniqueInput
  }

  /**
   * Garantia deleteMany
   */
  export type GarantiaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Garantias to delete
     */
    where?: GarantiaWhereInput
    /**
     * Limit how many Garantias to delete.
     */
    limit?: number
  }

  /**
   * Garantia without action
   */
  export type GarantiaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Garantia
     */
    select?: GarantiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Garantia
     */
    omit?: GarantiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GarantiaInclude<ExtArgs> | null
  }


  /**
   * Model Alerta
   */

  export type AggregateAlerta = {
    _count: AlertaCountAggregateOutputType | null
    _avg: AlertaAvgAggregateOutputType | null
    _sum: AlertaSumAggregateOutputType | null
    _min: AlertaMinAggregateOutputType | null
    _max: AlertaMaxAggregateOutputType | null
  }

  export type AlertaAvgAggregateOutputType = {
    idAlerta: number | null
    idCliente: number | null
    enviado: number | null
  }

  export type AlertaSumAggregateOutputType = {
    idAlerta: number | null
    idCliente: number | null
    enviado: number | null
  }

  export type AlertaMinAggregateOutputType = {
    idAlerta: number | null
    idCliente: number | null
    tipo: $Enums.AlertaTipo | null
    canal: $Enums.AlertaCanal | null
    mensaje: string | null
    fechaProgramada: Date | null
    enviado: number | null
  }

  export type AlertaMaxAggregateOutputType = {
    idAlerta: number | null
    idCliente: number | null
    tipo: $Enums.AlertaTipo | null
    canal: $Enums.AlertaCanal | null
    mensaje: string | null
    fechaProgramada: Date | null
    enviado: number | null
  }

  export type AlertaCountAggregateOutputType = {
    idAlerta: number
    idCliente: number
    tipo: number
    canal: number
    mensaje: number
    fechaProgramada: number
    enviado: number
    _all: number
  }


  export type AlertaAvgAggregateInputType = {
    idAlerta?: true
    idCliente?: true
    enviado?: true
  }

  export type AlertaSumAggregateInputType = {
    idAlerta?: true
    idCliente?: true
    enviado?: true
  }

  export type AlertaMinAggregateInputType = {
    idAlerta?: true
    idCliente?: true
    tipo?: true
    canal?: true
    mensaje?: true
    fechaProgramada?: true
    enviado?: true
  }

  export type AlertaMaxAggregateInputType = {
    idAlerta?: true
    idCliente?: true
    tipo?: true
    canal?: true
    mensaje?: true
    fechaProgramada?: true
    enviado?: true
  }

  export type AlertaCountAggregateInputType = {
    idAlerta?: true
    idCliente?: true
    tipo?: true
    canal?: true
    mensaje?: true
    fechaProgramada?: true
    enviado?: true
    _all?: true
  }

  export type AlertaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alerta to aggregate.
     */
    where?: AlertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alertas to fetch.
     */
    orderBy?: AlertaOrderByWithRelationInput | AlertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alertas
    **/
    _count?: true | AlertaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlertaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlertaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlertaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlertaMaxAggregateInputType
  }

  export type GetAlertaAggregateType<T extends AlertaAggregateArgs> = {
        [P in keyof T & keyof AggregateAlerta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlerta[P]>
      : GetScalarType<T[P], AggregateAlerta[P]>
  }




  export type AlertaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertaWhereInput
    orderBy?: AlertaOrderByWithAggregationInput | AlertaOrderByWithAggregationInput[]
    by: AlertaScalarFieldEnum[] | AlertaScalarFieldEnum
    having?: AlertaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlertaCountAggregateInputType | true
    _avg?: AlertaAvgAggregateInputType
    _sum?: AlertaSumAggregateInputType
    _min?: AlertaMinAggregateInputType
    _max?: AlertaMaxAggregateInputType
  }

  export type AlertaGroupByOutputType = {
    idAlerta: number
    idCliente: number
    tipo: $Enums.AlertaTipo
    canal: $Enums.AlertaCanal
    mensaje: string
    fechaProgramada: Date
    enviado: number
    _count: AlertaCountAggregateOutputType | null
    _avg: AlertaAvgAggregateOutputType | null
    _sum: AlertaSumAggregateOutputType | null
    _min: AlertaMinAggregateOutputType | null
    _max: AlertaMaxAggregateOutputType | null
  }

  type GetAlertaGroupByPayload<T extends AlertaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlertaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlertaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlertaGroupByOutputType[P]>
            : GetScalarType<T[P], AlertaGroupByOutputType[P]>
        }
      >
    >


  export type AlertaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idAlerta?: boolean
    idCliente?: boolean
    tipo?: boolean
    canal?: boolean
    mensaje?: boolean
    fechaProgramada?: boolean
    enviado?: boolean
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alerta"]>



  export type AlertaSelectScalar = {
    idAlerta?: boolean
    idCliente?: boolean
    tipo?: boolean
    canal?: boolean
    mensaje?: boolean
    fechaProgramada?: boolean
    enviado?: boolean
  }

  export type AlertaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idAlerta" | "idCliente" | "tipo" | "canal" | "mensaje" | "fechaProgramada" | "enviado", ExtArgs["result"]["alerta"]>
  export type AlertaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }

  export type $AlertaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alerta"
    objects: {
      cliente: Prisma.$ClientePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idAlerta: number
      idCliente: number
      tipo: $Enums.AlertaTipo
      canal: $Enums.AlertaCanal
      mensaje: string
      fechaProgramada: Date
      enviado: number
    }, ExtArgs["result"]["alerta"]>
    composites: {}
  }

  type AlertaGetPayload<S extends boolean | null | undefined | AlertaDefaultArgs> = $Result.GetResult<Prisma.$AlertaPayload, S>

  type AlertaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlertaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlertaCountAggregateInputType | true
    }

  export interface AlertaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alerta'], meta: { name: 'Alerta' } }
    /**
     * Find zero or one Alerta that matches the filter.
     * @param {AlertaFindUniqueArgs} args - Arguments to find a Alerta
     * @example
     * // Get one Alerta
     * const alerta = await prisma.alerta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlertaFindUniqueArgs>(args: SelectSubset<T, AlertaFindUniqueArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Alerta that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlertaFindUniqueOrThrowArgs} args - Arguments to find a Alerta
     * @example
     * // Get one Alerta
     * const alerta = await prisma.alerta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlertaFindUniqueOrThrowArgs>(args: SelectSubset<T, AlertaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alerta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaFindFirstArgs} args - Arguments to find a Alerta
     * @example
     * // Get one Alerta
     * const alerta = await prisma.alerta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlertaFindFirstArgs>(args?: SelectSubset<T, AlertaFindFirstArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alerta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaFindFirstOrThrowArgs} args - Arguments to find a Alerta
     * @example
     * // Get one Alerta
     * const alerta = await prisma.alerta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlertaFindFirstOrThrowArgs>(args?: SelectSubset<T, AlertaFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Alertas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alertas
     * const alertas = await prisma.alerta.findMany()
     * 
     * // Get first 10 Alertas
     * const alertas = await prisma.alerta.findMany({ take: 10 })
     * 
     * // Only select the `idAlerta`
     * const alertaWithIdAlertaOnly = await prisma.alerta.findMany({ select: { idAlerta: true } })
     * 
     */
    findMany<T extends AlertaFindManyArgs>(args?: SelectSubset<T, AlertaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Alerta.
     * @param {AlertaCreateArgs} args - Arguments to create a Alerta.
     * @example
     * // Create one Alerta
     * const Alerta = await prisma.alerta.create({
     *   data: {
     *     // ... data to create a Alerta
     *   }
     * })
     * 
     */
    create<T extends AlertaCreateArgs>(args: SelectSubset<T, AlertaCreateArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Alertas.
     * @param {AlertaCreateManyArgs} args - Arguments to create many Alertas.
     * @example
     * // Create many Alertas
     * const alerta = await prisma.alerta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlertaCreateManyArgs>(args?: SelectSubset<T, AlertaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alerta.
     * @param {AlertaDeleteArgs} args - Arguments to delete one Alerta.
     * @example
     * // Delete one Alerta
     * const Alerta = await prisma.alerta.delete({
     *   where: {
     *     // ... filter to delete one Alerta
     *   }
     * })
     * 
     */
    delete<T extends AlertaDeleteArgs>(args: SelectSubset<T, AlertaDeleteArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Alerta.
     * @param {AlertaUpdateArgs} args - Arguments to update one Alerta.
     * @example
     * // Update one Alerta
     * const alerta = await prisma.alerta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlertaUpdateArgs>(args: SelectSubset<T, AlertaUpdateArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Alertas.
     * @param {AlertaDeleteManyArgs} args - Arguments to filter Alertas to delete.
     * @example
     * // Delete a few Alertas
     * const { count } = await prisma.alerta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlertaDeleteManyArgs>(args?: SelectSubset<T, AlertaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alertas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alertas
     * const alerta = await prisma.alerta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlertaUpdateManyArgs>(args: SelectSubset<T, AlertaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alerta.
     * @param {AlertaUpsertArgs} args - Arguments to update or create a Alerta.
     * @example
     * // Update or create a Alerta
     * const alerta = await prisma.alerta.upsert({
     *   create: {
     *     // ... data to create a Alerta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alerta we want to update
     *   }
     * })
     */
    upsert<T extends AlertaUpsertArgs>(args: SelectSubset<T, AlertaUpsertArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Alertas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaCountArgs} args - Arguments to filter Alertas to count.
     * @example
     * // Count the number of Alertas
     * const count = await prisma.alerta.count({
     *   where: {
     *     // ... the filter for the Alertas we want to count
     *   }
     * })
    **/
    count<T extends AlertaCountArgs>(
      args?: Subset<T, AlertaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlertaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alerta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlertaAggregateArgs>(args: Subset<T, AlertaAggregateArgs>): Prisma.PrismaPromise<GetAlertaAggregateType<T>>

    /**
     * Group by Alerta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlertaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlertaGroupByArgs['orderBy'] }
        : { orderBy?: AlertaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlertaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alerta model
   */
  readonly fields: AlertaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alerta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlertaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alerta model
   */
  interface AlertaFieldRefs {
    readonly idAlerta: FieldRef<"Alerta", 'Int'>
    readonly idCliente: FieldRef<"Alerta", 'Int'>
    readonly tipo: FieldRef<"Alerta", 'AlertaTipo'>
    readonly canal: FieldRef<"Alerta", 'AlertaCanal'>
    readonly mensaje: FieldRef<"Alerta", 'String'>
    readonly fechaProgramada: FieldRef<"Alerta", 'DateTime'>
    readonly enviado: FieldRef<"Alerta", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Alerta findUnique
   */
  export type AlertaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alerta
     */
    omit?: AlertaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * Filter, which Alerta to fetch.
     */
    where: AlertaWhereUniqueInput
  }

  /**
   * Alerta findUniqueOrThrow
   */
  export type AlertaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alerta
     */
    omit?: AlertaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * Filter, which Alerta to fetch.
     */
    where: AlertaWhereUniqueInput
  }

  /**
   * Alerta findFirst
   */
  export type AlertaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alerta
     */
    omit?: AlertaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * Filter, which Alerta to fetch.
     */
    where?: AlertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alertas to fetch.
     */
    orderBy?: AlertaOrderByWithRelationInput | AlertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alertas.
     */
    cursor?: AlertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alertas.
     */
    distinct?: AlertaScalarFieldEnum | AlertaScalarFieldEnum[]
  }

  /**
   * Alerta findFirstOrThrow
   */
  export type AlertaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alerta
     */
    omit?: AlertaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * Filter, which Alerta to fetch.
     */
    where?: AlertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alertas to fetch.
     */
    orderBy?: AlertaOrderByWithRelationInput | AlertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alertas.
     */
    cursor?: AlertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alertas.
     */
    distinct?: AlertaScalarFieldEnum | AlertaScalarFieldEnum[]
  }

  /**
   * Alerta findMany
   */
  export type AlertaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alerta
     */
    omit?: AlertaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * Filter, which Alertas to fetch.
     */
    where?: AlertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alertas to fetch.
     */
    orderBy?: AlertaOrderByWithRelationInput | AlertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alertas.
     */
    cursor?: AlertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alertas.
     */
    skip?: number
    distinct?: AlertaScalarFieldEnum | AlertaScalarFieldEnum[]
  }

  /**
   * Alerta create
   */
  export type AlertaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alerta
     */
    omit?: AlertaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * The data needed to create a Alerta.
     */
    data: XOR<AlertaCreateInput, AlertaUncheckedCreateInput>
  }

  /**
   * Alerta createMany
   */
  export type AlertaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alertas.
     */
    data: AlertaCreateManyInput | AlertaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alerta update
   */
  export type AlertaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alerta
     */
    omit?: AlertaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * The data needed to update a Alerta.
     */
    data: XOR<AlertaUpdateInput, AlertaUncheckedUpdateInput>
    /**
     * Choose, which Alerta to update.
     */
    where: AlertaWhereUniqueInput
  }

  /**
   * Alerta updateMany
   */
  export type AlertaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alertas.
     */
    data: XOR<AlertaUpdateManyMutationInput, AlertaUncheckedUpdateManyInput>
    /**
     * Filter which Alertas to update
     */
    where?: AlertaWhereInput
    /**
     * Limit how many Alertas to update.
     */
    limit?: number
  }

  /**
   * Alerta upsert
   */
  export type AlertaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alerta
     */
    omit?: AlertaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * The filter to search for the Alerta to update in case it exists.
     */
    where: AlertaWhereUniqueInput
    /**
     * In case the Alerta found by the `where` argument doesn't exist, create a new Alerta with this data.
     */
    create: XOR<AlertaCreateInput, AlertaUncheckedCreateInput>
    /**
     * In case the Alerta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlertaUpdateInput, AlertaUncheckedUpdateInput>
  }

  /**
   * Alerta delete
   */
  export type AlertaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alerta
     */
    omit?: AlertaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * Filter which Alerta to delete.
     */
    where: AlertaWhereUniqueInput
  }

  /**
   * Alerta deleteMany
   */
  export type AlertaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alertas to delete
     */
    where?: AlertaWhereInput
    /**
     * Limit how many Alertas to delete.
     */
    limit?: number
  }

  /**
   * Alerta without action
   */
  export type AlertaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alerta
     */
    omit?: AlertaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClienteScalarFieldEnum: {
    idCliente: 'idCliente',
    rut: 'rut',
    nombre: 'nombre',
    telefono: 'telefono',
    correo: 'correo',
    direccion: 'direccion',
    sector: 'sector',
    fechaCreacion: 'fechaCreacion',
    idVendedor: 'idVendedor'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const OperativoScalarFieldEnum: {
    idOperativo: 'idOperativo',
    nombre: 'nombre',
    fecha: 'fecha',
    lugar: 'lugar',
    cupos: 'cupos'
  };

  export type OperativoScalarFieldEnum = (typeof OperativoScalarFieldEnum)[keyof typeof OperativoScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    idUsuario: 'idUsuario',
    nombre: 'nombre',
    correo: 'correo',
    hashPassword: 'hashPassword',
    activo: 'activo'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const RolScalarFieldEnum: {
    idRol: 'idRol',
    nombre: 'nombre'
  };

  export type RolScalarFieldEnum = (typeof RolScalarFieldEnum)[keyof typeof RolScalarFieldEnum]


  export const UsuarioRolScalarFieldEnum: {
    idUsuario: 'idUsuario',
    idRol: 'idRol'
  };

  export type UsuarioRolScalarFieldEnum = (typeof UsuarioRolScalarFieldEnum)[keyof typeof UsuarioRolScalarFieldEnum]


  export const CitaScalarFieldEnum: {
    idCita: 'idCita',
    idCliente: 'idCliente',
    idOperativo: 'idOperativo',
    fechaHora: 'fechaHora',
    estado: 'estado'
  };

  export type CitaScalarFieldEnum = (typeof CitaScalarFieldEnum)[keyof typeof CitaScalarFieldEnum]


  export const FichaClinicaScalarFieldEnum: {
    idFicha: 'idFicha',
    idCita: 'idCita',
    antecedentesGenerales: 'antecedentesGenerales',
    antecedentesOftalmologicos: 'antecedentesOftalmologicos',
    observaciones: 'observaciones',
    fechaRegistro: 'fechaRegistro'
  };

  export type FichaClinicaScalarFieldEnum = (typeof FichaClinicaScalarFieldEnum)[keyof typeof FichaClinicaScalarFieldEnum]


  export const RecetaScalarFieldEnum: {
    idReceta: 'idReceta',
    idFicha: 'idFicha',
    odEsfera: 'odEsfera',
    odCilindro: 'odCilindro',
    odEje: 'odEje',
    oiEsfera: 'oiEsfera',
    oiCilindro: 'oiCilindro',
    oiEje: 'oiEje',
    adicion: 'adicion',
    pd: 'pd',
    vigenciaDias: 'vigenciaDias',
    fechaEmision: 'fechaEmision'
  };

  export type RecetaScalarFieldEnum = (typeof RecetaScalarFieldEnum)[keyof typeof RecetaScalarFieldEnum]


  export const ProductoScalarFieldEnum: {
    idProducto: 'idProducto',
    codigo: 'codigo',
    nombre: 'nombre',
    precio: 'precio',
    tipo: 'tipo'
  };

  export type ProductoScalarFieldEnum = (typeof ProductoScalarFieldEnum)[keyof typeof ProductoScalarFieldEnum]


  export const VentaScalarFieldEnum: {
    idVenta: 'idVenta',
    idCliente: 'idCliente',
    idReceta: 'idReceta',
    fechaVenta: 'fechaVenta',
    total: 'total'
  };

  export type VentaScalarFieldEnum = (typeof VentaScalarFieldEnum)[keyof typeof VentaScalarFieldEnum]


  export const ItemVentaScalarFieldEnum: {
    idItem: 'idItem',
    idVenta: 'idVenta',
    idProducto: 'idProducto',
    cantidad: 'cantidad',
    precioUnitario: 'precioUnitario'
  };

  export type ItemVentaScalarFieldEnum = (typeof ItemVentaScalarFieldEnum)[keyof typeof ItemVentaScalarFieldEnum]


  export const GarantiaScalarFieldEnum: {
    idGarantia: 'idGarantia',
    idItem: 'idItem',
    fechaInicio: 'fechaInicio',
    fechaFin: 'fechaFin',
    condiciones: 'condiciones'
  };

  export type GarantiaScalarFieldEnum = (typeof GarantiaScalarFieldEnum)[keyof typeof GarantiaScalarFieldEnum]


  export const AlertaScalarFieldEnum: {
    idAlerta: 'idAlerta',
    idCliente: 'idCliente',
    tipo: 'tipo',
    canal: 'canal',
    mensaje: 'mensaje',
    fechaProgramada: 'fechaProgramada',
    enviado: 'enviado'
  };

  export type AlertaScalarFieldEnum = (typeof AlertaScalarFieldEnum)[keyof typeof AlertaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const ClienteOrderByRelevanceFieldEnum: {
    rut: 'rut',
    nombre: 'nombre',
    telefono: 'telefono',
    correo: 'correo',
    direccion: 'direccion',
    sector: 'sector'
  };

  export type ClienteOrderByRelevanceFieldEnum = (typeof ClienteOrderByRelevanceFieldEnum)[keyof typeof ClienteOrderByRelevanceFieldEnum]


  export const OperativoOrderByRelevanceFieldEnum: {
    nombre: 'nombre',
    lugar: 'lugar'
  };

  export type OperativoOrderByRelevanceFieldEnum = (typeof OperativoOrderByRelevanceFieldEnum)[keyof typeof OperativoOrderByRelevanceFieldEnum]


  export const UsuarioOrderByRelevanceFieldEnum: {
    nombre: 'nombre',
    correo: 'correo',
    hashPassword: 'hashPassword'
  };

  export type UsuarioOrderByRelevanceFieldEnum = (typeof UsuarioOrderByRelevanceFieldEnum)[keyof typeof UsuarioOrderByRelevanceFieldEnum]


  export const RolOrderByRelevanceFieldEnum: {
    nombre: 'nombre'
  };

  export type RolOrderByRelevanceFieldEnum = (typeof RolOrderByRelevanceFieldEnum)[keyof typeof RolOrderByRelevanceFieldEnum]


  export const FichaClinicaOrderByRelevanceFieldEnum: {
    antecedentesGenerales: 'antecedentesGenerales',
    antecedentesOftalmologicos: 'antecedentesOftalmologicos',
    observaciones: 'observaciones'
  };

  export type FichaClinicaOrderByRelevanceFieldEnum = (typeof FichaClinicaOrderByRelevanceFieldEnum)[keyof typeof FichaClinicaOrderByRelevanceFieldEnum]


  export const ProductoOrderByRelevanceFieldEnum: {
    codigo: 'codigo',
    nombre: 'nombre',
    tipo: 'tipo'
  };

  export type ProductoOrderByRelevanceFieldEnum = (typeof ProductoOrderByRelevanceFieldEnum)[keyof typeof ProductoOrderByRelevanceFieldEnum]


  export const GarantiaOrderByRelevanceFieldEnum: {
    condiciones: 'condiciones'
  };

  export type GarantiaOrderByRelevanceFieldEnum = (typeof GarantiaOrderByRelevanceFieldEnum)[keyof typeof GarantiaOrderByRelevanceFieldEnum]


  export const AlertaOrderByRelevanceFieldEnum: {
    mensaje: 'mensaje'
  };

  export type AlertaOrderByRelevanceFieldEnum = (typeof AlertaOrderByRelevanceFieldEnum)[keyof typeof AlertaOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'CitaEstado'
   */
  export type EnumCitaEstadoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CitaEstado'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'AlertaTipo'
   */
  export type EnumAlertaTipoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertaTipo'>
    


  /**
   * Reference to a field of type 'AlertaCanal'
   */
  export type EnumAlertaCanalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertaCanal'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    idCliente?: IntFilter<"Cliente"> | number
    rut?: StringFilter<"Cliente"> | string
    nombre?: StringFilter<"Cliente"> | string
    telefono?: StringNullableFilter<"Cliente"> | string | null
    correo?: StringNullableFilter<"Cliente"> | string | null
    direccion?: StringNullableFilter<"Cliente"> | string | null
    sector?: StringNullableFilter<"Cliente"> | string | null
    fechaCreacion?: DateTimeFilter<"Cliente"> | Date | string
    idVendedor?: IntNullableFilter<"Cliente"> | number | null
    vendedor?: XOR<UsuarioNullableScalarRelationFilter, UsuarioWhereInput> | null
    alertas?: AlertaListRelationFilter
    citas?: CitaListRelationFilter
    ventas?: VentaListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    idCliente?: SortOrder
    rut?: SortOrder
    nombre?: SortOrder
    telefono?: SortOrderInput | SortOrder
    correo?: SortOrderInput | SortOrder
    direccion?: SortOrderInput | SortOrder
    sector?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrder
    idVendedor?: SortOrderInput | SortOrder
    vendedor?: UsuarioOrderByWithRelationInput
    alertas?: AlertaOrderByRelationAggregateInput
    citas?: CitaOrderByRelationAggregateInput
    ventas?: VentaOrderByRelationAggregateInput
    _relevance?: ClienteOrderByRelevanceInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    idCliente?: number
    rut?: string
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    nombre?: StringFilter<"Cliente"> | string
    telefono?: StringNullableFilter<"Cliente"> | string | null
    correo?: StringNullableFilter<"Cliente"> | string | null
    direccion?: StringNullableFilter<"Cliente"> | string | null
    sector?: StringNullableFilter<"Cliente"> | string | null
    fechaCreacion?: DateTimeFilter<"Cliente"> | Date | string
    idVendedor?: IntNullableFilter<"Cliente"> | number | null
    vendedor?: XOR<UsuarioNullableScalarRelationFilter, UsuarioWhereInput> | null
    alertas?: AlertaListRelationFilter
    citas?: CitaListRelationFilter
    ventas?: VentaListRelationFilter
  }, "idCliente" | "rut">

  export type ClienteOrderByWithAggregationInput = {
    idCliente?: SortOrder
    rut?: SortOrder
    nombre?: SortOrder
    telefono?: SortOrderInput | SortOrder
    correo?: SortOrderInput | SortOrder
    direccion?: SortOrderInput | SortOrder
    sector?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrder
    idVendedor?: SortOrderInput | SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    idCliente?: IntWithAggregatesFilter<"Cliente"> | number
    rut?: StringWithAggregatesFilter<"Cliente"> | string
    nombre?: StringWithAggregatesFilter<"Cliente"> | string
    telefono?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    correo?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    direccion?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    sector?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    fechaCreacion?: DateTimeWithAggregatesFilter<"Cliente"> | Date | string
    idVendedor?: IntNullableWithAggregatesFilter<"Cliente"> | number | null
  }

  export type OperativoWhereInput = {
    AND?: OperativoWhereInput | OperativoWhereInput[]
    OR?: OperativoWhereInput[]
    NOT?: OperativoWhereInput | OperativoWhereInput[]
    idOperativo?: IntFilter<"Operativo"> | number
    nombre?: StringFilter<"Operativo"> | string
    fecha?: DateTimeFilter<"Operativo"> | Date | string
    lugar?: StringNullableFilter<"Operativo"> | string | null
    cupos?: IntNullableFilter<"Operativo"> | number | null
    citas?: CitaListRelationFilter
  }

  export type OperativoOrderByWithRelationInput = {
    idOperativo?: SortOrder
    nombre?: SortOrder
    fecha?: SortOrder
    lugar?: SortOrderInput | SortOrder
    cupos?: SortOrderInput | SortOrder
    citas?: CitaOrderByRelationAggregateInput
    _relevance?: OperativoOrderByRelevanceInput
  }

  export type OperativoWhereUniqueInput = Prisma.AtLeast<{
    idOperativo?: number
    AND?: OperativoWhereInput | OperativoWhereInput[]
    OR?: OperativoWhereInput[]
    NOT?: OperativoWhereInput | OperativoWhereInput[]
    nombre?: StringFilter<"Operativo"> | string
    fecha?: DateTimeFilter<"Operativo"> | Date | string
    lugar?: StringNullableFilter<"Operativo"> | string | null
    cupos?: IntNullableFilter<"Operativo"> | number | null
    citas?: CitaListRelationFilter
  }, "idOperativo">

  export type OperativoOrderByWithAggregationInput = {
    idOperativo?: SortOrder
    nombre?: SortOrder
    fecha?: SortOrder
    lugar?: SortOrderInput | SortOrder
    cupos?: SortOrderInput | SortOrder
    _count?: OperativoCountOrderByAggregateInput
    _avg?: OperativoAvgOrderByAggregateInput
    _max?: OperativoMaxOrderByAggregateInput
    _min?: OperativoMinOrderByAggregateInput
    _sum?: OperativoSumOrderByAggregateInput
  }

  export type OperativoScalarWhereWithAggregatesInput = {
    AND?: OperativoScalarWhereWithAggregatesInput | OperativoScalarWhereWithAggregatesInput[]
    OR?: OperativoScalarWhereWithAggregatesInput[]
    NOT?: OperativoScalarWhereWithAggregatesInput | OperativoScalarWhereWithAggregatesInput[]
    idOperativo?: IntWithAggregatesFilter<"Operativo"> | number
    nombre?: StringWithAggregatesFilter<"Operativo"> | string
    fecha?: DateTimeWithAggregatesFilter<"Operativo"> | Date | string
    lugar?: StringNullableWithAggregatesFilter<"Operativo"> | string | null
    cupos?: IntNullableWithAggregatesFilter<"Operativo"> | number | null
  }

  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    idUsuario?: IntFilter<"Usuario"> | number
    nombre?: StringFilter<"Usuario"> | string
    correo?: StringFilter<"Usuario"> | string
    hashPassword?: StringFilter<"Usuario"> | string
    activo?: IntFilter<"Usuario"> | number
    roles?: UsuarioRolListRelationFilter
    clientesCaptados?: ClienteListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    idUsuario?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    hashPassword?: SortOrder
    activo?: SortOrder
    roles?: UsuarioRolOrderByRelationAggregateInput
    clientesCaptados?: ClienteOrderByRelationAggregateInput
    _relevance?: UsuarioOrderByRelevanceInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    idUsuario?: number
    correo?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nombre?: StringFilter<"Usuario"> | string
    hashPassword?: StringFilter<"Usuario"> | string
    activo?: IntFilter<"Usuario"> | number
    roles?: UsuarioRolListRelationFilter
    clientesCaptados?: ClienteListRelationFilter
  }, "idUsuario" | "correo">

  export type UsuarioOrderByWithAggregationInput = {
    idUsuario?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    hashPassword?: SortOrder
    activo?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    idUsuario?: IntWithAggregatesFilter<"Usuario"> | number
    nombre?: StringWithAggregatesFilter<"Usuario"> | string
    correo?: StringWithAggregatesFilter<"Usuario"> | string
    hashPassword?: StringWithAggregatesFilter<"Usuario"> | string
    activo?: IntWithAggregatesFilter<"Usuario"> | number
  }

  export type RolWhereInput = {
    AND?: RolWhereInput | RolWhereInput[]
    OR?: RolWhereInput[]
    NOT?: RolWhereInput | RolWhereInput[]
    idRol?: IntFilter<"Rol"> | number
    nombre?: StringFilter<"Rol"> | string
    usuarios?: UsuarioRolListRelationFilter
  }

  export type RolOrderByWithRelationInput = {
    idRol?: SortOrder
    nombre?: SortOrder
    usuarios?: UsuarioRolOrderByRelationAggregateInput
    _relevance?: RolOrderByRelevanceInput
  }

  export type RolWhereUniqueInput = Prisma.AtLeast<{
    idRol?: number
    nombre?: string
    AND?: RolWhereInput | RolWhereInput[]
    OR?: RolWhereInput[]
    NOT?: RolWhereInput | RolWhereInput[]
    usuarios?: UsuarioRolListRelationFilter
  }, "idRol" | "nombre">

  export type RolOrderByWithAggregationInput = {
    idRol?: SortOrder
    nombre?: SortOrder
    _count?: RolCountOrderByAggregateInput
    _avg?: RolAvgOrderByAggregateInput
    _max?: RolMaxOrderByAggregateInput
    _min?: RolMinOrderByAggregateInput
    _sum?: RolSumOrderByAggregateInput
  }

  export type RolScalarWhereWithAggregatesInput = {
    AND?: RolScalarWhereWithAggregatesInput | RolScalarWhereWithAggregatesInput[]
    OR?: RolScalarWhereWithAggregatesInput[]
    NOT?: RolScalarWhereWithAggregatesInput | RolScalarWhereWithAggregatesInput[]
    idRol?: IntWithAggregatesFilter<"Rol"> | number
    nombre?: StringWithAggregatesFilter<"Rol"> | string
  }

  export type UsuarioRolWhereInput = {
    AND?: UsuarioRolWhereInput | UsuarioRolWhereInput[]
    OR?: UsuarioRolWhereInput[]
    NOT?: UsuarioRolWhereInput | UsuarioRolWhereInput[]
    idUsuario?: IntFilter<"UsuarioRol"> | number
    idRol?: IntFilter<"UsuarioRol"> | number
    rol?: XOR<RolScalarRelationFilter, RolWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type UsuarioRolOrderByWithRelationInput = {
    idUsuario?: SortOrder
    idRol?: SortOrder
    rol?: RolOrderByWithRelationInput
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type UsuarioRolWhereUniqueInput = Prisma.AtLeast<{
    idUsuario_idRol?: UsuarioRolIdUsuarioIdRolCompoundUniqueInput
    AND?: UsuarioRolWhereInput | UsuarioRolWhereInput[]
    OR?: UsuarioRolWhereInput[]
    NOT?: UsuarioRolWhereInput | UsuarioRolWhereInput[]
    idUsuario?: IntFilter<"UsuarioRol"> | number
    idRol?: IntFilter<"UsuarioRol"> | number
    rol?: XOR<RolScalarRelationFilter, RolWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "idUsuario_idRol">

  export type UsuarioRolOrderByWithAggregationInput = {
    idUsuario?: SortOrder
    idRol?: SortOrder
    _count?: UsuarioRolCountOrderByAggregateInput
    _avg?: UsuarioRolAvgOrderByAggregateInput
    _max?: UsuarioRolMaxOrderByAggregateInput
    _min?: UsuarioRolMinOrderByAggregateInput
    _sum?: UsuarioRolSumOrderByAggregateInput
  }

  export type UsuarioRolScalarWhereWithAggregatesInput = {
    AND?: UsuarioRolScalarWhereWithAggregatesInput | UsuarioRolScalarWhereWithAggregatesInput[]
    OR?: UsuarioRolScalarWhereWithAggregatesInput[]
    NOT?: UsuarioRolScalarWhereWithAggregatesInput | UsuarioRolScalarWhereWithAggregatesInput[]
    idUsuario?: IntWithAggregatesFilter<"UsuarioRol"> | number
    idRol?: IntWithAggregatesFilter<"UsuarioRol"> | number
  }

  export type CitaWhereInput = {
    AND?: CitaWhereInput | CitaWhereInput[]
    OR?: CitaWhereInput[]
    NOT?: CitaWhereInput | CitaWhereInput[]
    idCita?: IntFilter<"Cita"> | number
    idCliente?: IntFilter<"Cita"> | number
    idOperativo?: IntNullableFilter<"Cita"> | number | null
    fechaHora?: DateTimeFilter<"Cita"> | Date | string
    estado?: EnumCitaEstadoFilter<"Cita"> | $Enums.CitaEstado
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    operativo?: XOR<OperativoNullableScalarRelationFilter, OperativoWhereInput> | null
    ficha?: XOR<FichaClinicaNullableScalarRelationFilter, FichaClinicaWhereInput> | null
  }

  export type CitaOrderByWithRelationInput = {
    idCita?: SortOrder
    idCliente?: SortOrder
    idOperativo?: SortOrderInput | SortOrder
    fechaHora?: SortOrder
    estado?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
    operativo?: OperativoOrderByWithRelationInput
    ficha?: FichaClinicaOrderByWithRelationInput
  }

  export type CitaWhereUniqueInput = Prisma.AtLeast<{
    idCita?: number
    AND?: CitaWhereInput | CitaWhereInput[]
    OR?: CitaWhereInput[]
    NOT?: CitaWhereInput | CitaWhereInput[]
    idCliente?: IntFilter<"Cita"> | number
    idOperativo?: IntNullableFilter<"Cita"> | number | null
    fechaHora?: DateTimeFilter<"Cita"> | Date | string
    estado?: EnumCitaEstadoFilter<"Cita"> | $Enums.CitaEstado
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    operativo?: XOR<OperativoNullableScalarRelationFilter, OperativoWhereInput> | null
    ficha?: XOR<FichaClinicaNullableScalarRelationFilter, FichaClinicaWhereInput> | null
  }, "idCita">

  export type CitaOrderByWithAggregationInput = {
    idCita?: SortOrder
    idCliente?: SortOrder
    idOperativo?: SortOrderInput | SortOrder
    fechaHora?: SortOrder
    estado?: SortOrder
    _count?: CitaCountOrderByAggregateInput
    _avg?: CitaAvgOrderByAggregateInput
    _max?: CitaMaxOrderByAggregateInput
    _min?: CitaMinOrderByAggregateInput
    _sum?: CitaSumOrderByAggregateInput
  }

  export type CitaScalarWhereWithAggregatesInput = {
    AND?: CitaScalarWhereWithAggregatesInput | CitaScalarWhereWithAggregatesInput[]
    OR?: CitaScalarWhereWithAggregatesInput[]
    NOT?: CitaScalarWhereWithAggregatesInput | CitaScalarWhereWithAggregatesInput[]
    idCita?: IntWithAggregatesFilter<"Cita"> | number
    idCliente?: IntWithAggregatesFilter<"Cita"> | number
    idOperativo?: IntNullableWithAggregatesFilter<"Cita"> | number | null
    fechaHora?: DateTimeWithAggregatesFilter<"Cita"> | Date | string
    estado?: EnumCitaEstadoWithAggregatesFilter<"Cita"> | $Enums.CitaEstado
  }

  export type FichaClinicaWhereInput = {
    AND?: FichaClinicaWhereInput | FichaClinicaWhereInput[]
    OR?: FichaClinicaWhereInput[]
    NOT?: FichaClinicaWhereInput | FichaClinicaWhereInput[]
    idFicha?: IntFilter<"FichaClinica"> | number
    idCita?: IntFilter<"FichaClinica"> | number
    antecedentesGenerales?: StringNullableFilter<"FichaClinica"> | string | null
    antecedentesOftalmologicos?: StringNullableFilter<"FichaClinica"> | string | null
    observaciones?: StringNullableFilter<"FichaClinica"> | string | null
    fechaRegistro?: DateTimeFilter<"FichaClinica"> | Date | string
    cita?: XOR<CitaScalarRelationFilter, CitaWhereInput>
    recetas?: RecetaListRelationFilter
  }

  export type FichaClinicaOrderByWithRelationInput = {
    idFicha?: SortOrder
    idCita?: SortOrder
    antecedentesGenerales?: SortOrderInput | SortOrder
    antecedentesOftalmologicos?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    fechaRegistro?: SortOrder
    cita?: CitaOrderByWithRelationInput
    recetas?: RecetaOrderByRelationAggregateInput
    _relevance?: FichaClinicaOrderByRelevanceInput
  }

  export type FichaClinicaWhereUniqueInput = Prisma.AtLeast<{
    idFicha?: number
    idCita?: number
    AND?: FichaClinicaWhereInput | FichaClinicaWhereInput[]
    OR?: FichaClinicaWhereInput[]
    NOT?: FichaClinicaWhereInput | FichaClinicaWhereInput[]
    antecedentesGenerales?: StringNullableFilter<"FichaClinica"> | string | null
    antecedentesOftalmologicos?: StringNullableFilter<"FichaClinica"> | string | null
    observaciones?: StringNullableFilter<"FichaClinica"> | string | null
    fechaRegistro?: DateTimeFilter<"FichaClinica"> | Date | string
    cita?: XOR<CitaScalarRelationFilter, CitaWhereInput>
    recetas?: RecetaListRelationFilter
  }, "idFicha" | "idCita">

  export type FichaClinicaOrderByWithAggregationInput = {
    idFicha?: SortOrder
    idCita?: SortOrder
    antecedentesGenerales?: SortOrderInput | SortOrder
    antecedentesOftalmologicos?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    fechaRegistro?: SortOrder
    _count?: FichaClinicaCountOrderByAggregateInput
    _avg?: FichaClinicaAvgOrderByAggregateInput
    _max?: FichaClinicaMaxOrderByAggregateInput
    _min?: FichaClinicaMinOrderByAggregateInput
    _sum?: FichaClinicaSumOrderByAggregateInput
  }

  export type FichaClinicaScalarWhereWithAggregatesInput = {
    AND?: FichaClinicaScalarWhereWithAggregatesInput | FichaClinicaScalarWhereWithAggregatesInput[]
    OR?: FichaClinicaScalarWhereWithAggregatesInput[]
    NOT?: FichaClinicaScalarWhereWithAggregatesInput | FichaClinicaScalarWhereWithAggregatesInput[]
    idFicha?: IntWithAggregatesFilter<"FichaClinica"> | number
    idCita?: IntWithAggregatesFilter<"FichaClinica"> | number
    antecedentesGenerales?: StringNullableWithAggregatesFilter<"FichaClinica"> | string | null
    antecedentesOftalmologicos?: StringNullableWithAggregatesFilter<"FichaClinica"> | string | null
    observaciones?: StringNullableWithAggregatesFilter<"FichaClinica"> | string | null
    fechaRegistro?: DateTimeWithAggregatesFilter<"FichaClinica"> | Date | string
  }

  export type RecetaWhereInput = {
    AND?: RecetaWhereInput | RecetaWhereInput[]
    OR?: RecetaWhereInput[]
    NOT?: RecetaWhereInput | RecetaWhereInput[]
    idReceta?: IntFilter<"Receta"> | number
    idFicha?: IntFilter<"Receta"> | number
    odEsfera?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    odCilindro?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    odEje?: IntNullableFilter<"Receta"> | number | null
    oiEsfera?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    oiEje?: IntNullableFilter<"Receta"> | number | null
    adicion?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    pd?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: IntNullableFilter<"Receta"> | number | null
    fechaEmision?: DateTimeFilter<"Receta"> | Date | string
    ficha?: XOR<FichaClinicaScalarRelationFilter, FichaClinicaWhereInput>
    ventas?: VentaListRelationFilter
  }

  export type RecetaOrderByWithRelationInput = {
    idReceta?: SortOrder
    idFicha?: SortOrder
    odEsfera?: SortOrderInput | SortOrder
    odCilindro?: SortOrderInput | SortOrder
    odEje?: SortOrderInput | SortOrder
    oiEsfera?: SortOrderInput | SortOrder
    oiCilindro?: SortOrderInput | SortOrder
    oiEje?: SortOrderInput | SortOrder
    adicion?: SortOrderInput | SortOrder
    pd?: SortOrderInput | SortOrder
    vigenciaDias?: SortOrderInput | SortOrder
    fechaEmision?: SortOrder
    ficha?: FichaClinicaOrderByWithRelationInput
    ventas?: VentaOrderByRelationAggregateInput
  }

  export type RecetaWhereUniqueInput = Prisma.AtLeast<{
    idReceta?: number
    AND?: RecetaWhereInput | RecetaWhereInput[]
    OR?: RecetaWhereInput[]
    NOT?: RecetaWhereInput | RecetaWhereInput[]
    idFicha?: IntFilter<"Receta"> | number
    odEsfera?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    odCilindro?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    odEje?: IntNullableFilter<"Receta"> | number | null
    oiEsfera?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    oiEje?: IntNullableFilter<"Receta"> | number | null
    adicion?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    pd?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: IntNullableFilter<"Receta"> | number | null
    fechaEmision?: DateTimeFilter<"Receta"> | Date | string
    ficha?: XOR<FichaClinicaScalarRelationFilter, FichaClinicaWhereInput>
    ventas?: VentaListRelationFilter
  }, "idReceta">

  export type RecetaOrderByWithAggregationInput = {
    idReceta?: SortOrder
    idFicha?: SortOrder
    odEsfera?: SortOrderInput | SortOrder
    odCilindro?: SortOrderInput | SortOrder
    odEje?: SortOrderInput | SortOrder
    oiEsfera?: SortOrderInput | SortOrder
    oiCilindro?: SortOrderInput | SortOrder
    oiEje?: SortOrderInput | SortOrder
    adicion?: SortOrderInput | SortOrder
    pd?: SortOrderInput | SortOrder
    vigenciaDias?: SortOrderInput | SortOrder
    fechaEmision?: SortOrder
    _count?: RecetaCountOrderByAggregateInput
    _avg?: RecetaAvgOrderByAggregateInput
    _max?: RecetaMaxOrderByAggregateInput
    _min?: RecetaMinOrderByAggregateInput
    _sum?: RecetaSumOrderByAggregateInput
  }

  export type RecetaScalarWhereWithAggregatesInput = {
    AND?: RecetaScalarWhereWithAggregatesInput | RecetaScalarWhereWithAggregatesInput[]
    OR?: RecetaScalarWhereWithAggregatesInput[]
    NOT?: RecetaScalarWhereWithAggregatesInput | RecetaScalarWhereWithAggregatesInput[]
    idReceta?: IntWithAggregatesFilter<"Receta"> | number
    idFicha?: IntWithAggregatesFilter<"Receta"> | number
    odEsfera?: DecimalNullableWithAggregatesFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    odCilindro?: DecimalNullableWithAggregatesFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    odEje?: IntNullableWithAggregatesFilter<"Receta"> | number | null
    oiEsfera?: DecimalNullableWithAggregatesFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: DecimalNullableWithAggregatesFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    oiEje?: IntNullableWithAggregatesFilter<"Receta"> | number | null
    adicion?: DecimalNullableWithAggregatesFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    pd?: DecimalNullableWithAggregatesFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: IntNullableWithAggregatesFilter<"Receta"> | number | null
    fechaEmision?: DateTimeWithAggregatesFilter<"Receta"> | Date | string
  }

  export type ProductoWhereInput = {
    AND?: ProductoWhereInput | ProductoWhereInput[]
    OR?: ProductoWhereInput[]
    NOT?: ProductoWhereInput | ProductoWhereInput[]
    idProducto?: IntFilter<"Producto"> | number
    codigo?: StringFilter<"Producto"> | string
    nombre?: StringFilter<"Producto"> | string
    precio?: DecimalFilter<"Producto"> | Decimal | DecimalJsLike | number | string
    tipo?: StringNullableFilter<"Producto"> | string | null
    items?: ItemVentaListRelationFilter
  }

  export type ProductoOrderByWithRelationInput = {
    idProducto?: SortOrder
    codigo?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    tipo?: SortOrderInput | SortOrder
    items?: ItemVentaOrderByRelationAggregateInput
    _relevance?: ProductoOrderByRelevanceInput
  }

  export type ProductoWhereUniqueInput = Prisma.AtLeast<{
    idProducto?: number
    codigo?: string
    AND?: ProductoWhereInput | ProductoWhereInput[]
    OR?: ProductoWhereInput[]
    NOT?: ProductoWhereInput | ProductoWhereInput[]
    nombre?: StringFilter<"Producto"> | string
    precio?: DecimalFilter<"Producto"> | Decimal | DecimalJsLike | number | string
    tipo?: StringNullableFilter<"Producto"> | string | null
    items?: ItemVentaListRelationFilter
  }, "idProducto" | "codigo">

  export type ProductoOrderByWithAggregationInput = {
    idProducto?: SortOrder
    codigo?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    tipo?: SortOrderInput | SortOrder
    _count?: ProductoCountOrderByAggregateInput
    _avg?: ProductoAvgOrderByAggregateInput
    _max?: ProductoMaxOrderByAggregateInput
    _min?: ProductoMinOrderByAggregateInput
    _sum?: ProductoSumOrderByAggregateInput
  }

  export type ProductoScalarWhereWithAggregatesInput = {
    AND?: ProductoScalarWhereWithAggregatesInput | ProductoScalarWhereWithAggregatesInput[]
    OR?: ProductoScalarWhereWithAggregatesInput[]
    NOT?: ProductoScalarWhereWithAggregatesInput | ProductoScalarWhereWithAggregatesInput[]
    idProducto?: IntWithAggregatesFilter<"Producto"> | number
    codigo?: StringWithAggregatesFilter<"Producto"> | string
    nombre?: StringWithAggregatesFilter<"Producto"> | string
    precio?: DecimalWithAggregatesFilter<"Producto"> | Decimal | DecimalJsLike | number | string
    tipo?: StringNullableWithAggregatesFilter<"Producto"> | string | null
  }

  export type VentaWhereInput = {
    AND?: VentaWhereInput | VentaWhereInput[]
    OR?: VentaWhereInput[]
    NOT?: VentaWhereInput | VentaWhereInput[]
    idVenta?: IntFilter<"Venta"> | number
    idCliente?: IntFilter<"Venta"> | number
    idReceta?: IntNullableFilter<"Venta"> | number | null
    fechaVenta?: DateTimeFilter<"Venta"> | Date | string
    total?: DecimalFilter<"Venta"> | Decimal | DecimalJsLike | number | string
    items?: ItemVentaListRelationFilter
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    receta?: XOR<RecetaNullableScalarRelationFilter, RecetaWhereInput> | null
  }

  export type VentaOrderByWithRelationInput = {
    idVenta?: SortOrder
    idCliente?: SortOrder
    idReceta?: SortOrderInput | SortOrder
    fechaVenta?: SortOrder
    total?: SortOrder
    items?: ItemVentaOrderByRelationAggregateInput
    cliente?: ClienteOrderByWithRelationInput
    receta?: RecetaOrderByWithRelationInput
  }

  export type VentaWhereUniqueInput = Prisma.AtLeast<{
    idVenta?: number
    AND?: VentaWhereInput | VentaWhereInput[]
    OR?: VentaWhereInput[]
    NOT?: VentaWhereInput | VentaWhereInput[]
    idCliente?: IntFilter<"Venta"> | number
    idReceta?: IntNullableFilter<"Venta"> | number | null
    fechaVenta?: DateTimeFilter<"Venta"> | Date | string
    total?: DecimalFilter<"Venta"> | Decimal | DecimalJsLike | number | string
    items?: ItemVentaListRelationFilter
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    receta?: XOR<RecetaNullableScalarRelationFilter, RecetaWhereInput> | null
  }, "idVenta">

  export type VentaOrderByWithAggregationInput = {
    idVenta?: SortOrder
    idCliente?: SortOrder
    idReceta?: SortOrderInput | SortOrder
    fechaVenta?: SortOrder
    total?: SortOrder
    _count?: VentaCountOrderByAggregateInput
    _avg?: VentaAvgOrderByAggregateInput
    _max?: VentaMaxOrderByAggregateInput
    _min?: VentaMinOrderByAggregateInput
    _sum?: VentaSumOrderByAggregateInput
  }

  export type VentaScalarWhereWithAggregatesInput = {
    AND?: VentaScalarWhereWithAggregatesInput | VentaScalarWhereWithAggregatesInput[]
    OR?: VentaScalarWhereWithAggregatesInput[]
    NOT?: VentaScalarWhereWithAggregatesInput | VentaScalarWhereWithAggregatesInput[]
    idVenta?: IntWithAggregatesFilter<"Venta"> | number
    idCliente?: IntWithAggregatesFilter<"Venta"> | number
    idReceta?: IntNullableWithAggregatesFilter<"Venta"> | number | null
    fechaVenta?: DateTimeWithAggregatesFilter<"Venta"> | Date | string
    total?: DecimalWithAggregatesFilter<"Venta"> | Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaWhereInput = {
    AND?: ItemVentaWhereInput | ItemVentaWhereInput[]
    OR?: ItemVentaWhereInput[]
    NOT?: ItemVentaWhereInput | ItemVentaWhereInput[]
    idItem?: IntFilter<"ItemVenta"> | number
    idVenta?: IntFilter<"ItemVenta"> | number
    idProducto?: IntFilter<"ItemVenta"> | number
    cantidad?: IntFilter<"ItemVenta"> | number
    precioUnitario?: DecimalFilter<"ItemVenta"> | Decimal | DecimalJsLike | number | string
    garantia?: XOR<GarantiaNullableScalarRelationFilter, GarantiaWhereInput> | null
    producto?: XOR<ProductoScalarRelationFilter, ProductoWhereInput>
    venta?: XOR<VentaScalarRelationFilter, VentaWhereInput>
  }

  export type ItemVentaOrderByWithRelationInput = {
    idItem?: SortOrder
    idVenta?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    garantia?: GarantiaOrderByWithRelationInput
    producto?: ProductoOrderByWithRelationInput
    venta?: VentaOrderByWithRelationInput
  }

  export type ItemVentaWhereUniqueInput = Prisma.AtLeast<{
    idItem?: number
    AND?: ItemVentaWhereInput | ItemVentaWhereInput[]
    OR?: ItemVentaWhereInput[]
    NOT?: ItemVentaWhereInput | ItemVentaWhereInput[]
    idVenta?: IntFilter<"ItemVenta"> | number
    idProducto?: IntFilter<"ItemVenta"> | number
    cantidad?: IntFilter<"ItemVenta"> | number
    precioUnitario?: DecimalFilter<"ItemVenta"> | Decimal | DecimalJsLike | number | string
    garantia?: XOR<GarantiaNullableScalarRelationFilter, GarantiaWhereInput> | null
    producto?: XOR<ProductoScalarRelationFilter, ProductoWhereInput>
    venta?: XOR<VentaScalarRelationFilter, VentaWhereInput>
  }, "idItem">

  export type ItemVentaOrderByWithAggregationInput = {
    idItem?: SortOrder
    idVenta?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    _count?: ItemVentaCountOrderByAggregateInput
    _avg?: ItemVentaAvgOrderByAggregateInput
    _max?: ItemVentaMaxOrderByAggregateInput
    _min?: ItemVentaMinOrderByAggregateInput
    _sum?: ItemVentaSumOrderByAggregateInput
  }

  export type ItemVentaScalarWhereWithAggregatesInput = {
    AND?: ItemVentaScalarWhereWithAggregatesInput | ItemVentaScalarWhereWithAggregatesInput[]
    OR?: ItemVentaScalarWhereWithAggregatesInput[]
    NOT?: ItemVentaScalarWhereWithAggregatesInput | ItemVentaScalarWhereWithAggregatesInput[]
    idItem?: IntWithAggregatesFilter<"ItemVenta"> | number
    idVenta?: IntWithAggregatesFilter<"ItemVenta"> | number
    idProducto?: IntWithAggregatesFilter<"ItemVenta"> | number
    cantidad?: IntWithAggregatesFilter<"ItemVenta"> | number
    precioUnitario?: DecimalWithAggregatesFilter<"ItemVenta"> | Decimal | DecimalJsLike | number | string
  }

  export type GarantiaWhereInput = {
    AND?: GarantiaWhereInput | GarantiaWhereInput[]
    OR?: GarantiaWhereInput[]
    NOT?: GarantiaWhereInput | GarantiaWhereInput[]
    idGarantia?: IntFilter<"Garantia"> | number
    idItem?: IntFilter<"Garantia"> | number
    fechaInicio?: DateTimeFilter<"Garantia"> | Date | string
    fechaFin?: DateTimeFilter<"Garantia"> | Date | string
    condiciones?: StringNullableFilter<"Garantia"> | string | null
    item?: XOR<ItemVentaScalarRelationFilter, ItemVentaWhereInput>
  }

  export type GarantiaOrderByWithRelationInput = {
    idGarantia?: SortOrder
    idItem?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    condiciones?: SortOrderInput | SortOrder
    item?: ItemVentaOrderByWithRelationInput
    _relevance?: GarantiaOrderByRelevanceInput
  }

  export type GarantiaWhereUniqueInput = Prisma.AtLeast<{
    idGarantia?: number
    idItem?: number
    AND?: GarantiaWhereInput | GarantiaWhereInput[]
    OR?: GarantiaWhereInput[]
    NOT?: GarantiaWhereInput | GarantiaWhereInput[]
    fechaInicio?: DateTimeFilter<"Garantia"> | Date | string
    fechaFin?: DateTimeFilter<"Garantia"> | Date | string
    condiciones?: StringNullableFilter<"Garantia"> | string | null
    item?: XOR<ItemVentaScalarRelationFilter, ItemVentaWhereInput>
  }, "idGarantia" | "idItem">

  export type GarantiaOrderByWithAggregationInput = {
    idGarantia?: SortOrder
    idItem?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    condiciones?: SortOrderInput | SortOrder
    _count?: GarantiaCountOrderByAggregateInput
    _avg?: GarantiaAvgOrderByAggregateInput
    _max?: GarantiaMaxOrderByAggregateInput
    _min?: GarantiaMinOrderByAggregateInput
    _sum?: GarantiaSumOrderByAggregateInput
  }

  export type GarantiaScalarWhereWithAggregatesInput = {
    AND?: GarantiaScalarWhereWithAggregatesInput | GarantiaScalarWhereWithAggregatesInput[]
    OR?: GarantiaScalarWhereWithAggregatesInput[]
    NOT?: GarantiaScalarWhereWithAggregatesInput | GarantiaScalarWhereWithAggregatesInput[]
    idGarantia?: IntWithAggregatesFilter<"Garantia"> | number
    idItem?: IntWithAggregatesFilter<"Garantia"> | number
    fechaInicio?: DateTimeWithAggregatesFilter<"Garantia"> | Date | string
    fechaFin?: DateTimeWithAggregatesFilter<"Garantia"> | Date | string
    condiciones?: StringNullableWithAggregatesFilter<"Garantia"> | string | null
  }

  export type AlertaWhereInput = {
    AND?: AlertaWhereInput | AlertaWhereInput[]
    OR?: AlertaWhereInput[]
    NOT?: AlertaWhereInput | AlertaWhereInput[]
    idAlerta?: IntFilter<"Alerta"> | number
    idCliente?: IntFilter<"Alerta"> | number
    tipo?: EnumAlertaTipoFilter<"Alerta"> | $Enums.AlertaTipo
    canal?: EnumAlertaCanalFilter<"Alerta"> | $Enums.AlertaCanal
    mensaje?: StringFilter<"Alerta"> | string
    fechaProgramada?: DateTimeFilter<"Alerta"> | Date | string
    enviado?: IntFilter<"Alerta"> | number
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
  }

  export type AlertaOrderByWithRelationInput = {
    idAlerta?: SortOrder
    idCliente?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    mensaje?: SortOrder
    fechaProgramada?: SortOrder
    enviado?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
    _relevance?: AlertaOrderByRelevanceInput
  }

  export type AlertaWhereUniqueInput = Prisma.AtLeast<{
    idAlerta?: number
    AND?: AlertaWhereInput | AlertaWhereInput[]
    OR?: AlertaWhereInput[]
    NOT?: AlertaWhereInput | AlertaWhereInput[]
    idCliente?: IntFilter<"Alerta"> | number
    tipo?: EnumAlertaTipoFilter<"Alerta"> | $Enums.AlertaTipo
    canal?: EnumAlertaCanalFilter<"Alerta"> | $Enums.AlertaCanal
    mensaje?: StringFilter<"Alerta"> | string
    fechaProgramada?: DateTimeFilter<"Alerta"> | Date | string
    enviado?: IntFilter<"Alerta"> | number
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
  }, "idAlerta">

  export type AlertaOrderByWithAggregationInput = {
    idAlerta?: SortOrder
    idCliente?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    mensaje?: SortOrder
    fechaProgramada?: SortOrder
    enviado?: SortOrder
    _count?: AlertaCountOrderByAggregateInput
    _avg?: AlertaAvgOrderByAggregateInput
    _max?: AlertaMaxOrderByAggregateInput
    _min?: AlertaMinOrderByAggregateInput
    _sum?: AlertaSumOrderByAggregateInput
  }

  export type AlertaScalarWhereWithAggregatesInput = {
    AND?: AlertaScalarWhereWithAggregatesInput | AlertaScalarWhereWithAggregatesInput[]
    OR?: AlertaScalarWhereWithAggregatesInput[]
    NOT?: AlertaScalarWhereWithAggregatesInput | AlertaScalarWhereWithAggregatesInput[]
    idAlerta?: IntWithAggregatesFilter<"Alerta"> | number
    idCliente?: IntWithAggregatesFilter<"Alerta"> | number
    tipo?: EnumAlertaTipoWithAggregatesFilter<"Alerta"> | $Enums.AlertaTipo
    canal?: EnumAlertaCanalWithAggregatesFilter<"Alerta"> | $Enums.AlertaCanal
    mensaje?: StringWithAggregatesFilter<"Alerta"> | string
    fechaProgramada?: DateTimeWithAggregatesFilter<"Alerta"> | Date | string
    enviado?: IntWithAggregatesFilter<"Alerta"> | number
  }

  export type ClienteCreateInput = {
    rut: string
    nombre: string
    telefono?: string | null
    correo?: string | null
    direccion?: string | null
    sector?: string | null
    fechaCreacion?: Date | string
    vendedor?: UsuarioCreateNestedOneWithoutClientesCaptadosInput
    alertas?: AlertaCreateNestedManyWithoutClienteInput
    citas?: CitaCreateNestedManyWithoutClienteInput
    ventas?: VentaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    idCliente?: number
    rut: string
    nombre: string
    telefono?: string | null
    correo?: string | null
    direccion?: string | null
    sector?: string | null
    fechaCreacion?: Date | string
    idVendedor?: number | null
    alertas?: AlertaUncheckedCreateNestedManyWithoutClienteInput
    citas?: CitaUncheckedCreateNestedManyWithoutClienteInput
    ventas?: VentaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    vendedor?: UsuarioUpdateOneWithoutClientesCaptadosNestedInput
    alertas?: AlertaUpdateManyWithoutClienteNestedInput
    citas?: CitaUpdateManyWithoutClienteNestedInput
    ventas?: VentaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    idCliente?: IntFieldUpdateOperationsInput | number
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    idVendedor?: NullableIntFieldUpdateOperationsInput | number | null
    alertas?: AlertaUncheckedUpdateManyWithoutClienteNestedInput
    citas?: CitaUncheckedUpdateManyWithoutClienteNestedInput
    ventas?: VentaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    idCliente?: number
    rut: string
    nombre: string
    telefono?: string | null
    correo?: string | null
    direccion?: string | null
    sector?: string | null
    fechaCreacion?: Date | string
    idVendedor?: number | null
  }

  export type ClienteUpdateManyMutationInput = {
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    idCliente?: IntFieldUpdateOperationsInput | number
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    idVendedor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OperativoCreateInput = {
    nombre: string
    fecha: Date | string
    lugar?: string | null
    cupos?: number | null
    citas?: CitaCreateNestedManyWithoutOperativoInput
  }

  export type OperativoUncheckedCreateInput = {
    idOperativo?: number
    nombre: string
    fecha: Date | string
    lugar?: string | null
    cupos?: number | null
    citas?: CitaUncheckedCreateNestedManyWithoutOperativoInput
  }

  export type OperativoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    lugar?: NullableStringFieldUpdateOperationsInput | string | null
    cupos?: NullableIntFieldUpdateOperationsInput | number | null
    citas?: CitaUpdateManyWithoutOperativoNestedInput
  }

  export type OperativoUncheckedUpdateInput = {
    idOperativo?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    lugar?: NullableStringFieldUpdateOperationsInput | string | null
    cupos?: NullableIntFieldUpdateOperationsInput | number | null
    citas?: CitaUncheckedUpdateManyWithoutOperativoNestedInput
  }

  export type OperativoCreateManyInput = {
    idOperativo?: number
    nombre: string
    fecha: Date | string
    lugar?: string | null
    cupos?: number | null
  }

  export type OperativoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    lugar?: NullableStringFieldUpdateOperationsInput | string | null
    cupos?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OperativoUncheckedUpdateManyInput = {
    idOperativo?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    lugar?: NullableStringFieldUpdateOperationsInput | string | null
    cupos?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsuarioCreateInput = {
    nombre: string
    correo: string
    hashPassword: string
    activo?: number
    roles?: UsuarioRolCreateNestedManyWithoutUsuarioInput
    clientesCaptados?: ClienteCreateNestedManyWithoutVendedorInput
  }

  export type UsuarioUncheckedCreateInput = {
    idUsuario?: number
    nombre: string
    correo: string
    hashPassword: string
    activo?: number
    roles?: UsuarioRolUncheckedCreateNestedManyWithoutUsuarioInput
    clientesCaptados?: ClienteUncheckedCreateNestedManyWithoutVendedorInput
  }

  export type UsuarioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    roles?: UsuarioRolUpdateManyWithoutUsuarioNestedInput
    clientesCaptados?: ClienteUpdateManyWithoutVendedorNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    idUsuario?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    roles?: UsuarioRolUncheckedUpdateManyWithoutUsuarioNestedInput
    clientesCaptados?: ClienteUncheckedUpdateManyWithoutVendedorNestedInput
  }

  export type UsuarioCreateManyInput = {
    idUsuario?: number
    nombre: string
    correo: string
    hashPassword: string
    activo?: number
  }

  export type UsuarioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioUncheckedUpdateManyInput = {
    idUsuario?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type RolCreateInput = {
    nombre: string
    usuarios?: UsuarioRolCreateNestedManyWithoutRolInput
  }

  export type RolUncheckedCreateInput = {
    idRol?: number
    nombre: string
    usuarios?: UsuarioRolUncheckedCreateNestedManyWithoutRolInput
  }

  export type RolUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    usuarios?: UsuarioRolUpdateManyWithoutRolNestedInput
  }

  export type RolUncheckedUpdateInput = {
    idRol?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    usuarios?: UsuarioRolUncheckedUpdateManyWithoutRolNestedInput
  }

  export type RolCreateManyInput = {
    idRol?: number
    nombre: string
  }

  export type RolUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type RolUncheckedUpdateManyInput = {
    idRol?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioRolCreateInput = {
    rol: RolCreateNestedOneWithoutUsuariosInput
    usuario: UsuarioCreateNestedOneWithoutRolesInput
  }

  export type UsuarioRolUncheckedCreateInput = {
    idUsuario: number
    idRol: number
  }

  export type UsuarioRolUpdateInput = {
    rol?: RolUpdateOneRequiredWithoutUsuariosNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutRolesNestedInput
  }

  export type UsuarioRolUncheckedUpdateInput = {
    idUsuario?: IntFieldUpdateOperationsInput | number
    idRol?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioRolCreateManyInput = {
    idUsuario: number
    idRol: number
  }

  export type UsuarioRolUpdateManyMutationInput = {

  }

  export type UsuarioRolUncheckedUpdateManyInput = {
    idUsuario?: IntFieldUpdateOperationsInput | number
    idRol?: IntFieldUpdateOperationsInput | number
  }

  export type CitaCreateInput = {
    fechaHora: Date | string
    estado: $Enums.CitaEstado
    cliente: ClienteCreateNestedOneWithoutCitasInput
    operativo?: OperativoCreateNestedOneWithoutCitasInput
    ficha?: FichaClinicaCreateNestedOneWithoutCitaInput
  }

  export type CitaUncheckedCreateInput = {
    idCita?: number
    idCliente: number
    idOperativo?: number | null
    fechaHora: Date | string
    estado: $Enums.CitaEstado
    ficha?: FichaClinicaUncheckedCreateNestedOneWithoutCitaInput
  }

  export type CitaUpdateInput = {
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumCitaEstadoFieldUpdateOperationsInput | $Enums.CitaEstado
    cliente?: ClienteUpdateOneRequiredWithoutCitasNestedInput
    operativo?: OperativoUpdateOneWithoutCitasNestedInput
    ficha?: FichaClinicaUpdateOneWithoutCitaNestedInput
  }

  export type CitaUncheckedUpdateInput = {
    idCita?: IntFieldUpdateOperationsInput | number
    idCliente?: IntFieldUpdateOperationsInput | number
    idOperativo?: NullableIntFieldUpdateOperationsInput | number | null
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumCitaEstadoFieldUpdateOperationsInput | $Enums.CitaEstado
    ficha?: FichaClinicaUncheckedUpdateOneWithoutCitaNestedInput
  }

  export type CitaCreateManyInput = {
    idCita?: number
    idCliente: number
    idOperativo?: number | null
    fechaHora: Date | string
    estado: $Enums.CitaEstado
  }

  export type CitaUpdateManyMutationInput = {
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumCitaEstadoFieldUpdateOperationsInput | $Enums.CitaEstado
  }

  export type CitaUncheckedUpdateManyInput = {
    idCita?: IntFieldUpdateOperationsInput | number
    idCliente?: IntFieldUpdateOperationsInput | number
    idOperativo?: NullableIntFieldUpdateOperationsInput | number | null
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumCitaEstadoFieldUpdateOperationsInput | $Enums.CitaEstado
  }

  export type FichaClinicaCreateInput = {
    antecedentesGenerales?: string | null
    antecedentesOftalmologicos?: string | null
    observaciones?: string | null
    fechaRegistro?: Date | string
    cita: CitaCreateNestedOneWithoutFichaInput
    recetas?: RecetaCreateNestedManyWithoutFichaInput
  }

  export type FichaClinicaUncheckedCreateInput = {
    idFicha?: number
    idCita: number
    antecedentesGenerales?: string | null
    antecedentesOftalmologicos?: string | null
    observaciones?: string | null
    fechaRegistro?: Date | string
    recetas?: RecetaUncheckedCreateNestedManyWithoutFichaInput
  }

  export type FichaClinicaUpdateInput = {
    antecedentesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesOftalmologicos?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    cita?: CitaUpdateOneRequiredWithoutFichaNestedInput
    recetas?: RecetaUpdateManyWithoutFichaNestedInput
  }

  export type FichaClinicaUncheckedUpdateInput = {
    idFicha?: IntFieldUpdateOperationsInput | number
    idCita?: IntFieldUpdateOperationsInput | number
    antecedentesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesOftalmologicos?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    recetas?: RecetaUncheckedUpdateManyWithoutFichaNestedInput
  }

  export type FichaClinicaCreateManyInput = {
    idFicha?: number
    idCita: number
    antecedentesGenerales?: string | null
    antecedentesOftalmologicos?: string | null
    observaciones?: string | null
    fechaRegistro?: Date | string
  }

  export type FichaClinicaUpdateManyMutationInput = {
    antecedentesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesOftalmologicos?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FichaClinicaUncheckedUpdateManyInput = {
    idFicha?: IntFieldUpdateOperationsInput | number
    idCita?: IntFieldUpdateOperationsInput | number
    antecedentesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesOftalmologicos?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecetaCreateInput = {
    odEsfera?: Decimal | DecimalJsLike | number | string | null
    odCilindro?: Decimal | DecimalJsLike | number | string | null
    odEje?: number | null
    oiEsfera?: Decimal | DecimalJsLike | number | string | null
    oiCilindro?: Decimal | DecimalJsLike | number | string | null
    oiEje?: number | null
    adicion?: Decimal | DecimalJsLike | number | string | null
    pd?: Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: number | null
    fechaEmision?: Date | string
    ficha: FichaClinicaCreateNestedOneWithoutRecetasInput
    ventas?: VentaCreateNestedManyWithoutRecetaInput
  }

  export type RecetaUncheckedCreateInput = {
    idReceta?: number
    idFicha: number
    odEsfera?: Decimal | DecimalJsLike | number | string | null
    odCilindro?: Decimal | DecimalJsLike | number | string | null
    odEje?: number | null
    oiEsfera?: Decimal | DecimalJsLike | number | string | null
    oiCilindro?: Decimal | DecimalJsLike | number | string | null
    oiEje?: number | null
    adicion?: Decimal | DecimalJsLike | number | string | null
    pd?: Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: number | null
    fechaEmision?: Date | string
    ventas?: VentaUncheckedCreateNestedManyWithoutRecetaInput
  }

  export type RecetaUpdateInput = {
    odEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odEje?: NullableIntFieldUpdateOperationsInput | number | null
    oiEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiEje?: NullableIntFieldUpdateOperationsInput | number | null
    adicion?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: NullableIntFieldUpdateOperationsInput | number | null
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    ficha?: FichaClinicaUpdateOneRequiredWithoutRecetasNestedInput
    ventas?: VentaUpdateManyWithoutRecetaNestedInput
  }

  export type RecetaUncheckedUpdateInput = {
    idReceta?: IntFieldUpdateOperationsInput | number
    idFicha?: IntFieldUpdateOperationsInput | number
    odEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odEje?: NullableIntFieldUpdateOperationsInput | number | null
    oiEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiEje?: NullableIntFieldUpdateOperationsInput | number | null
    adicion?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: NullableIntFieldUpdateOperationsInput | number | null
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    ventas?: VentaUncheckedUpdateManyWithoutRecetaNestedInput
  }

  export type RecetaCreateManyInput = {
    idReceta?: number
    idFicha: number
    odEsfera?: Decimal | DecimalJsLike | number | string | null
    odCilindro?: Decimal | DecimalJsLike | number | string | null
    odEje?: number | null
    oiEsfera?: Decimal | DecimalJsLike | number | string | null
    oiCilindro?: Decimal | DecimalJsLike | number | string | null
    oiEje?: number | null
    adicion?: Decimal | DecimalJsLike | number | string | null
    pd?: Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: number | null
    fechaEmision?: Date | string
  }

  export type RecetaUpdateManyMutationInput = {
    odEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odEje?: NullableIntFieldUpdateOperationsInput | number | null
    oiEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiEje?: NullableIntFieldUpdateOperationsInput | number | null
    adicion?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: NullableIntFieldUpdateOperationsInput | number | null
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecetaUncheckedUpdateManyInput = {
    idReceta?: IntFieldUpdateOperationsInput | number
    idFicha?: IntFieldUpdateOperationsInput | number
    odEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odEje?: NullableIntFieldUpdateOperationsInput | number | null
    oiEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiEje?: NullableIntFieldUpdateOperationsInput | number | null
    adicion?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: NullableIntFieldUpdateOperationsInput | number | null
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductoCreateInput = {
    codigo: string
    nombre: string
    precio: Decimal | DecimalJsLike | number | string
    tipo?: string | null
    items?: ItemVentaCreateNestedManyWithoutProductoInput
  }

  export type ProductoUncheckedCreateInput = {
    idProducto?: number
    codigo: string
    nombre: string
    precio: Decimal | DecimalJsLike | number | string
    tipo?: string | null
    items?: ItemVentaUncheckedCreateNestedManyWithoutProductoInput
  }

  export type ProductoUpdateInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
    items?: ItemVentaUpdateManyWithoutProductoNestedInput
  }

  export type ProductoUncheckedUpdateInput = {
    idProducto?: IntFieldUpdateOperationsInput | number
    codigo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
    items?: ItemVentaUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type ProductoCreateManyInput = {
    idProducto?: number
    codigo: string
    nombre: string
    precio: Decimal | DecimalJsLike | number | string
    tipo?: string | null
  }

  export type ProductoUpdateManyMutationInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductoUncheckedUpdateManyInput = {
    idProducto?: IntFieldUpdateOperationsInput | number
    codigo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VentaCreateInput = {
    fechaVenta?: Date | string
    total: Decimal | DecimalJsLike | number | string
    items?: ItemVentaCreateNestedManyWithoutVentaInput
    cliente: ClienteCreateNestedOneWithoutVentasInput
    receta?: RecetaCreateNestedOneWithoutVentasInput
  }

  export type VentaUncheckedCreateInput = {
    idVenta?: number
    idCliente: number
    idReceta?: number | null
    fechaVenta?: Date | string
    total: Decimal | DecimalJsLike | number | string
    items?: ItemVentaUncheckedCreateNestedManyWithoutVentaInput
  }

  export type VentaUpdateInput = {
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    items?: ItemVentaUpdateManyWithoutVentaNestedInput
    cliente?: ClienteUpdateOneRequiredWithoutVentasNestedInput
    receta?: RecetaUpdateOneWithoutVentasNestedInput
  }

  export type VentaUncheckedUpdateInput = {
    idVenta?: IntFieldUpdateOperationsInput | number
    idCliente?: IntFieldUpdateOperationsInput | number
    idReceta?: NullableIntFieldUpdateOperationsInput | number | null
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    items?: ItemVentaUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type VentaCreateManyInput = {
    idVenta?: number
    idCliente: number
    idReceta?: number | null
    fechaVenta?: Date | string
    total: Decimal | DecimalJsLike | number | string
  }

  export type VentaUpdateManyMutationInput = {
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type VentaUncheckedUpdateManyInput = {
    idVenta?: IntFieldUpdateOperationsInput | number
    idCliente?: IntFieldUpdateOperationsInput | number
    idReceta?: NullableIntFieldUpdateOperationsInput | number | null
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaCreateInput = {
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    garantia?: GarantiaCreateNestedOneWithoutItemInput
    producto: ProductoCreateNestedOneWithoutItemsInput
    venta: VentaCreateNestedOneWithoutItemsInput
  }

  export type ItemVentaUncheckedCreateInput = {
    idItem?: number
    idVenta: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    garantia?: GarantiaUncheckedCreateNestedOneWithoutItemInput
  }

  export type ItemVentaUpdateInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    garantia?: GarantiaUpdateOneWithoutItemNestedInput
    producto?: ProductoUpdateOneRequiredWithoutItemsNestedInput
    venta?: VentaUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ItemVentaUncheckedUpdateInput = {
    idItem?: IntFieldUpdateOperationsInput | number
    idVenta?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    garantia?: GarantiaUncheckedUpdateOneWithoutItemNestedInput
  }

  export type ItemVentaCreateManyInput = {
    idItem?: number
    idVenta: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaUpdateManyMutationInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaUncheckedUpdateManyInput = {
    idItem?: IntFieldUpdateOperationsInput | number
    idVenta?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type GarantiaCreateInput = {
    fechaInicio: Date | string
    fechaFin: Date | string
    condiciones?: string | null
    item: ItemVentaCreateNestedOneWithoutGarantiaInput
  }

  export type GarantiaUncheckedCreateInput = {
    idGarantia?: number
    idItem: number
    fechaInicio: Date | string
    fechaFin: Date | string
    condiciones?: string | null
  }

  export type GarantiaUpdateInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: DateTimeFieldUpdateOperationsInput | Date | string
    condiciones?: NullableStringFieldUpdateOperationsInput | string | null
    item?: ItemVentaUpdateOneRequiredWithoutGarantiaNestedInput
  }

  export type GarantiaUncheckedUpdateInput = {
    idGarantia?: IntFieldUpdateOperationsInput | number
    idItem?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: DateTimeFieldUpdateOperationsInput | Date | string
    condiciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GarantiaCreateManyInput = {
    idGarantia?: number
    idItem: number
    fechaInicio: Date | string
    fechaFin: Date | string
    condiciones?: string | null
  }

  export type GarantiaUpdateManyMutationInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: DateTimeFieldUpdateOperationsInput | Date | string
    condiciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GarantiaUncheckedUpdateManyInput = {
    idGarantia?: IntFieldUpdateOperationsInput | number
    idItem?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: DateTimeFieldUpdateOperationsInput | Date | string
    condiciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlertaCreateInput = {
    tipo: $Enums.AlertaTipo
    canal: $Enums.AlertaCanal
    mensaje: string
    fechaProgramada: Date | string
    enviado?: number
    cliente: ClienteCreateNestedOneWithoutAlertasInput
  }

  export type AlertaUncheckedCreateInput = {
    idAlerta?: number
    idCliente: number
    tipo: $Enums.AlertaTipo
    canal: $Enums.AlertaCanal
    mensaje: string
    fechaProgramada: Date | string
    enviado?: number
  }

  export type AlertaUpdateInput = {
    tipo?: EnumAlertaTipoFieldUpdateOperationsInput | $Enums.AlertaTipo
    canal?: EnumAlertaCanalFieldUpdateOperationsInput | $Enums.AlertaCanal
    mensaje?: StringFieldUpdateOperationsInput | string
    fechaProgramada?: DateTimeFieldUpdateOperationsInput | Date | string
    enviado?: IntFieldUpdateOperationsInput | number
    cliente?: ClienteUpdateOneRequiredWithoutAlertasNestedInput
  }

  export type AlertaUncheckedUpdateInput = {
    idAlerta?: IntFieldUpdateOperationsInput | number
    idCliente?: IntFieldUpdateOperationsInput | number
    tipo?: EnumAlertaTipoFieldUpdateOperationsInput | $Enums.AlertaTipo
    canal?: EnumAlertaCanalFieldUpdateOperationsInput | $Enums.AlertaCanal
    mensaje?: StringFieldUpdateOperationsInput | string
    fechaProgramada?: DateTimeFieldUpdateOperationsInput | Date | string
    enviado?: IntFieldUpdateOperationsInput | number
  }

  export type AlertaCreateManyInput = {
    idAlerta?: number
    idCliente: number
    tipo: $Enums.AlertaTipo
    canal: $Enums.AlertaCanal
    mensaje: string
    fechaProgramada: Date | string
    enviado?: number
  }

  export type AlertaUpdateManyMutationInput = {
    tipo?: EnumAlertaTipoFieldUpdateOperationsInput | $Enums.AlertaTipo
    canal?: EnumAlertaCanalFieldUpdateOperationsInput | $Enums.AlertaCanal
    mensaje?: StringFieldUpdateOperationsInput | string
    fechaProgramada?: DateTimeFieldUpdateOperationsInput | Date | string
    enviado?: IntFieldUpdateOperationsInput | number
  }

  export type AlertaUncheckedUpdateManyInput = {
    idAlerta?: IntFieldUpdateOperationsInput | number
    idCliente?: IntFieldUpdateOperationsInput | number
    tipo?: EnumAlertaTipoFieldUpdateOperationsInput | $Enums.AlertaTipo
    canal?: EnumAlertaCanalFieldUpdateOperationsInput | $Enums.AlertaCanal
    mensaje?: StringFieldUpdateOperationsInput | string
    fechaProgramada?: DateTimeFieldUpdateOperationsInput | Date | string
    enviado?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UsuarioNullableScalarRelationFilter = {
    is?: UsuarioWhereInput | null
    isNot?: UsuarioWhereInput | null
  }

  export type AlertaListRelationFilter = {
    every?: AlertaWhereInput
    some?: AlertaWhereInput
    none?: AlertaWhereInput
  }

  export type CitaListRelationFilter = {
    every?: CitaWhereInput
    some?: CitaWhereInput
    none?: CitaWhereInput
  }

  export type VentaListRelationFilter = {
    every?: VentaWhereInput
    some?: VentaWhereInput
    none?: VentaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AlertaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CitaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VentaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteOrderByRelevanceInput = {
    fields: ClienteOrderByRelevanceFieldEnum | ClienteOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClienteCountOrderByAggregateInput = {
    idCliente?: SortOrder
    rut?: SortOrder
    nombre?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    direccion?: SortOrder
    sector?: SortOrder
    fechaCreacion?: SortOrder
    idVendedor?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    idCliente?: SortOrder
    idVendedor?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    idCliente?: SortOrder
    rut?: SortOrder
    nombre?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    direccion?: SortOrder
    sector?: SortOrder
    fechaCreacion?: SortOrder
    idVendedor?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    idCliente?: SortOrder
    rut?: SortOrder
    nombre?: SortOrder
    telefono?: SortOrder
    correo?: SortOrder
    direccion?: SortOrder
    sector?: SortOrder
    fechaCreacion?: SortOrder
    idVendedor?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    idCliente?: SortOrder
    idVendedor?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type OperativoOrderByRelevanceInput = {
    fields: OperativoOrderByRelevanceFieldEnum | OperativoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OperativoCountOrderByAggregateInput = {
    idOperativo?: SortOrder
    nombre?: SortOrder
    fecha?: SortOrder
    lugar?: SortOrder
    cupos?: SortOrder
  }

  export type OperativoAvgOrderByAggregateInput = {
    idOperativo?: SortOrder
    cupos?: SortOrder
  }

  export type OperativoMaxOrderByAggregateInput = {
    idOperativo?: SortOrder
    nombre?: SortOrder
    fecha?: SortOrder
    lugar?: SortOrder
    cupos?: SortOrder
  }

  export type OperativoMinOrderByAggregateInput = {
    idOperativo?: SortOrder
    nombre?: SortOrder
    fecha?: SortOrder
    lugar?: SortOrder
    cupos?: SortOrder
  }

  export type OperativoSumOrderByAggregateInput = {
    idOperativo?: SortOrder
    cupos?: SortOrder
  }

  export type UsuarioRolListRelationFilter = {
    every?: UsuarioRolWhereInput
    some?: UsuarioRolWhereInput
    none?: UsuarioRolWhereInput
  }

  export type ClienteListRelationFilter = {
    every?: ClienteWhereInput
    some?: ClienteWhereInput
    none?: ClienteWhereInput
  }

  export type UsuarioRolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioOrderByRelevanceInput = {
    fields: UsuarioOrderByRelevanceFieldEnum | UsuarioOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UsuarioCountOrderByAggregateInput = {
    idUsuario?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    hashPassword?: SortOrder
    activo?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    idUsuario?: SortOrder
    activo?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    idUsuario?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    hashPassword?: SortOrder
    activo?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    idUsuario?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    hashPassword?: SortOrder
    activo?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    idUsuario?: SortOrder
    activo?: SortOrder
  }

  export type RolOrderByRelevanceInput = {
    fields: RolOrderByRelevanceFieldEnum | RolOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RolCountOrderByAggregateInput = {
    idRol?: SortOrder
    nombre?: SortOrder
  }

  export type RolAvgOrderByAggregateInput = {
    idRol?: SortOrder
  }

  export type RolMaxOrderByAggregateInput = {
    idRol?: SortOrder
    nombre?: SortOrder
  }

  export type RolMinOrderByAggregateInput = {
    idRol?: SortOrder
    nombre?: SortOrder
  }

  export type RolSumOrderByAggregateInput = {
    idRol?: SortOrder
  }

  export type RolScalarRelationFilter = {
    is?: RolWhereInput
    isNot?: RolWhereInput
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type UsuarioRolIdUsuarioIdRolCompoundUniqueInput = {
    idUsuario: number
    idRol: number
  }

  export type UsuarioRolCountOrderByAggregateInput = {
    idUsuario?: SortOrder
    idRol?: SortOrder
  }

  export type UsuarioRolAvgOrderByAggregateInput = {
    idUsuario?: SortOrder
    idRol?: SortOrder
  }

  export type UsuarioRolMaxOrderByAggregateInput = {
    idUsuario?: SortOrder
    idRol?: SortOrder
  }

  export type UsuarioRolMinOrderByAggregateInput = {
    idUsuario?: SortOrder
    idRol?: SortOrder
  }

  export type UsuarioRolSumOrderByAggregateInput = {
    idUsuario?: SortOrder
    idRol?: SortOrder
  }

  export type EnumCitaEstadoFilter<$PrismaModel = never> = {
    equals?: $Enums.CitaEstado | EnumCitaEstadoFieldRefInput<$PrismaModel>
    in?: $Enums.CitaEstado[]
    notIn?: $Enums.CitaEstado[]
    not?: NestedEnumCitaEstadoFilter<$PrismaModel> | $Enums.CitaEstado
  }

  export type ClienteScalarRelationFilter = {
    is?: ClienteWhereInput
    isNot?: ClienteWhereInput
  }

  export type OperativoNullableScalarRelationFilter = {
    is?: OperativoWhereInput | null
    isNot?: OperativoWhereInput | null
  }

  export type FichaClinicaNullableScalarRelationFilter = {
    is?: FichaClinicaWhereInput | null
    isNot?: FichaClinicaWhereInput | null
  }

  export type CitaCountOrderByAggregateInput = {
    idCita?: SortOrder
    idCliente?: SortOrder
    idOperativo?: SortOrder
    fechaHora?: SortOrder
    estado?: SortOrder
  }

  export type CitaAvgOrderByAggregateInput = {
    idCita?: SortOrder
    idCliente?: SortOrder
    idOperativo?: SortOrder
  }

  export type CitaMaxOrderByAggregateInput = {
    idCita?: SortOrder
    idCliente?: SortOrder
    idOperativo?: SortOrder
    fechaHora?: SortOrder
    estado?: SortOrder
  }

  export type CitaMinOrderByAggregateInput = {
    idCita?: SortOrder
    idCliente?: SortOrder
    idOperativo?: SortOrder
    fechaHora?: SortOrder
    estado?: SortOrder
  }

  export type CitaSumOrderByAggregateInput = {
    idCita?: SortOrder
    idCliente?: SortOrder
    idOperativo?: SortOrder
  }

  export type EnumCitaEstadoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CitaEstado | EnumCitaEstadoFieldRefInput<$PrismaModel>
    in?: $Enums.CitaEstado[]
    notIn?: $Enums.CitaEstado[]
    not?: NestedEnumCitaEstadoWithAggregatesFilter<$PrismaModel> | $Enums.CitaEstado
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCitaEstadoFilter<$PrismaModel>
    _max?: NestedEnumCitaEstadoFilter<$PrismaModel>
  }

  export type CitaScalarRelationFilter = {
    is?: CitaWhereInput
    isNot?: CitaWhereInput
  }

  export type RecetaListRelationFilter = {
    every?: RecetaWhereInput
    some?: RecetaWhereInput
    none?: RecetaWhereInput
  }

  export type RecetaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FichaClinicaOrderByRelevanceInput = {
    fields: FichaClinicaOrderByRelevanceFieldEnum | FichaClinicaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FichaClinicaCountOrderByAggregateInput = {
    idFicha?: SortOrder
    idCita?: SortOrder
    antecedentesGenerales?: SortOrder
    antecedentesOftalmologicos?: SortOrder
    observaciones?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type FichaClinicaAvgOrderByAggregateInput = {
    idFicha?: SortOrder
    idCita?: SortOrder
  }

  export type FichaClinicaMaxOrderByAggregateInput = {
    idFicha?: SortOrder
    idCita?: SortOrder
    antecedentesGenerales?: SortOrder
    antecedentesOftalmologicos?: SortOrder
    observaciones?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type FichaClinicaMinOrderByAggregateInput = {
    idFicha?: SortOrder
    idCita?: SortOrder
    antecedentesGenerales?: SortOrder
    antecedentesOftalmologicos?: SortOrder
    observaciones?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type FichaClinicaSumOrderByAggregateInput = {
    idFicha?: SortOrder
    idCita?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type FichaClinicaScalarRelationFilter = {
    is?: FichaClinicaWhereInput
    isNot?: FichaClinicaWhereInput
  }

  export type RecetaCountOrderByAggregateInput = {
    idReceta?: SortOrder
    idFicha?: SortOrder
    odEsfera?: SortOrder
    odCilindro?: SortOrder
    odEje?: SortOrder
    oiEsfera?: SortOrder
    oiCilindro?: SortOrder
    oiEje?: SortOrder
    adicion?: SortOrder
    pd?: SortOrder
    vigenciaDias?: SortOrder
    fechaEmision?: SortOrder
  }

  export type RecetaAvgOrderByAggregateInput = {
    idReceta?: SortOrder
    idFicha?: SortOrder
    odEsfera?: SortOrder
    odCilindro?: SortOrder
    odEje?: SortOrder
    oiEsfera?: SortOrder
    oiCilindro?: SortOrder
    oiEje?: SortOrder
    adicion?: SortOrder
    pd?: SortOrder
    vigenciaDias?: SortOrder
  }

  export type RecetaMaxOrderByAggregateInput = {
    idReceta?: SortOrder
    idFicha?: SortOrder
    odEsfera?: SortOrder
    odCilindro?: SortOrder
    odEje?: SortOrder
    oiEsfera?: SortOrder
    oiCilindro?: SortOrder
    oiEje?: SortOrder
    adicion?: SortOrder
    pd?: SortOrder
    vigenciaDias?: SortOrder
    fechaEmision?: SortOrder
  }

  export type RecetaMinOrderByAggregateInput = {
    idReceta?: SortOrder
    idFicha?: SortOrder
    odEsfera?: SortOrder
    odCilindro?: SortOrder
    odEje?: SortOrder
    oiEsfera?: SortOrder
    oiCilindro?: SortOrder
    oiEje?: SortOrder
    adicion?: SortOrder
    pd?: SortOrder
    vigenciaDias?: SortOrder
    fechaEmision?: SortOrder
  }

  export type RecetaSumOrderByAggregateInput = {
    idReceta?: SortOrder
    idFicha?: SortOrder
    odEsfera?: SortOrder
    odCilindro?: SortOrder
    odEje?: SortOrder
    oiEsfera?: SortOrder
    oiCilindro?: SortOrder
    oiEje?: SortOrder
    adicion?: SortOrder
    pd?: SortOrder
    vigenciaDias?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaListRelationFilter = {
    every?: ItemVentaWhereInput
    some?: ItemVentaWhereInput
    none?: ItemVentaWhereInput
  }

  export type ItemVentaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductoOrderByRelevanceInput = {
    fields: ProductoOrderByRelevanceFieldEnum | ProductoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProductoCountOrderByAggregateInput = {
    idProducto?: SortOrder
    codigo?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    tipo?: SortOrder
  }

  export type ProductoAvgOrderByAggregateInput = {
    idProducto?: SortOrder
    precio?: SortOrder
  }

  export type ProductoMaxOrderByAggregateInput = {
    idProducto?: SortOrder
    codigo?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    tipo?: SortOrder
  }

  export type ProductoMinOrderByAggregateInput = {
    idProducto?: SortOrder
    codigo?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    tipo?: SortOrder
  }

  export type ProductoSumOrderByAggregateInput = {
    idProducto?: SortOrder
    precio?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type RecetaNullableScalarRelationFilter = {
    is?: RecetaWhereInput | null
    isNot?: RecetaWhereInput | null
  }

  export type VentaCountOrderByAggregateInput = {
    idVenta?: SortOrder
    idCliente?: SortOrder
    idReceta?: SortOrder
    fechaVenta?: SortOrder
    total?: SortOrder
  }

  export type VentaAvgOrderByAggregateInput = {
    idVenta?: SortOrder
    idCliente?: SortOrder
    idReceta?: SortOrder
    total?: SortOrder
  }

  export type VentaMaxOrderByAggregateInput = {
    idVenta?: SortOrder
    idCliente?: SortOrder
    idReceta?: SortOrder
    fechaVenta?: SortOrder
    total?: SortOrder
  }

  export type VentaMinOrderByAggregateInput = {
    idVenta?: SortOrder
    idCliente?: SortOrder
    idReceta?: SortOrder
    fechaVenta?: SortOrder
    total?: SortOrder
  }

  export type VentaSumOrderByAggregateInput = {
    idVenta?: SortOrder
    idCliente?: SortOrder
    idReceta?: SortOrder
    total?: SortOrder
  }

  export type GarantiaNullableScalarRelationFilter = {
    is?: GarantiaWhereInput | null
    isNot?: GarantiaWhereInput | null
  }

  export type ProductoScalarRelationFilter = {
    is?: ProductoWhereInput
    isNot?: ProductoWhereInput
  }

  export type VentaScalarRelationFilter = {
    is?: VentaWhereInput
    isNot?: VentaWhereInput
  }

  export type ItemVentaCountOrderByAggregateInput = {
    idItem?: SortOrder
    idVenta?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type ItemVentaAvgOrderByAggregateInput = {
    idItem?: SortOrder
    idVenta?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type ItemVentaMaxOrderByAggregateInput = {
    idItem?: SortOrder
    idVenta?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type ItemVentaMinOrderByAggregateInput = {
    idItem?: SortOrder
    idVenta?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type ItemVentaSumOrderByAggregateInput = {
    idItem?: SortOrder
    idVenta?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type ItemVentaScalarRelationFilter = {
    is?: ItemVentaWhereInput
    isNot?: ItemVentaWhereInput
  }

  export type GarantiaOrderByRelevanceInput = {
    fields: GarantiaOrderByRelevanceFieldEnum | GarantiaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GarantiaCountOrderByAggregateInput = {
    idGarantia?: SortOrder
    idItem?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    condiciones?: SortOrder
  }

  export type GarantiaAvgOrderByAggregateInput = {
    idGarantia?: SortOrder
    idItem?: SortOrder
  }

  export type GarantiaMaxOrderByAggregateInput = {
    idGarantia?: SortOrder
    idItem?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    condiciones?: SortOrder
  }

  export type GarantiaMinOrderByAggregateInput = {
    idGarantia?: SortOrder
    idItem?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    condiciones?: SortOrder
  }

  export type GarantiaSumOrderByAggregateInput = {
    idGarantia?: SortOrder
    idItem?: SortOrder
  }

  export type EnumAlertaTipoFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertaTipo | EnumAlertaTipoFieldRefInput<$PrismaModel>
    in?: $Enums.AlertaTipo[]
    notIn?: $Enums.AlertaTipo[]
    not?: NestedEnumAlertaTipoFilter<$PrismaModel> | $Enums.AlertaTipo
  }

  export type EnumAlertaCanalFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertaCanal | EnumAlertaCanalFieldRefInput<$PrismaModel>
    in?: $Enums.AlertaCanal[]
    notIn?: $Enums.AlertaCanal[]
    not?: NestedEnumAlertaCanalFilter<$PrismaModel> | $Enums.AlertaCanal
  }

  export type AlertaOrderByRelevanceInput = {
    fields: AlertaOrderByRelevanceFieldEnum | AlertaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AlertaCountOrderByAggregateInput = {
    idAlerta?: SortOrder
    idCliente?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    mensaje?: SortOrder
    fechaProgramada?: SortOrder
    enviado?: SortOrder
  }

  export type AlertaAvgOrderByAggregateInput = {
    idAlerta?: SortOrder
    idCliente?: SortOrder
    enviado?: SortOrder
  }

  export type AlertaMaxOrderByAggregateInput = {
    idAlerta?: SortOrder
    idCliente?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    mensaje?: SortOrder
    fechaProgramada?: SortOrder
    enviado?: SortOrder
  }

  export type AlertaMinOrderByAggregateInput = {
    idAlerta?: SortOrder
    idCliente?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    mensaje?: SortOrder
    fechaProgramada?: SortOrder
    enviado?: SortOrder
  }

  export type AlertaSumOrderByAggregateInput = {
    idAlerta?: SortOrder
    idCliente?: SortOrder
    enviado?: SortOrder
  }

  export type EnumAlertaTipoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertaTipo | EnumAlertaTipoFieldRefInput<$PrismaModel>
    in?: $Enums.AlertaTipo[]
    notIn?: $Enums.AlertaTipo[]
    not?: NestedEnumAlertaTipoWithAggregatesFilter<$PrismaModel> | $Enums.AlertaTipo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertaTipoFilter<$PrismaModel>
    _max?: NestedEnumAlertaTipoFilter<$PrismaModel>
  }

  export type EnumAlertaCanalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertaCanal | EnumAlertaCanalFieldRefInput<$PrismaModel>
    in?: $Enums.AlertaCanal[]
    notIn?: $Enums.AlertaCanal[]
    not?: NestedEnumAlertaCanalWithAggregatesFilter<$PrismaModel> | $Enums.AlertaCanal
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertaCanalFilter<$PrismaModel>
    _max?: NestedEnumAlertaCanalFilter<$PrismaModel>
  }

  export type UsuarioCreateNestedOneWithoutClientesCaptadosInput = {
    create?: XOR<UsuarioCreateWithoutClientesCaptadosInput, UsuarioUncheckedCreateWithoutClientesCaptadosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutClientesCaptadosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type AlertaCreateNestedManyWithoutClienteInput = {
    create?: XOR<AlertaCreateWithoutClienteInput, AlertaUncheckedCreateWithoutClienteInput> | AlertaCreateWithoutClienteInput[] | AlertaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: AlertaCreateOrConnectWithoutClienteInput | AlertaCreateOrConnectWithoutClienteInput[]
    createMany?: AlertaCreateManyClienteInputEnvelope
    connect?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
  }

  export type CitaCreateNestedManyWithoutClienteInput = {
    create?: XOR<CitaCreateWithoutClienteInput, CitaUncheckedCreateWithoutClienteInput> | CitaCreateWithoutClienteInput[] | CitaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutClienteInput | CitaCreateOrConnectWithoutClienteInput[]
    createMany?: CitaCreateManyClienteInputEnvelope
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
  }

  export type VentaCreateNestedManyWithoutClienteInput = {
    create?: XOR<VentaCreateWithoutClienteInput, VentaUncheckedCreateWithoutClienteInput> | VentaCreateWithoutClienteInput[] | VentaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutClienteInput | VentaCreateOrConnectWithoutClienteInput[]
    createMany?: VentaCreateManyClienteInputEnvelope
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
  }

  export type AlertaUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<AlertaCreateWithoutClienteInput, AlertaUncheckedCreateWithoutClienteInput> | AlertaCreateWithoutClienteInput[] | AlertaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: AlertaCreateOrConnectWithoutClienteInput | AlertaCreateOrConnectWithoutClienteInput[]
    createMany?: AlertaCreateManyClienteInputEnvelope
    connect?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
  }

  export type CitaUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<CitaCreateWithoutClienteInput, CitaUncheckedCreateWithoutClienteInput> | CitaCreateWithoutClienteInput[] | CitaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutClienteInput | CitaCreateOrConnectWithoutClienteInput[]
    createMany?: CitaCreateManyClienteInputEnvelope
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
  }

  export type VentaUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<VentaCreateWithoutClienteInput, VentaUncheckedCreateWithoutClienteInput> | VentaCreateWithoutClienteInput[] | VentaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutClienteInput | VentaCreateOrConnectWithoutClienteInput[]
    createMany?: VentaCreateManyClienteInputEnvelope
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsuarioUpdateOneWithoutClientesCaptadosNestedInput = {
    create?: XOR<UsuarioCreateWithoutClientesCaptadosInput, UsuarioUncheckedCreateWithoutClientesCaptadosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutClientesCaptadosInput
    upsert?: UsuarioUpsertWithoutClientesCaptadosInput
    disconnect?: UsuarioWhereInput | boolean
    delete?: UsuarioWhereInput | boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutClientesCaptadosInput, UsuarioUpdateWithoutClientesCaptadosInput>, UsuarioUncheckedUpdateWithoutClientesCaptadosInput>
  }

  export type AlertaUpdateManyWithoutClienteNestedInput = {
    create?: XOR<AlertaCreateWithoutClienteInput, AlertaUncheckedCreateWithoutClienteInput> | AlertaCreateWithoutClienteInput[] | AlertaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: AlertaCreateOrConnectWithoutClienteInput | AlertaCreateOrConnectWithoutClienteInput[]
    upsert?: AlertaUpsertWithWhereUniqueWithoutClienteInput | AlertaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: AlertaCreateManyClienteInputEnvelope
    set?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    disconnect?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    delete?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    connect?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    update?: AlertaUpdateWithWhereUniqueWithoutClienteInput | AlertaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: AlertaUpdateManyWithWhereWithoutClienteInput | AlertaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: AlertaScalarWhereInput | AlertaScalarWhereInput[]
  }

  export type CitaUpdateManyWithoutClienteNestedInput = {
    create?: XOR<CitaCreateWithoutClienteInput, CitaUncheckedCreateWithoutClienteInput> | CitaCreateWithoutClienteInput[] | CitaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutClienteInput | CitaCreateOrConnectWithoutClienteInput[]
    upsert?: CitaUpsertWithWhereUniqueWithoutClienteInput | CitaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: CitaCreateManyClienteInputEnvelope
    set?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    disconnect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    delete?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    update?: CitaUpdateWithWhereUniqueWithoutClienteInput | CitaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: CitaUpdateManyWithWhereWithoutClienteInput | CitaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: CitaScalarWhereInput | CitaScalarWhereInput[]
  }

  export type VentaUpdateManyWithoutClienteNestedInput = {
    create?: XOR<VentaCreateWithoutClienteInput, VentaUncheckedCreateWithoutClienteInput> | VentaCreateWithoutClienteInput[] | VentaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutClienteInput | VentaCreateOrConnectWithoutClienteInput[]
    upsert?: VentaUpsertWithWhereUniqueWithoutClienteInput | VentaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: VentaCreateManyClienteInputEnvelope
    set?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    disconnect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    delete?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    update?: VentaUpdateWithWhereUniqueWithoutClienteInput | VentaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: VentaUpdateManyWithWhereWithoutClienteInput | VentaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: VentaScalarWhereInput | VentaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AlertaUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<AlertaCreateWithoutClienteInput, AlertaUncheckedCreateWithoutClienteInput> | AlertaCreateWithoutClienteInput[] | AlertaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: AlertaCreateOrConnectWithoutClienteInput | AlertaCreateOrConnectWithoutClienteInput[]
    upsert?: AlertaUpsertWithWhereUniqueWithoutClienteInput | AlertaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: AlertaCreateManyClienteInputEnvelope
    set?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    disconnect?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    delete?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    connect?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    update?: AlertaUpdateWithWhereUniqueWithoutClienteInput | AlertaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: AlertaUpdateManyWithWhereWithoutClienteInput | AlertaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: AlertaScalarWhereInput | AlertaScalarWhereInput[]
  }

  export type CitaUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<CitaCreateWithoutClienteInput, CitaUncheckedCreateWithoutClienteInput> | CitaCreateWithoutClienteInput[] | CitaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutClienteInput | CitaCreateOrConnectWithoutClienteInput[]
    upsert?: CitaUpsertWithWhereUniqueWithoutClienteInput | CitaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: CitaCreateManyClienteInputEnvelope
    set?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    disconnect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    delete?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    update?: CitaUpdateWithWhereUniqueWithoutClienteInput | CitaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: CitaUpdateManyWithWhereWithoutClienteInput | CitaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: CitaScalarWhereInput | CitaScalarWhereInput[]
  }

  export type VentaUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<VentaCreateWithoutClienteInput, VentaUncheckedCreateWithoutClienteInput> | VentaCreateWithoutClienteInput[] | VentaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutClienteInput | VentaCreateOrConnectWithoutClienteInput[]
    upsert?: VentaUpsertWithWhereUniqueWithoutClienteInput | VentaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: VentaCreateManyClienteInputEnvelope
    set?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    disconnect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    delete?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    update?: VentaUpdateWithWhereUniqueWithoutClienteInput | VentaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: VentaUpdateManyWithWhereWithoutClienteInput | VentaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: VentaScalarWhereInput | VentaScalarWhereInput[]
  }

  export type CitaCreateNestedManyWithoutOperativoInput = {
    create?: XOR<CitaCreateWithoutOperativoInput, CitaUncheckedCreateWithoutOperativoInput> | CitaCreateWithoutOperativoInput[] | CitaUncheckedCreateWithoutOperativoInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutOperativoInput | CitaCreateOrConnectWithoutOperativoInput[]
    createMany?: CitaCreateManyOperativoInputEnvelope
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
  }

  export type CitaUncheckedCreateNestedManyWithoutOperativoInput = {
    create?: XOR<CitaCreateWithoutOperativoInput, CitaUncheckedCreateWithoutOperativoInput> | CitaCreateWithoutOperativoInput[] | CitaUncheckedCreateWithoutOperativoInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutOperativoInput | CitaCreateOrConnectWithoutOperativoInput[]
    createMany?: CitaCreateManyOperativoInputEnvelope
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
  }

  export type CitaUpdateManyWithoutOperativoNestedInput = {
    create?: XOR<CitaCreateWithoutOperativoInput, CitaUncheckedCreateWithoutOperativoInput> | CitaCreateWithoutOperativoInput[] | CitaUncheckedCreateWithoutOperativoInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutOperativoInput | CitaCreateOrConnectWithoutOperativoInput[]
    upsert?: CitaUpsertWithWhereUniqueWithoutOperativoInput | CitaUpsertWithWhereUniqueWithoutOperativoInput[]
    createMany?: CitaCreateManyOperativoInputEnvelope
    set?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    disconnect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    delete?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    update?: CitaUpdateWithWhereUniqueWithoutOperativoInput | CitaUpdateWithWhereUniqueWithoutOperativoInput[]
    updateMany?: CitaUpdateManyWithWhereWithoutOperativoInput | CitaUpdateManyWithWhereWithoutOperativoInput[]
    deleteMany?: CitaScalarWhereInput | CitaScalarWhereInput[]
  }

  export type CitaUncheckedUpdateManyWithoutOperativoNestedInput = {
    create?: XOR<CitaCreateWithoutOperativoInput, CitaUncheckedCreateWithoutOperativoInput> | CitaCreateWithoutOperativoInput[] | CitaUncheckedCreateWithoutOperativoInput[]
    connectOrCreate?: CitaCreateOrConnectWithoutOperativoInput | CitaCreateOrConnectWithoutOperativoInput[]
    upsert?: CitaUpsertWithWhereUniqueWithoutOperativoInput | CitaUpsertWithWhereUniqueWithoutOperativoInput[]
    createMany?: CitaCreateManyOperativoInputEnvelope
    set?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    disconnect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    delete?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    connect?: CitaWhereUniqueInput | CitaWhereUniqueInput[]
    update?: CitaUpdateWithWhereUniqueWithoutOperativoInput | CitaUpdateWithWhereUniqueWithoutOperativoInput[]
    updateMany?: CitaUpdateManyWithWhereWithoutOperativoInput | CitaUpdateManyWithWhereWithoutOperativoInput[]
    deleteMany?: CitaScalarWhereInput | CitaScalarWhereInput[]
  }

  export type UsuarioRolCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<UsuarioRolCreateWithoutUsuarioInput, UsuarioRolUncheckedCreateWithoutUsuarioInput> | UsuarioRolCreateWithoutUsuarioInput[] | UsuarioRolUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutUsuarioInput | UsuarioRolCreateOrConnectWithoutUsuarioInput[]
    createMany?: UsuarioRolCreateManyUsuarioInputEnvelope
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
  }

  export type ClienteCreateNestedManyWithoutVendedorInput = {
    create?: XOR<ClienteCreateWithoutVendedorInput, ClienteUncheckedCreateWithoutVendedorInput> | ClienteCreateWithoutVendedorInput[] | ClienteUncheckedCreateWithoutVendedorInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutVendedorInput | ClienteCreateOrConnectWithoutVendedorInput[]
    createMany?: ClienteCreateManyVendedorInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type UsuarioRolUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<UsuarioRolCreateWithoutUsuarioInput, UsuarioRolUncheckedCreateWithoutUsuarioInput> | UsuarioRolCreateWithoutUsuarioInput[] | UsuarioRolUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutUsuarioInput | UsuarioRolCreateOrConnectWithoutUsuarioInput[]
    createMany?: UsuarioRolCreateManyUsuarioInputEnvelope
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
  }

  export type ClienteUncheckedCreateNestedManyWithoutVendedorInput = {
    create?: XOR<ClienteCreateWithoutVendedorInput, ClienteUncheckedCreateWithoutVendedorInput> | ClienteCreateWithoutVendedorInput[] | ClienteUncheckedCreateWithoutVendedorInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutVendedorInput | ClienteCreateOrConnectWithoutVendedorInput[]
    createMany?: ClienteCreateManyVendedorInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type UsuarioRolUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<UsuarioRolCreateWithoutUsuarioInput, UsuarioRolUncheckedCreateWithoutUsuarioInput> | UsuarioRolCreateWithoutUsuarioInput[] | UsuarioRolUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutUsuarioInput | UsuarioRolCreateOrConnectWithoutUsuarioInput[]
    upsert?: UsuarioRolUpsertWithWhereUniqueWithoutUsuarioInput | UsuarioRolUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: UsuarioRolCreateManyUsuarioInputEnvelope
    set?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    disconnect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    delete?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    update?: UsuarioRolUpdateWithWhereUniqueWithoutUsuarioInput | UsuarioRolUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: UsuarioRolUpdateManyWithWhereWithoutUsuarioInput | UsuarioRolUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: UsuarioRolScalarWhereInput | UsuarioRolScalarWhereInput[]
  }

  export type ClienteUpdateManyWithoutVendedorNestedInput = {
    create?: XOR<ClienteCreateWithoutVendedorInput, ClienteUncheckedCreateWithoutVendedorInput> | ClienteCreateWithoutVendedorInput[] | ClienteUncheckedCreateWithoutVendedorInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutVendedorInput | ClienteCreateOrConnectWithoutVendedorInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutVendedorInput | ClienteUpsertWithWhereUniqueWithoutVendedorInput[]
    createMany?: ClienteCreateManyVendedorInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutVendedorInput | ClienteUpdateWithWhereUniqueWithoutVendedorInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutVendedorInput | ClienteUpdateManyWithWhereWithoutVendedorInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type UsuarioRolUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<UsuarioRolCreateWithoutUsuarioInput, UsuarioRolUncheckedCreateWithoutUsuarioInput> | UsuarioRolCreateWithoutUsuarioInput[] | UsuarioRolUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutUsuarioInput | UsuarioRolCreateOrConnectWithoutUsuarioInput[]
    upsert?: UsuarioRolUpsertWithWhereUniqueWithoutUsuarioInput | UsuarioRolUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: UsuarioRolCreateManyUsuarioInputEnvelope
    set?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    disconnect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    delete?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    update?: UsuarioRolUpdateWithWhereUniqueWithoutUsuarioInput | UsuarioRolUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: UsuarioRolUpdateManyWithWhereWithoutUsuarioInput | UsuarioRolUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: UsuarioRolScalarWhereInput | UsuarioRolScalarWhereInput[]
  }

  export type ClienteUncheckedUpdateManyWithoutVendedorNestedInput = {
    create?: XOR<ClienteCreateWithoutVendedorInput, ClienteUncheckedCreateWithoutVendedorInput> | ClienteCreateWithoutVendedorInput[] | ClienteUncheckedCreateWithoutVendedorInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutVendedorInput | ClienteCreateOrConnectWithoutVendedorInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutVendedorInput | ClienteUpsertWithWhereUniqueWithoutVendedorInput[]
    createMany?: ClienteCreateManyVendedorInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutVendedorInput | ClienteUpdateWithWhereUniqueWithoutVendedorInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutVendedorInput | ClienteUpdateManyWithWhereWithoutVendedorInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type UsuarioRolCreateNestedManyWithoutRolInput = {
    create?: XOR<UsuarioRolCreateWithoutRolInput, UsuarioRolUncheckedCreateWithoutRolInput> | UsuarioRolCreateWithoutRolInput[] | UsuarioRolUncheckedCreateWithoutRolInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutRolInput | UsuarioRolCreateOrConnectWithoutRolInput[]
    createMany?: UsuarioRolCreateManyRolInputEnvelope
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
  }

  export type UsuarioRolUncheckedCreateNestedManyWithoutRolInput = {
    create?: XOR<UsuarioRolCreateWithoutRolInput, UsuarioRolUncheckedCreateWithoutRolInput> | UsuarioRolCreateWithoutRolInput[] | UsuarioRolUncheckedCreateWithoutRolInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutRolInput | UsuarioRolCreateOrConnectWithoutRolInput[]
    createMany?: UsuarioRolCreateManyRolInputEnvelope
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
  }

  export type UsuarioRolUpdateManyWithoutRolNestedInput = {
    create?: XOR<UsuarioRolCreateWithoutRolInput, UsuarioRolUncheckedCreateWithoutRolInput> | UsuarioRolCreateWithoutRolInput[] | UsuarioRolUncheckedCreateWithoutRolInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutRolInput | UsuarioRolCreateOrConnectWithoutRolInput[]
    upsert?: UsuarioRolUpsertWithWhereUniqueWithoutRolInput | UsuarioRolUpsertWithWhereUniqueWithoutRolInput[]
    createMany?: UsuarioRolCreateManyRolInputEnvelope
    set?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    disconnect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    delete?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    update?: UsuarioRolUpdateWithWhereUniqueWithoutRolInput | UsuarioRolUpdateWithWhereUniqueWithoutRolInput[]
    updateMany?: UsuarioRolUpdateManyWithWhereWithoutRolInput | UsuarioRolUpdateManyWithWhereWithoutRolInput[]
    deleteMany?: UsuarioRolScalarWhereInput | UsuarioRolScalarWhereInput[]
  }

  export type UsuarioRolUncheckedUpdateManyWithoutRolNestedInput = {
    create?: XOR<UsuarioRolCreateWithoutRolInput, UsuarioRolUncheckedCreateWithoutRolInput> | UsuarioRolCreateWithoutRolInput[] | UsuarioRolUncheckedCreateWithoutRolInput[]
    connectOrCreate?: UsuarioRolCreateOrConnectWithoutRolInput | UsuarioRolCreateOrConnectWithoutRolInput[]
    upsert?: UsuarioRolUpsertWithWhereUniqueWithoutRolInput | UsuarioRolUpsertWithWhereUniqueWithoutRolInput[]
    createMany?: UsuarioRolCreateManyRolInputEnvelope
    set?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    disconnect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    delete?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    connect?: UsuarioRolWhereUniqueInput | UsuarioRolWhereUniqueInput[]
    update?: UsuarioRolUpdateWithWhereUniqueWithoutRolInput | UsuarioRolUpdateWithWhereUniqueWithoutRolInput[]
    updateMany?: UsuarioRolUpdateManyWithWhereWithoutRolInput | UsuarioRolUpdateManyWithWhereWithoutRolInput[]
    deleteMany?: UsuarioRolScalarWhereInput | UsuarioRolScalarWhereInput[]
  }

  export type RolCreateNestedOneWithoutUsuariosInput = {
    create?: XOR<RolCreateWithoutUsuariosInput, RolUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: RolCreateOrConnectWithoutUsuariosInput
    connect?: RolWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutRolesInput = {
    create?: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRolesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type RolUpdateOneRequiredWithoutUsuariosNestedInput = {
    create?: XOR<RolCreateWithoutUsuariosInput, RolUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: RolCreateOrConnectWithoutUsuariosInput
    upsert?: RolUpsertWithoutUsuariosInput
    connect?: RolWhereUniqueInput
    update?: XOR<XOR<RolUpdateToOneWithWhereWithoutUsuariosInput, RolUpdateWithoutUsuariosInput>, RolUncheckedUpdateWithoutUsuariosInput>
  }

  export type UsuarioUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRolesInput
    upsert?: UsuarioUpsertWithoutRolesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutRolesInput, UsuarioUpdateWithoutRolesInput>, UsuarioUncheckedUpdateWithoutRolesInput>
  }

  export type ClienteCreateNestedOneWithoutCitasInput = {
    create?: XOR<ClienteCreateWithoutCitasInput, ClienteUncheckedCreateWithoutCitasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutCitasInput
    connect?: ClienteWhereUniqueInput
  }

  export type OperativoCreateNestedOneWithoutCitasInput = {
    create?: XOR<OperativoCreateWithoutCitasInput, OperativoUncheckedCreateWithoutCitasInput>
    connectOrCreate?: OperativoCreateOrConnectWithoutCitasInput
    connect?: OperativoWhereUniqueInput
  }

  export type FichaClinicaCreateNestedOneWithoutCitaInput = {
    create?: XOR<FichaClinicaCreateWithoutCitaInput, FichaClinicaUncheckedCreateWithoutCitaInput>
    connectOrCreate?: FichaClinicaCreateOrConnectWithoutCitaInput
    connect?: FichaClinicaWhereUniqueInput
  }

  export type FichaClinicaUncheckedCreateNestedOneWithoutCitaInput = {
    create?: XOR<FichaClinicaCreateWithoutCitaInput, FichaClinicaUncheckedCreateWithoutCitaInput>
    connectOrCreate?: FichaClinicaCreateOrConnectWithoutCitaInput
    connect?: FichaClinicaWhereUniqueInput
  }

  export type EnumCitaEstadoFieldUpdateOperationsInput = {
    set?: $Enums.CitaEstado
  }

  export type ClienteUpdateOneRequiredWithoutCitasNestedInput = {
    create?: XOR<ClienteCreateWithoutCitasInput, ClienteUncheckedCreateWithoutCitasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutCitasInput
    upsert?: ClienteUpsertWithoutCitasInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutCitasInput, ClienteUpdateWithoutCitasInput>, ClienteUncheckedUpdateWithoutCitasInput>
  }

  export type OperativoUpdateOneWithoutCitasNestedInput = {
    create?: XOR<OperativoCreateWithoutCitasInput, OperativoUncheckedCreateWithoutCitasInput>
    connectOrCreate?: OperativoCreateOrConnectWithoutCitasInput
    upsert?: OperativoUpsertWithoutCitasInput
    disconnect?: OperativoWhereInput | boolean
    delete?: OperativoWhereInput | boolean
    connect?: OperativoWhereUniqueInput
    update?: XOR<XOR<OperativoUpdateToOneWithWhereWithoutCitasInput, OperativoUpdateWithoutCitasInput>, OperativoUncheckedUpdateWithoutCitasInput>
  }

  export type FichaClinicaUpdateOneWithoutCitaNestedInput = {
    create?: XOR<FichaClinicaCreateWithoutCitaInput, FichaClinicaUncheckedCreateWithoutCitaInput>
    connectOrCreate?: FichaClinicaCreateOrConnectWithoutCitaInput
    upsert?: FichaClinicaUpsertWithoutCitaInput
    disconnect?: FichaClinicaWhereInput | boolean
    delete?: FichaClinicaWhereInput | boolean
    connect?: FichaClinicaWhereUniqueInput
    update?: XOR<XOR<FichaClinicaUpdateToOneWithWhereWithoutCitaInput, FichaClinicaUpdateWithoutCitaInput>, FichaClinicaUncheckedUpdateWithoutCitaInput>
  }

  export type FichaClinicaUncheckedUpdateOneWithoutCitaNestedInput = {
    create?: XOR<FichaClinicaCreateWithoutCitaInput, FichaClinicaUncheckedCreateWithoutCitaInput>
    connectOrCreate?: FichaClinicaCreateOrConnectWithoutCitaInput
    upsert?: FichaClinicaUpsertWithoutCitaInput
    disconnect?: FichaClinicaWhereInput | boolean
    delete?: FichaClinicaWhereInput | boolean
    connect?: FichaClinicaWhereUniqueInput
    update?: XOR<XOR<FichaClinicaUpdateToOneWithWhereWithoutCitaInput, FichaClinicaUpdateWithoutCitaInput>, FichaClinicaUncheckedUpdateWithoutCitaInput>
  }

  export type CitaCreateNestedOneWithoutFichaInput = {
    create?: XOR<CitaCreateWithoutFichaInput, CitaUncheckedCreateWithoutFichaInput>
    connectOrCreate?: CitaCreateOrConnectWithoutFichaInput
    connect?: CitaWhereUniqueInput
  }

  export type RecetaCreateNestedManyWithoutFichaInput = {
    create?: XOR<RecetaCreateWithoutFichaInput, RecetaUncheckedCreateWithoutFichaInput> | RecetaCreateWithoutFichaInput[] | RecetaUncheckedCreateWithoutFichaInput[]
    connectOrCreate?: RecetaCreateOrConnectWithoutFichaInput | RecetaCreateOrConnectWithoutFichaInput[]
    createMany?: RecetaCreateManyFichaInputEnvelope
    connect?: RecetaWhereUniqueInput | RecetaWhereUniqueInput[]
  }

  export type RecetaUncheckedCreateNestedManyWithoutFichaInput = {
    create?: XOR<RecetaCreateWithoutFichaInput, RecetaUncheckedCreateWithoutFichaInput> | RecetaCreateWithoutFichaInput[] | RecetaUncheckedCreateWithoutFichaInput[]
    connectOrCreate?: RecetaCreateOrConnectWithoutFichaInput | RecetaCreateOrConnectWithoutFichaInput[]
    createMany?: RecetaCreateManyFichaInputEnvelope
    connect?: RecetaWhereUniqueInput | RecetaWhereUniqueInput[]
  }

  export type CitaUpdateOneRequiredWithoutFichaNestedInput = {
    create?: XOR<CitaCreateWithoutFichaInput, CitaUncheckedCreateWithoutFichaInput>
    connectOrCreate?: CitaCreateOrConnectWithoutFichaInput
    upsert?: CitaUpsertWithoutFichaInput
    connect?: CitaWhereUniqueInput
    update?: XOR<XOR<CitaUpdateToOneWithWhereWithoutFichaInput, CitaUpdateWithoutFichaInput>, CitaUncheckedUpdateWithoutFichaInput>
  }

  export type RecetaUpdateManyWithoutFichaNestedInput = {
    create?: XOR<RecetaCreateWithoutFichaInput, RecetaUncheckedCreateWithoutFichaInput> | RecetaCreateWithoutFichaInput[] | RecetaUncheckedCreateWithoutFichaInput[]
    connectOrCreate?: RecetaCreateOrConnectWithoutFichaInput | RecetaCreateOrConnectWithoutFichaInput[]
    upsert?: RecetaUpsertWithWhereUniqueWithoutFichaInput | RecetaUpsertWithWhereUniqueWithoutFichaInput[]
    createMany?: RecetaCreateManyFichaInputEnvelope
    set?: RecetaWhereUniqueInput | RecetaWhereUniqueInput[]
    disconnect?: RecetaWhereUniqueInput | RecetaWhereUniqueInput[]
    delete?: RecetaWhereUniqueInput | RecetaWhereUniqueInput[]
    connect?: RecetaWhereUniqueInput | RecetaWhereUniqueInput[]
    update?: RecetaUpdateWithWhereUniqueWithoutFichaInput | RecetaUpdateWithWhereUniqueWithoutFichaInput[]
    updateMany?: RecetaUpdateManyWithWhereWithoutFichaInput | RecetaUpdateManyWithWhereWithoutFichaInput[]
    deleteMany?: RecetaScalarWhereInput | RecetaScalarWhereInput[]
  }

  export type RecetaUncheckedUpdateManyWithoutFichaNestedInput = {
    create?: XOR<RecetaCreateWithoutFichaInput, RecetaUncheckedCreateWithoutFichaInput> | RecetaCreateWithoutFichaInput[] | RecetaUncheckedCreateWithoutFichaInput[]
    connectOrCreate?: RecetaCreateOrConnectWithoutFichaInput | RecetaCreateOrConnectWithoutFichaInput[]
    upsert?: RecetaUpsertWithWhereUniqueWithoutFichaInput | RecetaUpsertWithWhereUniqueWithoutFichaInput[]
    createMany?: RecetaCreateManyFichaInputEnvelope
    set?: RecetaWhereUniqueInput | RecetaWhereUniqueInput[]
    disconnect?: RecetaWhereUniqueInput | RecetaWhereUniqueInput[]
    delete?: RecetaWhereUniqueInput | RecetaWhereUniqueInput[]
    connect?: RecetaWhereUniqueInput | RecetaWhereUniqueInput[]
    update?: RecetaUpdateWithWhereUniqueWithoutFichaInput | RecetaUpdateWithWhereUniqueWithoutFichaInput[]
    updateMany?: RecetaUpdateManyWithWhereWithoutFichaInput | RecetaUpdateManyWithWhereWithoutFichaInput[]
    deleteMany?: RecetaScalarWhereInput | RecetaScalarWhereInput[]
  }

  export type FichaClinicaCreateNestedOneWithoutRecetasInput = {
    create?: XOR<FichaClinicaCreateWithoutRecetasInput, FichaClinicaUncheckedCreateWithoutRecetasInput>
    connectOrCreate?: FichaClinicaCreateOrConnectWithoutRecetasInput
    connect?: FichaClinicaWhereUniqueInput
  }

  export type VentaCreateNestedManyWithoutRecetaInput = {
    create?: XOR<VentaCreateWithoutRecetaInput, VentaUncheckedCreateWithoutRecetaInput> | VentaCreateWithoutRecetaInput[] | VentaUncheckedCreateWithoutRecetaInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutRecetaInput | VentaCreateOrConnectWithoutRecetaInput[]
    createMany?: VentaCreateManyRecetaInputEnvelope
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
  }

  export type VentaUncheckedCreateNestedManyWithoutRecetaInput = {
    create?: XOR<VentaCreateWithoutRecetaInput, VentaUncheckedCreateWithoutRecetaInput> | VentaCreateWithoutRecetaInput[] | VentaUncheckedCreateWithoutRecetaInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutRecetaInput | VentaCreateOrConnectWithoutRecetaInput[]
    createMany?: VentaCreateManyRecetaInputEnvelope
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type FichaClinicaUpdateOneRequiredWithoutRecetasNestedInput = {
    create?: XOR<FichaClinicaCreateWithoutRecetasInput, FichaClinicaUncheckedCreateWithoutRecetasInput>
    connectOrCreate?: FichaClinicaCreateOrConnectWithoutRecetasInput
    upsert?: FichaClinicaUpsertWithoutRecetasInput
    connect?: FichaClinicaWhereUniqueInput
    update?: XOR<XOR<FichaClinicaUpdateToOneWithWhereWithoutRecetasInput, FichaClinicaUpdateWithoutRecetasInput>, FichaClinicaUncheckedUpdateWithoutRecetasInput>
  }

  export type VentaUpdateManyWithoutRecetaNestedInput = {
    create?: XOR<VentaCreateWithoutRecetaInput, VentaUncheckedCreateWithoutRecetaInput> | VentaCreateWithoutRecetaInput[] | VentaUncheckedCreateWithoutRecetaInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutRecetaInput | VentaCreateOrConnectWithoutRecetaInput[]
    upsert?: VentaUpsertWithWhereUniqueWithoutRecetaInput | VentaUpsertWithWhereUniqueWithoutRecetaInput[]
    createMany?: VentaCreateManyRecetaInputEnvelope
    set?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    disconnect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    delete?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    update?: VentaUpdateWithWhereUniqueWithoutRecetaInput | VentaUpdateWithWhereUniqueWithoutRecetaInput[]
    updateMany?: VentaUpdateManyWithWhereWithoutRecetaInput | VentaUpdateManyWithWhereWithoutRecetaInput[]
    deleteMany?: VentaScalarWhereInput | VentaScalarWhereInput[]
  }

  export type VentaUncheckedUpdateManyWithoutRecetaNestedInput = {
    create?: XOR<VentaCreateWithoutRecetaInput, VentaUncheckedCreateWithoutRecetaInput> | VentaCreateWithoutRecetaInput[] | VentaUncheckedCreateWithoutRecetaInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutRecetaInput | VentaCreateOrConnectWithoutRecetaInput[]
    upsert?: VentaUpsertWithWhereUniqueWithoutRecetaInput | VentaUpsertWithWhereUniqueWithoutRecetaInput[]
    createMany?: VentaCreateManyRecetaInputEnvelope
    set?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    disconnect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    delete?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    update?: VentaUpdateWithWhereUniqueWithoutRecetaInput | VentaUpdateWithWhereUniqueWithoutRecetaInput[]
    updateMany?: VentaUpdateManyWithWhereWithoutRecetaInput | VentaUpdateManyWithWhereWithoutRecetaInput[]
    deleteMany?: VentaScalarWhereInput | VentaScalarWhereInput[]
  }

  export type ItemVentaCreateNestedManyWithoutProductoInput = {
    create?: XOR<ItemVentaCreateWithoutProductoInput, ItemVentaUncheckedCreateWithoutProductoInput> | ItemVentaCreateWithoutProductoInput[] | ItemVentaUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ItemVentaCreateOrConnectWithoutProductoInput | ItemVentaCreateOrConnectWithoutProductoInput[]
    createMany?: ItemVentaCreateManyProductoInputEnvelope
    connect?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
  }

  export type ItemVentaUncheckedCreateNestedManyWithoutProductoInput = {
    create?: XOR<ItemVentaCreateWithoutProductoInput, ItemVentaUncheckedCreateWithoutProductoInput> | ItemVentaCreateWithoutProductoInput[] | ItemVentaUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ItemVentaCreateOrConnectWithoutProductoInput | ItemVentaCreateOrConnectWithoutProductoInput[]
    createMany?: ItemVentaCreateManyProductoInputEnvelope
    connect?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaUpdateManyWithoutProductoNestedInput = {
    create?: XOR<ItemVentaCreateWithoutProductoInput, ItemVentaUncheckedCreateWithoutProductoInput> | ItemVentaCreateWithoutProductoInput[] | ItemVentaUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ItemVentaCreateOrConnectWithoutProductoInput | ItemVentaCreateOrConnectWithoutProductoInput[]
    upsert?: ItemVentaUpsertWithWhereUniqueWithoutProductoInput | ItemVentaUpsertWithWhereUniqueWithoutProductoInput[]
    createMany?: ItemVentaCreateManyProductoInputEnvelope
    set?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    disconnect?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    delete?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    connect?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    update?: ItemVentaUpdateWithWhereUniqueWithoutProductoInput | ItemVentaUpdateWithWhereUniqueWithoutProductoInput[]
    updateMany?: ItemVentaUpdateManyWithWhereWithoutProductoInput | ItemVentaUpdateManyWithWhereWithoutProductoInput[]
    deleteMany?: ItemVentaScalarWhereInput | ItemVentaScalarWhereInput[]
  }

  export type ItemVentaUncheckedUpdateManyWithoutProductoNestedInput = {
    create?: XOR<ItemVentaCreateWithoutProductoInput, ItemVentaUncheckedCreateWithoutProductoInput> | ItemVentaCreateWithoutProductoInput[] | ItemVentaUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ItemVentaCreateOrConnectWithoutProductoInput | ItemVentaCreateOrConnectWithoutProductoInput[]
    upsert?: ItemVentaUpsertWithWhereUniqueWithoutProductoInput | ItemVentaUpsertWithWhereUniqueWithoutProductoInput[]
    createMany?: ItemVentaCreateManyProductoInputEnvelope
    set?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    disconnect?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    delete?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    connect?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    update?: ItemVentaUpdateWithWhereUniqueWithoutProductoInput | ItemVentaUpdateWithWhereUniqueWithoutProductoInput[]
    updateMany?: ItemVentaUpdateManyWithWhereWithoutProductoInput | ItemVentaUpdateManyWithWhereWithoutProductoInput[]
    deleteMany?: ItemVentaScalarWhereInput | ItemVentaScalarWhereInput[]
  }

  export type ItemVentaCreateNestedManyWithoutVentaInput = {
    create?: XOR<ItemVentaCreateWithoutVentaInput, ItemVentaUncheckedCreateWithoutVentaInput> | ItemVentaCreateWithoutVentaInput[] | ItemVentaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: ItemVentaCreateOrConnectWithoutVentaInput | ItemVentaCreateOrConnectWithoutVentaInput[]
    createMany?: ItemVentaCreateManyVentaInputEnvelope
    connect?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
  }

  export type ClienteCreateNestedOneWithoutVentasInput = {
    create?: XOR<ClienteCreateWithoutVentasInput, ClienteUncheckedCreateWithoutVentasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutVentasInput
    connect?: ClienteWhereUniqueInput
  }

  export type RecetaCreateNestedOneWithoutVentasInput = {
    create?: XOR<RecetaCreateWithoutVentasInput, RecetaUncheckedCreateWithoutVentasInput>
    connectOrCreate?: RecetaCreateOrConnectWithoutVentasInput
    connect?: RecetaWhereUniqueInput
  }

  export type ItemVentaUncheckedCreateNestedManyWithoutVentaInput = {
    create?: XOR<ItemVentaCreateWithoutVentaInput, ItemVentaUncheckedCreateWithoutVentaInput> | ItemVentaCreateWithoutVentaInput[] | ItemVentaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: ItemVentaCreateOrConnectWithoutVentaInput | ItemVentaCreateOrConnectWithoutVentaInput[]
    createMany?: ItemVentaCreateManyVentaInputEnvelope
    connect?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
  }

  export type ItemVentaUpdateManyWithoutVentaNestedInput = {
    create?: XOR<ItemVentaCreateWithoutVentaInput, ItemVentaUncheckedCreateWithoutVentaInput> | ItemVentaCreateWithoutVentaInput[] | ItemVentaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: ItemVentaCreateOrConnectWithoutVentaInput | ItemVentaCreateOrConnectWithoutVentaInput[]
    upsert?: ItemVentaUpsertWithWhereUniqueWithoutVentaInput | ItemVentaUpsertWithWhereUniqueWithoutVentaInput[]
    createMany?: ItemVentaCreateManyVentaInputEnvelope
    set?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    disconnect?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    delete?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    connect?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    update?: ItemVentaUpdateWithWhereUniqueWithoutVentaInput | ItemVentaUpdateWithWhereUniqueWithoutVentaInput[]
    updateMany?: ItemVentaUpdateManyWithWhereWithoutVentaInput | ItemVentaUpdateManyWithWhereWithoutVentaInput[]
    deleteMany?: ItemVentaScalarWhereInput | ItemVentaScalarWhereInput[]
  }

  export type ClienteUpdateOneRequiredWithoutVentasNestedInput = {
    create?: XOR<ClienteCreateWithoutVentasInput, ClienteUncheckedCreateWithoutVentasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutVentasInput
    upsert?: ClienteUpsertWithoutVentasInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutVentasInput, ClienteUpdateWithoutVentasInput>, ClienteUncheckedUpdateWithoutVentasInput>
  }

  export type RecetaUpdateOneWithoutVentasNestedInput = {
    create?: XOR<RecetaCreateWithoutVentasInput, RecetaUncheckedCreateWithoutVentasInput>
    connectOrCreate?: RecetaCreateOrConnectWithoutVentasInput
    upsert?: RecetaUpsertWithoutVentasInput
    disconnect?: RecetaWhereInput | boolean
    delete?: RecetaWhereInput | boolean
    connect?: RecetaWhereUniqueInput
    update?: XOR<XOR<RecetaUpdateToOneWithWhereWithoutVentasInput, RecetaUpdateWithoutVentasInput>, RecetaUncheckedUpdateWithoutVentasInput>
  }

  export type ItemVentaUncheckedUpdateManyWithoutVentaNestedInput = {
    create?: XOR<ItemVentaCreateWithoutVentaInput, ItemVentaUncheckedCreateWithoutVentaInput> | ItemVentaCreateWithoutVentaInput[] | ItemVentaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: ItemVentaCreateOrConnectWithoutVentaInput | ItemVentaCreateOrConnectWithoutVentaInput[]
    upsert?: ItemVentaUpsertWithWhereUniqueWithoutVentaInput | ItemVentaUpsertWithWhereUniqueWithoutVentaInput[]
    createMany?: ItemVentaCreateManyVentaInputEnvelope
    set?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    disconnect?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    delete?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    connect?: ItemVentaWhereUniqueInput | ItemVentaWhereUniqueInput[]
    update?: ItemVentaUpdateWithWhereUniqueWithoutVentaInput | ItemVentaUpdateWithWhereUniqueWithoutVentaInput[]
    updateMany?: ItemVentaUpdateManyWithWhereWithoutVentaInput | ItemVentaUpdateManyWithWhereWithoutVentaInput[]
    deleteMany?: ItemVentaScalarWhereInput | ItemVentaScalarWhereInput[]
  }

  export type GarantiaCreateNestedOneWithoutItemInput = {
    create?: XOR<GarantiaCreateWithoutItemInput, GarantiaUncheckedCreateWithoutItemInput>
    connectOrCreate?: GarantiaCreateOrConnectWithoutItemInput
    connect?: GarantiaWhereUniqueInput
  }

  export type ProductoCreateNestedOneWithoutItemsInput = {
    create?: XOR<ProductoCreateWithoutItemsInput, ProductoUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutItemsInput
    connect?: ProductoWhereUniqueInput
  }

  export type VentaCreateNestedOneWithoutItemsInput = {
    create?: XOR<VentaCreateWithoutItemsInput, VentaUncheckedCreateWithoutItemsInput>
    connectOrCreate?: VentaCreateOrConnectWithoutItemsInput
    connect?: VentaWhereUniqueInput
  }

  export type GarantiaUncheckedCreateNestedOneWithoutItemInput = {
    create?: XOR<GarantiaCreateWithoutItemInput, GarantiaUncheckedCreateWithoutItemInput>
    connectOrCreate?: GarantiaCreateOrConnectWithoutItemInput
    connect?: GarantiaWhereUniqueInput
  }

  export type GarantiaUpdateOneWithoutItemNestedInput = {
    create?: XOR<GarantiaCreateWithoutItemInput, GarantiaUncheckedCreateWithoutItemInput>
    connectOrCreate?: GarantiaCreateOrConnectWithoutItemInput
    upsert?: GarantiaUpsertWithoutItemInput
    disconnect?: GarantiaWhereInput | boolean
    delete?: GarantiaWhereInput | boolean
    connect?: GarantiaWhereUniqueInput
    update?: XOR<XOR<GarantiaUpdateToOneWithWhereWithoutItemInput, GarantiaUpdateWithoutItemInput>, GarantiaUncheckedUpdateWithoutItemInput>
  }

  export type ProductoUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<ProductoCreateWithoutItemsInput, ProductoUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutItemsInput
    upsert?: ProductoUpsertWithoutItemsInput
    connect?: ProductoWhereUniqueInput
    update?: XOR<XOR<ProductoUpdateToOneWithWhereWithoutItemsInput, ProductoUpdateWithoutItemsInput>, ProductoUncheckedUpdateWithoutItemsInput>
  }

  export type VentaUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<VentaCreateWithoutItemsInput, VentaUncheckedCreateWithoutItemsInput>
    connectOrCreate?: VentaCreateOrConnectWithoutItemsInput
    upsert?: VentaUpsertWithoutItemsInput
    connect?: VentaWhereUniqueInput
    update?: XOR<XOR<VentaUpdateToOneWithWhereWithoutItemsInput, VentaUpdateWithoutItemsInput>, VentaUncheckedUpdateWithoutItemsInput>
  }

  export type GarantiaUncheckedUpdateOneWithoutItemNestedInput = {
    create?: XOR<GarantiaCreateWithoutItemInput, GarantiaUncheckedCreateWithoutItemInput>
    connectOrCreate?: GarantiaCreateOrConnectWithoutItemInput
    upsert?: GarantiaUpsertWithoutItemInput
    disconnect?: GarantiaWhereInput | boolean
    delete?: GarantiaWhereInput | boolean
    connect?: GarantiaWhereUniqueInput
    update?: XOR<XOR<GarantiaUpdateToOneWithWhereWithoutItemInput, GarantiaUpdateWithoutItemInput>, GarantiaUncheckedUpdateWithoutItemInput>
  }

  export type ItemVentaCreateNestedOneWithoutGarantiaInput = {
    create?: XOR<ItemVentaCreateWithoutGarantiaInput, ItemVentaUncheckedCreateWithoutGarantiaInput>
    connectOrCreate?: ItemVentaCreateOrConnectWithoutGarantiaInput
    connect?: ItemVentaWhereUniqueInput
  }

  export type ItemVentaUpdateOneRequiredWithoutGarantiaNestedInput = {
    create?: XOR<ItemVentaCreateWithoutGarantiaInput, ItemVentaUncheckedCreateWithoutGarantiaInput>
    connectOrCreate?: ItemVentaCreateOrConnectWithoutGarantiaInput
    upsert?: ItemVentaUpsertWithoutGarantiaInput
    connect?: ItemVentaWhereUniqueInput
    update?: XOR<XOR<ItemVentaUpdateToOneWithWhereWithoutGarantiaInput, ItemVentaUpdateWithoutGarantiaInput>, ItemVentaUncheckedUpdateWithoutGarantiaInput>
  }

  export type ClienteCreateNestedOneWithoutAlertasInput = {
    create?: XOR<ClienteCreateWithoutAlertasInput, ClienteUncheckedCreateWithoutAlertasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutAlertasInput
    connect?: ClienteWhereUniqueInput
  }

  export type EnumAlertaTipoFieldUpdateOperationsInput = {
    set?: $Enums.AlertaTipo
  }

  export type EnumAlertaCanalFieldUpdateOperationsInput = {
    set?: $Enums.AlertaCanal
  }

  export type ClienteUpdateOneRequiredWithoutAlertasNestedInput = {
    create?: XOR<ClienteCreateWithoutAlertasInput, ClienteUncheckedCreateWithoutAlertasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutAlertasInput
    upsert?: ClienteUpsertWithoutAlertasInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutAlertasInput, ClienteUpdateWithoutAlertasInput>, ClienteUncheckedUpdateWithoutAlertasInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumCitaEstadoFilter<$PrismaModel = never> = {
    equals?: $Enums.CitaEstado | EnumCitaEstadoFieldRefInput<$PrismaModel>
    in?: $Enums.CitaEstado[]
    notIn?: $Enums.CitaEstado[]
    not?: NestedEnumCitaEstadoFilter<$PrismaModel> | $Enums.CitaEstado
  }

  export type NestedEnumCitaEstadoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CitaEstado | EnumCitaEstadoFieldRefInput<$PrismaModel>
    in?: $Enums.CitaEstado[]
    notIn?: $Enums.CitaEstado[]
    not?: NestedEnumCitaEstadoWithAggregatesFilter<$PrismaModel> | $Enums.CitaEstado
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCitaEstadoFilter<$PrismaModel>
    _max?: NestedEnumCitaEstadoFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumAlertaTipoFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertaTipo | EnumAlertaTipoFieldRefInput<$PrismaModel>
    in?: $Enums.AlertaTipo[]
    notIn?: $Enums.AlertaTipo[]
    not?: NestedEnumAlertaTipoFilter<$PrismaModel> | $Enums.AlertaTipo
  }

  export type NestedEnumAlertaCanalFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertaCanal | EnumAlertaCanalFieldRefInput<$PrismaModel>
    in?: $Enums.AlertaCanal[]
    notIn?: $Enums.AlertaCanal[]
    not?: NestedEnumAlertaCanalFilter<$PrismaModel> | $Enums.AlertaCanal
  }

  export type NestedEnumAlertaTipoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertaTipo | EnumAlertaTipoFieldRefInput<$PrismaModel>
    in?: $Enums.AlertaTipo[]
    notIn?: $Enums.AlertaTipo[]
    not?: NestedEnumAlertaTipoWithAggregatesFilter<$PrismaModel> | $Enums.AlertaTipo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertaTipoFilter<$PrismaModel>
    _max?: NestedEnumAlertaTipoFilter<$PrismaModel>
  }

  export type NestedEnumAlertaCanalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertaCanal | EnumAlertaCanalFieldRefInput<$PrismaModel>
    in?: $Enums.AlertaCanal[]
    notIn?: $Enums.AlertaCanal[]
    not?: NestedEnumAlertaCanalWithAggregatesFilter<$PrismaModel> | $Enums.AlertaCanal
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertaCanalFilter<$PrismaModel>
    _max?: NestedEnumAlertaCanalFilter<$PrismaModel>
  }

  export type UsuarioCreateWithoutClientesCaptadosInput = {
    nombre: string
    correo: string
    hashPassword: string
    activo?: number
    roles?: UsuarioRolCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutClientesCaptadosInput = {
    idUsuario?: number
    nombre: string
    correo: string
    hashPassword: string
    activo?: number
    roles?: UsuarioRolUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutClientesCaptadosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutClientesCaptadosInput, UsuarioUncheckedCreateWithoutClientesCaptadosInput>
  }

  export type AlertaCreateWithoutClienteInput = {
    tipo: $Enums.AlertaTipo
    canal: $Enums.AlertaCanal
    mensaje: string
    fechaProgramada: Date | string
    enviado?: number
  }

  export type AlertaUncheckedCreateWithoutClienteInput = {
    idAlerta?: number
    tipo: $Enums.AlertaTipo
    canal: $Enums.AlertaCanal
    mensaje: string
    fechaProgramada: Date | string
    enviado?: number
  }

  export type AlertaCreateOrConnectWithoutClienteInput = {
    where: AlertaWhereUniqueInput
    create: XOR<AlertaCreateWithoutClienteInput, AlertaUncheckedCreateWithoutClienteInput>
  }

  export type AlertaCreateManyClienteInputEnvelope = {
    data: AlertaCreateManyClienteInput | AlertaCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type CitaCreateWithoutClienteInput = {
    fechaHora: Date | string
    estado: $Enums.CitaEstado
    operativo?: OperativoCreateNestedOneWithoutCitasInput
    ficha?: FichaClinicaCreateNestedOneWithoutCitaInput
  }

  export type CitaUncheckedCreateWithoutClienteInput = {
    idCita?: number
    idOperativo?: number | null
    fechaHora: Date | string
    estado: $Enums.CitaEstado
    ficha?: FichaClinicaUncheckedCreateNestedOneWithoutCitaInput
  }

  export type CitaCreateOrConnectWithoutClienteInput = {
    where: CitaWhereUniqueInput
    create: XOR<CitaCreateWithoutClienteInput, CitaUncheckedCreateWithoutClienteInput>
  }

  export type CitaCreateManyClienteInputEnvelope = {
    data: CitaCreateManyClienteInput | CitaCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type VentaCreateWithoutClienteInput = {
    fechaVenta?: Date | string
    total: Decimal | DecimalJsLike | number | string
    items?: ItemVentaCreateNestedManyWithoutVentaInput
    receta?: RecetaCreateNestedOneWithoutVentasInput
  }

  export type VentaUncheckedCreateWithoutClienteInput = {
    idVenta?: number
    idReceta?: number | null
    fechaVenta?: Date | string
    total: Decimal | DecimalJsLike | number | string
    items?: ItemVentaUncheckedCreateNestedManyWithoutVentaInput
  }

  export type VentaCreateOrConnectWithoutClienteInput = {
    where: VentaWhereUniqueInput
    create: XOR<VentaCreateWithoutClienteInput, VentaUncheckedCreateWithoutClienteInput>
  }

  export type VentaCreateManyClienteInputEnvelope = {
    data: VentaCreateManyClienteInput | VentaCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutClientesCaptadosInput = {
    update: XOR<UsuarioUpdateWithoutClientesCaptadosInput, UsuarioUncheckedUpdateWithoutClientesCaptadosInput>
    create: XOR<UsuarioCreateWithoutClientesCaptadosInput, UsuarioUncheckedCreateWithoutClientesCaptadosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutClientesCaptadosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutClientesCaptadosInput, UsuarioUncheckedUpdateWithoutClientesCaptadosInput>
  }

  export type UsuarioUpdateWithoutClientesCaptadosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    roles?: UsuarioRolUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutClientesCaptadosInput = {
    idUsuario?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    roles?: UsuarioRolUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type AlertaUpsertWithWhereUniqueWithoutClienteInput = {
    where: AlertaWhereUniqueInput
    update: XOR<AlertaUpdateWithoutClienteInput, AlertaUncheckedUpdateWithoutClienteInput>
    create: XOR<AlertaCreateWithoutClienteInput, AlertaUncheckedCreateWithoutClienteInput>
  }

  export type AlertaUpdateWithWhereUniqueWithoutClienteInput = {
    where: AlertaWhereUniqueInput
    data: XOR<AlertaUpdateWithoutClienteInput, AlertaUncheckedUpdateWithoutClienteInput>
  }

  export type AlertaUpdateManyWithWhereWithoutClienteInput = {
    where: AlertaScalarWhereInput
    data: XOR<AlertaUpdateManyMutationInput, AlertaUncheckedUpdateManyWithoutClienteInput>
  }

  export type AlertaScalarWhereInput = {
    AND?: AlertaScalarWhereInput | AlertaScalarWhereInput[]
    OR?: AlertaScalarWhereInput[]
    NOT?: AlertaScalarWhereInput | AlertaScalarWhereInput[]
    idAlerta?: IntFilter<"Alerta"> | number
    idCliente?: IntFilter<"Alerta"> | number
    tipo?: EnumAlertaTipoFilter<"Alerta"> | $Enums.AlertaTipo
    canal?: EnumAlertaCanalFilter<"Alerta"> | $Enums.AlertaCanal
    mensaje?: StringFilter<"Alerta"> | string
    fechaProgramada?: DateTimeFilter<"Alerta"> | Date | string
    enviado?: IntFilter<"Alerta"> | number
  }

  export type CitaUpsertWithWhereUniqueWithoutClienteInput = {
    where: CitaWhereUniqueInput
    update: XOR<CitaUpdateWithoutClienteInput, CitaUncheckedUpdateWithoutClienteInput>
    create: XOR<CitaCreateWithoutClienteInput, CitaUncheckedCreateWithoutClienteInput>
  }

  export type CitaUpdateWithWhereUniqueWithoutClienteInput = {
    where: CitaWhereUniqueInput
    data: XOR<CitaUpdateWithoutClienteInput, CitaUncheckedUpdateWithoutClienteInput>
  }

  export type CitaUpdateManyWithWhereWithoutClienteInput = {
    where: CitaScalarWhereInput
    data: XOR<CitaUpdateManyMutationInput, CitaUncheckedUpdateManyWithoutClienteInput>
  }

  export type CitaScalarWhereInput = {
    AND?: CitaScalarWhereInput | CitaScalarWhereInput[]
    OR?: CitaScalarWhereInput[]
    NOT?: CitaScalarWhereInput | CitaScalarWhereInput[]
    idCita?: IntFilter<"Cita"> | number
    idCliente?: IntFilter<"Cita"> | number
    idOperativo?: IntNullableFilter<"Cita"> | number | null
    fechaHora?: DateTimeFilter<"Cita"> | Date | string
    estado?: EnumCitaEstadoFilter<"Cita"> | $Enums.CitaEstado
  }

  export type VentaUpsertWithWhereUniqueWithoutClienteInput = {
    where: VentaWhereUniqueInput
    update: XOR<VentaUpdateWithoutClienteInput, VentaUncheckedUpdateWithoutClienteInput>
    create: XOR<VentaCreateWithoutClienteInput, VentaUncheckedCreateWithoutClienteInput>
  }

  export type VentaUpdateWithWhereUniqueWithoutClienteInput = {
    where: VentaWhereUniqueInput
    data: XOR<VentaUpdateWithoutClienteInput, VentaUncheckedUpdateWithoutClienteInput>
  }

  export type VentaUpdateManyWithWhereWithoutClienteInput = {
    where: VentaScalarWhereInput
    data: XOR<VentaUpdateManyMutationInput, VentaUncheckedUpdateManyWithoutClienteInput>
  }

  export type VentaScalarWhereInput = {
    AND?: VentaScalarWhereInput | VentaScalarWhereInput[]
    OR?: VentaScalarWhereInput[]
    NOT?: VentaScalarWhereInput | VentaScalarWhereInput[]
    idVenta?: IntFilter<"Venta"> | number
    idCliente?: IntFilter<"Venta"> | number
    idReceta?: IntNullableFilter<"Venta"> | number | null
    fechaVenta?: DateTimeFilter<"Venta"> | Date | string
    total?: DecimalFilter<"Venta"> | Decimal | DecimalJsLike | number | string
  }

  export type CitaCreateWithoutOperativoInput = {
    fechaHora: Date | string
    estado: $Enums.CitaEstado
    cliente: ClienteCreateNestedOneWithoutCitasInput
    ficha?: FichaClinicaCreateNestedOneWithoutCitaInput
  }

  export type CitaUncheckedCreateWithoutOperativoInput = {
    idCita?: number
    idCliente: number
    fechaHora: Date | string
    estado: $Enums.CitaEstado
    ficha?: FichaClinicaUncheckedCreateNestedOneWithoutCitaInput
  }

  export type CitaCreateOrConnectWithoutOperativoInput = {
    where: CitaWhereUniqueInput
    create: XOR<CitaCreateWithoutOperativoInput, CitaUncheckedCreateWithoutOperativoInput>
  }

  export type CitaCreateManyOperativoInputEnvelope = {
    data: CitaCreateManyOperativoInput | CitaCreateManyOperativoInput[]
    skipDuplicates?: boolean
  }

  export type CitaUpsertWithWhereUniqueWithoutOperativoInput = {
    where: CitaWhereUniqueInput
    update: XOR<CitaUpdateWithoutOperativoInput, CitaUncheckedUpdateWithoutOperativoInput>
    create: XOR<CitaCreateWithoutOperativoInput, CitaUncheckedCreateWithoutOperativoInput>
  }

  export type CitaUpdateWithWhereUniqueWithoutOperativoInput = {
    where: CitaWhereUniqueInput
    data: XOR<CitaUpdateWithoutOperativoInput, CitaUncheckedUpdateWithoutOperativoInput>
  }

  export type CitaUpdateManyWithWhereWithoutOperativoInput = {
    where: CitaScalarWhereInput
    data: XOR<CitaUpdateManyMutationInput, CitaUncheckedUpdateManyWithoutOperativoInput>
  }

  export type UsuarioRolCreateWithoutUsuarioInput = {
    rol: RolCreateNestedOneWithoutUsuariosInput
  }

  export type UsuarioRolUncheckedCreateWithoutUsuarioInput = {
    idRol: number
  }

  export type UsuarioRolCreateOrConnectWithoutUsuarioInput = {
    where: UsuarioRolWhereUniqueInput
    create: XOR<UsuarioRolCreateWithoutUsuarioInput, UsuarioRolUncheckedCreateWithoutUsuarioInput>
  }

  export type UsuarioRolCreateManyUsuarioInputEnvelope = {
    data: UsuarioRolCreateManyUsuarioInput | UsuarioRolCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type ClienteCreateWithoutVendedorInput = {
    rut: string
    nombre: string
    telefono?: string | null
    correo?: string | null
    direccion?: string | null
    sector?: string | null
    fechaCreacion?: Date | string
    alertas?: AlertaCreateNestedManyWithoutClienteInput
    citas?: CitaCreateNestedManyWithoutClienteInput
    ventas?: VentaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutVendedorInput = {
    idCliente?: number
    rut: string
    nombre: string
    telefono?: string | null
    correo?: string | null
    direccion?: string | null
    sector?: string | null
    fechaCreacion?: Date | string
    alertas?: AlertaUncheckedCreateNestedManyWithoutClienteInput
    citas?: CitaUncheckedCreateNestedManyWithoutClienteInput
    ventas?: VentaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutVendedorInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutVendedorInput, ClienteUncheckedCreateWithoutVendedorInput>
  }

  export type ClienteCreateManyVendedorInputEnvelope = {
    data: ClienteCreateManyVendedorInput | ClienteCreateManyVendedorInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioRolUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: UsuarioRolWhereUniqueInput
    update: XOR<UsuarioRolUpdateWithoutUsuarioInput, UsuarioRolUncheckedUpdateWithoutUsuarioInput>
    create: XOR<UsuarioRolCreateWithoutUsuarioInput, UsuarioRolUncheckedCreateWithoutUsuarioInput>
  }

  export type UsuarioRolUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: UsuarioRolWhereUniqueInput
    data: XOR<UsuarioRolUpdateWithoutUsuarioInput, UsuarioRolUncheckedUpdateWithoutUsuarioInput>
  }

  export type UsuarioRolUpdateManyWithWhereWithoutUsuarioInput = {
    where: UsuarioRolScalarWhereInput
    data: XOR<UsuarioRolUpdateManyMutationInput, UsuarioRolUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type UsuarioRolScalarWhereInput = {
    AND?: UsuarioRolScalarWhereInput | UsuarioRolScalarWhereInput[]
    OR?: UsuarioRolScalarWhereInput[]
    NOT?: UsuarioRolScalarWhereInput | UsuarioRolScalarWhereInput[]
    idUsuario?: IntFilter<"UsuarioRol"> | number
    idRol?: IntFilter<"UsuarioRol"> | number
  }

  export type ClienteUpsertWithWhereUniqueWithoutVendedorInput = {
    where: ClienteWhereUniqueInput
    update: XOR<ClienteUpdateWithoutVendedorInput, ClienteUncheckedUpdateWithoutVendedorInput>
    create: XOR<ClienteCreateWithoutVendedorInput, ClienteUncheckedCreateWithoutVendedorInput>
  }

  export type ClienteUpdateWithWhereUniqueWithoutVendedorInput = {
    where: ClienteWhereUniqueInput
    data: XOR<ClienteUpdateWithoutVendedorInput, ClienteUncheckedUpdateWithoutVendedorInput>
  }

  export type ClienteUpdateManyWithWhereWithoutVendedorInput = {
    where: ClienteScalarWhereInput
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyWithoutVendedorInput>
  }

  export type ClienteScalarWhereInput = {
    AND?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
    OR?: ClienteScalarWhereInput[]
    NOT?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
    idCliente?: IntFilter<"Cliente"> | number
    rut?: StringFilter<"Cliente"> | string
    nombre?: StringFilter<"Cliente"> | string
    telefono?: StringNullableFilter<"Cliente"> | string | null
    correo?: StringNullableFilter<"Cliente"> | string | null
    direccion?: StringNullableFilter<"Cliente"> | string | null
    sector?: StringNullableFilter<"Cliente"> | string | null
    fechaCreacion?: DateTimeFilter<"Cliente"> | Date | string
    idVendedor?: IntNullableFilter<"Cliente"> | number | null
  }

  export type UsuarioRolCreateWithoutRolInput = {
    usuario: UsuarioCreateNestedOneWithoutRolesInput
  }

  export type UsuarioRolUncheckedCreateWithoutRolInput = {
    idUsuario: number
  }

  export type UsuarioRolCreateOrConnectWithoutRolInput = {
    where: UsuarioRolWhereUniqueInput
    create: XOR<UsuarioRolCreateWithoutRolInput, UsuarioRolUncheckedCreateWithoutRolInput>
  }

  export type UsuarioRolCreateManyRolInputEnvelope = {
    data: UsuarioRolCreateManyRolInput | UsuarioRolCreateManyRolInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioRolUpsertWithWhereUniqueWithoutRolInput = {
    where: UsuarioRolWhereUniqueInput
    update: XOR<UsuarioRolUpdateWithoutRolInput, UsuarioRolUncheckedUpdateWithoutRolInput>
    create: XOR<UsuarioRolCreateWithoutRolInput, UsuarioRolUncheckedCreateWithoutRolInput>
  }

  export type UsuarioRolUpdateWithWhereUniqueWithoutRolInput = {
    where: UsuarioRolWhereUniqueInput
    data: XOR<UsuarioRolUpdateWithoutRolInput, UsuarioRolUncheckedUpdateWithoutRolInput>
  }

  export type UsuarioRolUpdateManyWithWhereWithoutRolInput = {
    where: UsuarioRolScalarWhereInput
    data: XOR<UsuarioRolUpdateManyMutationInput, UsuarioRolUncheckedUpdateManyWithoutRolInput>
  }

  export type RolCreateWithoutUsuariosInput = {
    nombre: string
  }

  export type RolUncheckedCreateWithoutUsuariosInput = {
    idRol?: number
    nombre: string
  }

  export type RolCreateOrConnectWithoutUsuariosInput = {
    where: RolWhereUniqueInput
    create: XOR<RolCreateWithoutUsuariosInput, RolUncheckedCreateWithoutUsuariosInput>
  }

  export type UsuarioCreateWithoutRolesInput = {
    nombre: string
    correo: string
    hashPassword: string
    activo?: number
    clientesCaptados?: ClienteCreateNestedManyWithoutVendedorInput
  }

  export type UsuarioUncheckedCreateWithoutRolesInput = {
    idUsuario?: number
    nombre: string
    correo: string
    hashPassword: string
    activo?: number
    clientesCaptados?: ClienteUncheckedCreateNestedManyWithoutVendedorInput
  }

  export type UsuarioCreateOrConnectWithoutRolesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput>
  }

  export type RolUpsertWithoutUsuariosInput = {
    update: XOR<RolUpdateWithoutUsuariosInput, RolUncheckedUpdateWithoutUsuariosInput>
    create: XOR<RolCreateWithoutUsuariosInput, RolUncheckedCreateWithoutUsuariosInput>
    where?: RolWhereInput
  }

  export type RolUpdateToOneWithWhereWithoutUsuariosInput = {
    where?: RolWhereInput
    data: XOR<RolUpdateWithoutUsuariosInput, RolUncheckedUpdateWithoutUsuariosInput>
  }

  export type RolUpdateWithoutUsuariosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type RolUncheckedUpdateWithoutUsuariosInput = {
    idRol?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUpsertWithoutRolesInput = {
    update: XOR<UsuarioUpdateWithoutRolesInput, UsuarioUncheckedUpdateWithoutRolesInput>
    create: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutRolesInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutRolesInput, UsuarioUncheckedUpdateWithoutRolesInput>
  }

  export type UsuarioUpdateWithoutRolesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    clientesCaptados?: ClienteUpdateManyWithoutVendedorNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutRolesInput = {
    idUsuario?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    hashPassword?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    clientesCaptados?: ClienteUncheckedUpdateManyWithoutVendedorNestedInput
  }

  export type ClienteCreateWithoutCitasInput = {
    rut: string
    nombre: string
    telefono?: string | null
    correo?: string | null
    direccion?: string | null
    sector?: string | null
    fechaCreacion?: Date | string
    vendedor?: UsuarioCreateNestedOneWithoutClientesCaptadosInput
    alertas?: AlertaCreateNestedManyWithoutClienteInput
    ventas?: VentaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutCitasInput = {
    idCliente?: number
    rut: string
    nombre: string
    telefono?: string | null
    correo?: string | null
    direccion?: string | null
    sector?: string | null
    fechaCreacion?: Date | string
    idVendedor?: number | null
    alertas?: AlertaUncheckedCreateNestedManyWithoutClienteInput
    ventas?: VentaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutCitasInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutCitasInput, ClienteUncheckedCreateWithoutCitasInput>
  }

  export type OperativoCreateWithoutCitasInput = {
    nombre: string
    fecha: Date | string
    lugar?: string | null
    cupos?: number | null
  }

  export type OperativoUncheckedCreateWithoutCitasInput = {
    idOperativo?: number
    nombre: string
    fecha: Date | string
    lugar?: string | null
    cupos?: number | null
  }

  export type OperativoCreateOrConnectWithoutCitasInput = {
    where: OperativoWhereUniqueInput
    create: XOR<OperativoCreateWithoutCitasInput, OperativoUncheckedCreateWithoutCitasInput>
  }

  export type FichaClinicaCreateWithoutCitaInput = {
    antecedentesGenerales?: string | null
    antecedentesOftalmologicos?: string | null
    observaciones?: string | null
    fechaRegistro?: Date | string
    recetas?: RecetaCreateNestedManyWithoutFichaInput
  }

  export type FichaClinicaUncheckedCreateWithoutCitaInput = {
    idFicha?: number
    antecedentesGenerales?: string | null
    antecedentesOftalmologicos?: string | null
    observaciones?: string | null
    fechaRegistro?: Date | string
    recetas?: RecetaUncheckedCreateNestedManyWithoutFichaInput
  }

  export type FichaClinicaCreateOrConnectWithoutCitaInput = {
    where: FichaClinicaWhereUniqueInput
    create: XOR<FichaClinicaCreateWithoutCitaInput, FichaClinicaUncheckedCreateWithoutCitaInput>
  }

  export type ClienteUpsertWithoutCitasInput = {
    update: XOR<ClienteUpdateWithoutCitasInput, ClienteUncheckedUpdateWithoutCitasInput>
    create: XOR<ClienteCreateWithoutCitasInput, ClienteUncheckedCreateWithoutCitasInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutCitasInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutCitasInput, ClienteUncheckedUpdateWithoutCitasInput>
  }

  export type ClienteUpdateWithoutCitasInput = {
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    vendedor?: UsuarioUpdateOneWithoutClientesCaptadosNestedInput
    alertas?: AlertaUpdateManyWithoutClienteNestedInput
    ventas?: VentaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutCitasInput = {
    idCliente?: IntFieldUpdateOperationsInput | number
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    idVendedor?: NullableIntFieldUpdateOperationsInput | number | null
    alertas?: AlertaUncheckedUpdateManyWithoutClienteNestedInput
    ventas?: VentaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type OperativoUpsertWithoutCitasInput = {
    update: XOR<OperativoUpdateWithoutCitasInput, OperativoUncheckedUpdateWithoutCitasInput>
    create: XOR<OperativoCreateWithoutCitasInput, OperativoUncheckedCreateWithoutCitasInput>
    where?: OperativoWhereInput
  }

  export type OperativoUpdateToOneWithWhereWithoutCitasInput = {
    where?: OperativoWhereInput
    data: XOR<OperativoUpdateWithoutCitasInput, OperativoUncheckedUpdateWithoutCitasInput>
  }

  export type OperativoUpdateWithoutCitasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    lugar?: NullableStringFieldUpdateOperationsInput | string | null
    cupos?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OperativoUncheckedUpdateWithoutCitasInput = {
    idOperativo?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    lugar?: NullableStringFieldUpdateOperationsInput | string | null
    cupos?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FichaClinicaUpsertWithoutCitaInput = {
    update: XOR<FichaClinicaUpdateWithoutCitaInput, FichaClinicaUncheckedUpdateWithoutCitaInput>
    create: XOR<FichaClinicaCreateWithoutCitaInput, FichaClinicaUncheckedCreateWithoutCitaInput>
    where?: FichaClinicaWhereInput
  }

  export type FichaClinicaUpdateToOneWithWhereWithoutCitaInput = {
    where?: FichaClinicaWhereInput
    data: XOR<FichaClinicaUpdateWithoutCitaInput, FichaClinicaUncheckedUpdateWithoutCitaInput>
  }

  export type FichaClinicaUpdateWithoutCitaInput = {
    antecedentesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesOftalmologicos?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    recetas?: RecetaUpdateManyWithoutFichaNestedInput
  }

  export type FichaClinicaUncheckedUpdateWithoutCitaInput = {
    idFicha?: IntFieldUpdateOperationsInput | number
    antecedentesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesOftalmologicos?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    recetas?: RecetaUncheckedUpdateManyWithoutFichaNestedInput
  }

  export type CitaCreateWithoutFichaInput = {
    fechaHora: Date | string
    estado: $Enums.CitaEstado
    cliente: ClienteCreateNestedOneWithoutCitasInput
    operativo?: OperativoCreateNestedOneWithoutCitasInput
  }

  export type CitaUncheckedCreateWithoutFichaInput = {
    idCita?: number
    idCliente: number
    idOperativo?: number | null
    fechaHora: Date | string
    estado: $Enums.CitaEstado
  }

  export type CitaCreateOrConnectWithoutFichaInput = {
    where: CitaWhereUniqueInput
    create: XOR<CitaCreateWithoutFichaInput, CitaUncheckedCreateWithoutFichaInput>
  }

  export type RecetaCreateWithoutFichaInput = {
    odEsfera?: Decimal | DecimalJsLike | number | string | null
    odCilindro?: Decimal | DecimalJsLike | number | string | null
    odEje?: number | null
    oiEsfera?: Decimal | DecimalJsLike | number | string | null
    oiCilindro?: Decimal | DecimalJsLike | number | string | null
    oiEje?: number | null
    adicion?: Decimal | DecimalJsLike | number | string | null
    pd?: Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: number | null
    fechaEmision?: Date | string
    ventas?: VentaCreateNestedManyWithoutRecetaInput
  }

  export type RecetaUncheckedCreateWithoutFichaInput = {
    idReceta?: number
    odEsfera?: Decimal | DecimalJsLike | number | string | null
    odCilindro?: Decimal | DecimalJsLike | number | string | null
    odEje?: number | null
    oiEsfera?: Decimal | DecimalJsLike | number | string | null
    oiCilindro?: Decimal | DecimalJsLike | number | string | null
    oiEje?: number | null
    adicion?: Decimal | DecimalJsLike | number | string | null
    pd?: Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: number | null
    fechaEmision?: Date | string
    ventas?: VentaUncheckedCreateNestedManyWithoutRecetaInput
  }

  export type RecetaCreateOrConnectWithoutFichaInput = {
    where: RecetaWhereUniqueInput
    create: XOR<RecetaCreateWithoutFichaInput, RecetaUncheckedCreateWithoutFichaInput>
  }

  export type RecetaCreateManyFichaInputEnvelope = {
    data: RecetaCreateManyFichaInput | RecetaCreateManyFichaInput[]
    skipDuplicates?: boolean
  }

  export type CitaUpsertWithoutFichaInput = {
    update: XOR<CitaUpdateWithoutFichaInput, CitaUncheckedUpdateWithoutFichaInput>
    create: XOR<CitaCreateWithoutFichaInput, CitaUncheckedCreateWithoutFichaInput>
    where?: CitaWhereInput
  }

  export type CitaUpdateToOneWithWhereWithoutFichaInput = {
    where?: CitaWhereInput
    data: XOR<CitaUpdateWithoutFichaInput, CitaUncheckedUpdateWithoutFichaInput>
  }

  export type CitaUpdateWithoutFichaInput = {
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumCitaEstadoFieldUpdateOperationsInput | $Enums.CitaEstado
    cliente?: ClienteUpdateOneRequiredWithoutCitasNestedInput
    operativo?: OperativoUpdateOneWithoutCitasNestedInput
  }

  export type CitaUncheckedUpdateWithoutFichaInput = {
    idCita?: IntFieldUpdateOperationsInput | number
    idCliente?: IntFieldUpdateOperationsInput | number
    idOperativo?: NullableIntFieldUpdateOperationsInput | number | null
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumCitaEstadoFieldUpdateOperationsInput | $Enums.CitaEstado
  }

  export type RecetaUpsertWithWhereUniqueWithoutFichaInput = {
    where: RecetaWhereUniqueInput
    update: XOR<RecetaUpdateWithoutFichaInput, RecetaUncheckedUpdateWithoutFichaInput>
    create: XOR<RecetaCreateWithoutFichaInput, RecetaUncheckedCreateWithoutFichaInput>
  }

  export type RecetaUpdateWithWhereUniqueWithoutFichaInput = {
    where: RecetaWhereUniqueInput
    data: XOR<RecetaUpdateWithoutFichaInput, RecetaUncheckedUpdateWithoutFichaInput>
  }

  export type RecetaUpdateManyWithWhereWithoutFichaInput = {
    where: RecetaScalarWhereInput
    data: XOR<RecetaUpdateManyMutationInput, RecetaUncheckedUpdateManyWithoutFichaInput>
  }

  export type RecetaScalarWhereInput = {
    AND?: RecetaScalarWhereInput | RecetaScalarWhereInput[]
    OR?: RecetaScalarWhereInput[]
    NOT?: RecetaScalarWhereInput | RecetaScalarWhereInput[]
    idReceta?: IntFilter<"Receta"> | number
    idFicha?: IntFilter<"Receta"> | number
    odEsfera?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    odCilindro?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    odEje?: IntNullableFilter<"Receta"> | number | null
    oiEsfera?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    oiEje?: IntNullableFilter<"Receta"> | number | null
    adicion?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    pd?: DecimalNullableFilter<"Receta"> | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: IntNullableFilter<"Receta"> | number | null
    fechaEmision?: DateTimeFilter<"Receta"> | Date | string
  }

  export type FichaClinicaCreateWithoutRecetasInput = {
    antecedentesGenerales?: string | null
    antecedentesOftalmologicos?: string | null
    observaciones?: string | null
    fechaRegistro?: Date | string
    cita: CitaCreateNestedOneWithoutFichaInput
  }

  export type FichaClinicaUncheckedCreateWithoutRecetasInput = {
    idFicha?: number
    idCita: number
    antecedentesGenerales?: string | null
    antecedentesOftalmologicos?: string | null
    observaciones?: string | null
    fechaRegistro?: Date | string
  }

  export type FichaClinicaCreateOrConnectWithoutRecetasInput = {
    where: FichaClinicaWhereUniqueInput
    create: XOR<FichaClinicaCreateWithoutRecetasInput, FichaClinicaUncheckedCreateWithoutRecetasInput>
  }

  export type VentaCreateWithoutRecetaInput = {
    fechaVenta?: Date | string
    total: Decimal | DecimalJsLike | number | string
    items?: ItemVentaCreateNestedManyWithoutVentaInput
    cliente: ClienteCreateNestedOneWithoutVentasInput
  }

  export type VentaUncheckedCreateWithoutRecetaInput = {
    idVenta?: number
    idCliente: number
    fechaVenta?: Date | string
    total: Decimal | DecimalJsLike | number | string
    items?: ItemVentaUncheckedCreateNestedManyWithoutVentaInput
  }

  export type VentaCreateOrConnectWithoutRecetaInput = {
    where: VentaWhereUniqueInput
    create: XOR<VentaCreateWithoutRecetaInput, VentaUncheckedCreateWithoutRecetaInput>
  }

  export type VentaCreateManyRecetaInputEnvelope = {
    data: VentaCreateManyRecetaInput | VentaCreateManyRecetaInput[]
    skipDuplicates?: boolean
  }

  export type FichaClinicaUpsertWithoutRecetasInput = {
    update: XOR<FichaClinicaUpdateWithoutRecetasInput, FichaClinicaUncheckedUpdateWithoutRecetasInput>
    create: XOR<FichaClinicaCreateWithoutRecetasInput, FichaClinicaUncheckedCreateWithoutRecetasInput>
    where?: FichaClinicaWhereInput
  }

  export type FichaClinicaUpdateToOneWithWhereWithoutRecetasInput = {
    where?: FichaClinicaWhereInput
    data: XOR<FichaClinicaUpdateWithoutRecetasInput, FichaClinicaUncheckedUpdateWithoutRecetasInput>
  }

  export type FichaClinicaUpdateWithoutRecetasInput = {
    antecedentesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesOftalmologicos?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    cita?: CitaUpdateOneRequiredWithoutFichaNestedInput
  }

  export type FichaClinicaUncheckedUpdateWithoutRecetasInput = {
    idFicha?: IntFieldUpdateOperationsInput | number
    idCita?: IntFieldUpdateOperationsInput | number
    antecedentesGenerales?: NullableStringFieldUpdateOperationsInput | string | null
    antecedentesOftalmologicos?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VentaUpsertWithWhereUniqueWithoutRecetaInput = {
    where: VentaWhereUniqueInput
    update: XOR<VentaUpdateWithoutRecetaInput, VentaUncheckedUpdateWithoutRecetaInput>
    create: XOR<VentaCreateWithoutRecetaInput, VentaUncheckedCreateWithoutRecetaInput>
  }

  export type VentaUpdateWithWhereUniqueWithoutRecetaInput = {
    where: VentaWhereUniqueInput
    data: XOR<VentaUpdateWithoutRecetaInput, VentaUncheckedUpdateWithoutRecetaInput>
  }

  export type VentaUpdateManyWithWhereWithoutRecetaInput = {
    where: VentaScalarWhereInput
    data: XOR<VentaUpdateManyMutationInput, VentaUncheckedUpdateManyWithoutRecetaInput>
  }

  export type ItemVentaCreateWithoutProductoInput = {
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    garantia?: GarantiaCreateNestedOneWithoutItemInput
    venta: VentaCreateNestedOneWithoutItemsInput
  }

  export type ItemVentaUncheckedCreateWithoutProductoInput = {
    idItem?: number
    idVenta: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    garantia?: GarantiaUncheckedCreateNestedOneWithoutItemInput
  }

  export type ItemVentaCreateOrConnectWithoutProductoInput = {
    where: ItemVentaWhereUniqueInput
    create: XOR<ItemVentaCreateWithoutProductoInput, ItemVentaUncheckedCreateWithoutProductoInput>
  }

  export type ItemVentaCreateManyProductoInputEnvelope = {
    data: ItemVentaCreateManyProductoInput | ItemVentaCreateManyProductoInput[]
    skipDuplicates?: boolean
  }

  export type ItemVentaUpsertWithWhereUniqueWithoutProductoInput = {
    where: ItemVentaWhereUniqueInput
    update: XOR<ItemVentaUpdateWithoutProductoInput, ItemVentaUncheckedUpdateWithoutProductoInput>
    create: XOR<ItemVentaCreateWithoutProductoInput, ItemVentaUncheckedCreateWithoutProductoInput>
  }

  export type ItemVentaUpdateWithWhereUniqueWithoutProductoInput = {
    where: ItemVentaWhereUniqueInput
    data: XOR<ItemVentaUpdateWithoutProductoInput, ItemVentaUncheckedUpdateWithoutProductoInput>
  }

  export type ItemVentaUpdateManyWithWhereWithoutProductoInput = {
    where: ItemVentaScalarWhereInput
    data: XOR<ItemVentaUpdateManyMutationInput, ItemVentaUncheckedUpdateManyWithoutProductoInput>
  }

  export type ItemVentaScalarWhereInput = {
    AND?: ItemVentaScalarWhereInput | ItemVentaScalarWhereInput[]
    OR?: ItemVentaScalarWhereInput[]
    NOT?: ItemVentaScalarWhereInput | ItemVentaScalarWhereInput[]
    idItem?: IntFilter<"ItemVenta"> | number
    idVenta?: IntFilter<"ItemVenta"> | number
    idProducto?: IntFilter<"ItemVenta"> | number
    cantidad?: IntFilter<"ItemVenta"> | number
    precioUnitario?: DecimalFilter<"ItemVenta"> | Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaCreateWithoutVentaInput = {
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    garantia?: GarantiaCreateNestedOneWithoutItemInput
    producto: ProductoCreateNestedOneWithoutItemsInput
  }

  export type ItemVentaUncheckedCreateWithoutVentaInput = {
    idItem?: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    garantia?: GarantiaUncheckedCreateNestedOneWithoutItemInput
  }

  export type ItemVentaCreateOrConnectWithoutVentaInput = {
    where: ItemVentaWhereUniqueInput
    create: XOR<ItemVentaCreateWithoutVentaInput, ItemVentaUncheckedCreateWithoutVentaInput>
  }

  export type ItemVentaCreateManyVentaInputEnvelope = {
    data: ItemVentaCreateManyVentaInput | ItemVentaCreateManyVentaInput[]
    skipDuplicates?: boolean
  }

  export type ClienteCreateWithoutVentasInput = {
    rut: string
    nombre: string
    telefono?: string | null
    correo?: string | null
    direccion?: string | null
    sector?: string | null
    fechaCreacion?: Date | string
    vendedor?: UsuarioCreateNestedOneWithoutClientesCaptadosInput
    alertas?: AlertaCreateNestedManyWithoutClienteInput
    citas?: CitaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutVentasInput = {
    idCliente?: number
    rut: string
    nombre: string
    telefono?: string | null
    correo?: string | null
    direccion?: string | null
    sector?: string | null
    fechaCreacion?: Date | string
    idVendedor?: number | null
    alertas?: AlertaUncheckedCreateNestedManyWithoutClienteInput
    citas?: CitaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutVentasInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutVentasInput, ClienteUncheckedCreateWithoutVentasInput>
  }

  export type RecetaCreateWithoutVentasInput = {
    odEsfera?: Decimal | DecimalJsLike | number | string | null
    odCilindro?: Decimal | DecimalJsLike | number | string | null
    odEje?: number | null
    oiEsfera?: Decimal | DecimalJsLike | number | string | null
    oiCilindro?: Decimal | DecimalJsLike | number | string | null
    oiEje?: number | null
    adicion?: Decimal | DecimalJsLike | number | string | null
    pd?: Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: number | null
    fechaEmision?: Date | string
    ficha: FichaClinicaCreateNestedOneWithoutRecetasInput
  }

  export type RecetaUncheckedCreateWithoutVentasInput = {
    idReceta?: number
    idFicha: number
    odEsfera?: Decimal | DecimalJsLike | number | string | null
    odCilindro?: Decimal | DecimalJsLike | number | string | null
    odEje?: number | null
    oiEsfera?: Decimal | DecimalJsLike | number | string | null
    oiCilindro?: Decimal | DecimalJsLike | number | string | null
    oiEje?: number | null
    adicion?: Decimal | DecimalJsLike | number | string | null
    pd?: Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: number | null
    fechaEmision?: Date | string
  }

  export type RecetaCreateOrConnectWithoutVentasInput = {
    where: RecetaWhereUniqueInput
    create: XOR<RecetaCreateWithoutVentasInput, RecetaUncheckedCreateWithoutVentasInput>
  }

  export type ItemVentaUpsertWithWhereUniqueWithoutVentaInput = {
    where: ItemVentaWhereUniqueInput
    update: XOR<ItemVentaUpdateWithoutVentaInput, ItemVentaUncheckedUpdateWithoutVentaInput>
    create: XOR<ItemVentaCreateWithoutVentaInput, ItemVentaUncheckedCreateWithoutVentaInput>
  }

  export type ItemVentaUpdateWithWhereUniqueWithoutVentaInput = {
    where: ItemVentaWhereUniqueInput
    data: XOR<ItemVentaUpdateWithoutVentaInput, ItemVentaUncheckedUpdateWithoutVentaInput>
  }

  export type ItemVentaUpdateManyWithWhereWithoutVentaInput = {
    where: ItemVentaScalarWhereInput
    data: XOR<ItemVentaUpdateManyMutationInput, ItemVentaUncheckedUpdateManyWithoutVentaInput>
  }

  export type ClienteUpsertWithoutVentasInput = {
    update: XOR<ClienteUpdateWithoutVentasInput, ClienteUncheckedUpdateWithoutVentasInput>
    create: XOR<ClienteCreateWithoutVentasInput, ClienteUncheckedCreateWithoutVentasInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutVentasInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutVentasInput, ClienteUncheckedUpdateWithoutVentasInput>
  }

  export type ClienteUpdateWithoutVentasInput = {
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    vendedor?: UsuarioUpdateOneWithoutClientesCaptadosNestedInput
    alertas?: AlertaUpdateManyWithoutClienteNestedInput
    citas?: CitaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutVentasInput = {
    idCliente?: IntFieldUpdateOperationsInput | number
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    idVendedor?: NullableIntFieldUpdateOperationsInput | number | null
    alertas?: AlertaUncheckedUpdateManyWithoutClienteNestedInput
    citas?: CitaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type RecetaUpsertWithoutVentasInput = {
    update: XOR<RecetaUpdateWithoutVentasInput, RecetaUncheckedUpdateWithoutVentasInput>
    create: XOR<RecetaCreateWithoutVentasInput, RecetaUncheckedCreateWithoutVentasInput>
    where?: RecetaWhereInput
  }

  export type RecetaUpdateToOneWithWhereWithoutVentasInput = {
    where?: RecetaWhereInput
    data: XOR<RecetaUpdateWithoutVentasInput, RecetaUncheckedUpdateWithoutVentasInput>
  }

  export type RecetaUpdateWithoutVentasInput = {
    odEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odEje?: NullableIntFieldUpdateOperationsInput | number | null
    oiEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiEje?: NullableIntFieldUpdateOperationsInput | number | null
    adicion?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: NullableIntFieldUpdateOperationsInput | number | null
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    ficha?: FichaClinicaUpdateOneRequiredWithoutRecetasNestedInput
  }

  export type RecetaUncheckedUpdateWithoutVentasInput = {
    idReceta?: IntFieldUpdateOperationsInput | number
    idFicha?: IntFieldUpdateOperationsInput | number
    odEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odEje?: NullableIntFieldUpdateOperationsInput | number | null
    oiEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiEje?: NullableIntFieldUpdateOperationsInput | number | null
    adicion?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: NullableIntFieldUpdateOperationsInput | number | null
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GarantiaCreateWithoutItemInput = {
    fechaInicio: Date | string
    fechaFin: Date | string
    condiciones?: string | null
  }

  export type GarantiaUncheckedCreateWithoutItemInput = {
    idGarantia?: number
    fechaInicio: Date | string
    fechaFin: Date | string
    condiciones?: string | null
  }

  export type GarantiaCreateOrConnectWithoutItemInput = {
    where: GarantiaWhereUniqueInput
    create: XOR<GarantiaCreateWithoutItemInput, GarantiaUncheckedCreateWithoutItemInput>
  }

  export type ProductoCreateWithoutItemsInput = {
    codigo: string
    nombre: string
    precio: Decimal | DecimalJsLike | number | string
    tipo?: string | null
  }

  export type ProductoUncheckedCreateWithoutItemsInput = {
    idProducto?: number
    codigo: string
    nombre: string
    precio: Decimal | DecimalJsLike | number | string
    tipo?: string | null
  }

  export type ProductoCreateOrConnectWithoutItemsInput = {
    where: ProductoWhereUniqueInput
    create: XOR<ProductoCreateWithoutItemsInput, ProductoUncheckedCreateWithoutItemsInput>
  }

  export type VentaCreateWithoutItemsInput = {
    fechaVenta?: Date | string
    total: Decimal | DecimalJsLike | number | string
    cliente: ClienteCreateNestedOneWithoutVentasInput
    receta?: RecetaCreateNestedOneWithoutVentasInput
  }

  export type VentaUncheckedCreateWithoutItemsInput = {
    idVenta?: number
    idCliente: number
    idReceta?: number | null
    fechaVenta?: Date | string
    total: Decimal | DecimalJsLike | number | string
  }

  export type VentaCreateOrConnectWithoutItemsInput = {
    where: VentaWhereUniqueInput
    create: XOR<VentaCreateWithoutItemsInput, VentaUncheckedCreateWithoutItemsInput>
  }

  export type GarantiaUpsertWithoutItemInput = {
    update: XOR<GarantiaUpdateWithoutItemInput, GarantiaUncheckedUpdateWithoutItemInput>
    create: XOR<GarantiaCreateWithoutItemInput, GarantiaUncheckedCreateWithoutItemInput>
    where?: GarantiaWhereInput
  }

  export type GarantiaUpdateToOneWithWhereWithoutItemInput = {
    where?: GarantiaWhereInput
    data: XOR<GarantiaUpdateWithoutItemInput, GarantiaUncheckedUpdateWithoutItemInput>
  }

  export type GarantiaUpdateWithoutItemInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: DateTimeFieldUpdateOperationsInput | Date | string
    condiciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GarantiaUncheckedUpdateWithoutItemInput = {
    idGarantia?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: DateTimeFieldUpdateOperationsInput | Date | string
    condiciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductoUpsertWithoutItemsInput = {
    update: XOR<ProductoUpdateWithoutItemsInput, ProductoUncheckedUpdateWithoutItemsInput>
    create: XOR<ProductoCreateWithoutItemsInput, ProductoUncheckedCreateWithoutItemsInput>
    where?: ProductoWhereInput
  }

  export type ProductoUpdateToOneWithWhereWithoutItemsInput = {
    where?: ProductoWhereInput
    data: XOR<ProductoUpdateWithoutItemsInput, ProductoUncheckedUpdateWithoutItemsInput>
  }

  export type ProductoUpdateWithoutItemsInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductoUncheckedUpdateWithoutItemsInput = {
    idProducto?: IntFieldUpdateOperationsInput | number
    codigo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VentaUpsertWithoutItemsInput = {
    update: XOR<VentaUpdateWithoutItemsInput, VentaUncheckedUpdateWithoutItemsInput>
    create: XOR<VentaCreateWithoutItemsInput, VentaUncheckedCreateWithoutItemsInput>
    where?: VentaWhereInput
  }

  export type VentaUpdateToOneWithWhereWithoutItemsInput = {
    where?: VentaWhereInput
    data: XOR<VentaUpdateWithoutItemsInput, VentaUncheckedUpdateWithoutItemsInput>
  }

  export type VentaUpdateWithoutItemsInput = {
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cliente?: ClienteUpdateOneRequiredWithoutVentasNestedInput
    receta?: RecetaUpdateOneWithoutVentasNestedInput
  }

  export type VentaUncheckedUpdateWithoutItemsInput = {
    idVenta?: IntFieldUpdateOperationsInput | number
    idCliente?: IntFieldUpdateOperationsInput | number
    idReceta?: NullableIntFieldUpdateOperationsInput | number | null
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaCreateWithoutGarantiaInput = {
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    producto: ProductoCreateNestedOneWithoutItemsInput
    venta: VentaCreateNestedOneWithoutItemsInput
  }

  export type ItemVentaUncheckedCreateWithoutGarantiaInput = {
    idItem?: number
    idVenta: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaCreateOrConnectWithoutGarantiaInput = {
    where: ItemVentaWhereUniqueInput
    create: XOR<ItemVentaCreateWithoutGarantiaInput, ItemVentaUncheckedCreateWithoutGarantiaInput>
  }

  export type ItemVentaUpsertWithoutGarantiaInput = {
    update: XOR<ItemVentaUpdateWithoutGarantiaInput, ItemVentaUncheckedUpdateWithoutGarantiaInput>
    create: XOR<ItemVentaCreateWithoutGarantiaInput, ItemVentaUncheckedCreateWithoutGarantiaInput>
    where?: ItemVentaWhereInput
  }

  export type ItemVentaUpdateToOneWithWhereWithoutGarantiaInput = {
    where?: ItemVentaWhereInput
    data: XOR<ItemVentaUpdateWithoutGarantiaInput, ItemVentaUncheckedUpdateWithoutGarantiaInput>
  }

  export type ItemVentaUpdateWithoutGarantiaInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    producto?: ProductoUpdateOneRequiredWithoutItemsNestedInput
    venta?: VentaUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ItemVentaUncheckedUpdateWithoutGarantiaInput = {
    idItem?: IntFieldUpdateOperationsInput | number
    idVenta?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ClienteCreateWithoutAlertasInput = {
    rut: string
    nombre: string
    telefono?: string | null
    correo?: string | null
    direccion?: string | null
    sector?: string | null
    fechaCreacion?: Date | string
    vendedor?: UsuarioCreateNestedOneWithoutClientesCaptadosInput
    citas?: CitaCreateNestedManyWithoutClienteInput
    ventas?: VentaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutAlertasInput = {
    idCliente?: number
    rut: string
    nombre: string
    telefono?: string | null
    correo?: string | null
    direccion?: string | null
    sector?: string | null
    fechaCreacion?: Date | string
    idVendedor?: number | null
    citas?: CitaUncheckedCreateNestedManyWithoutClienteInput
    ventas?: VentaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutAlertasInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutAlertasInput, ClienteUncheckedCreateWithoutAlertasInput>
  }

  export type ClienteUpsertWithoutAlertasInput = {
    update: XOR<ClienteUpdateWithoutAlertasInput, ClienteUncheckedUpdateWithoutAlertasInput>
    create: XOR<ClienteCreateWithoutAlertasInput, ClienteUncheckedCreateWithoutAlertasInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutAlertasInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutAlertasInput, ClienteUncheckedUpdateWithoutAlertasInput>
  }

  export type ClienteUpdateWithoutAlertasInput = {
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    vendedor?: UsuarioUpdateOneWithoutClientesCaptadosNestedInput
    citas?: CitaUpdateManyWithoutClienteNestedInput
    ventas?: VentaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutAlertasInput = {
    idCliente?: IntFieldUpdateOperationsInput | number
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    idVendedor?: NullableIntFieldUpdateOperationsInput | number | null
    citas?: CitaUncheckedUpdateManyWithoutClienteNestedInput
    ventas?: VentaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type AlertaCreateManyClienteInput = {
    idAlerta?: number
    tipo: $Enums.AlertaTipo
    canal: $Enums.AlertaCanal
    mensaje: string
    fechaProgramada: Date | string
    enviado?: number
  }

  export type CitaCreateManyClienteInput = {
    idCita?: number
    idOperativo?: number | null
    fechaHora: Date | string
    estado: $Enums.CitaEstado
  }

  export type VentaCreateManyClienteInput = {
    idVenta?: number
    idReceta?: number | null
    fechaVenta?: Date | string
    total: Decimal | DecimalJsLike | number | string
  }

  export type AlertaUpdateWithoutClienteInput = {
    tipo?: EnumAlertaTipoFieldUpdateOperationsInput | $Enums.AlertaTipo
    canal?: EnumAlertaCanalFieldUpdateOperationsInput | $Enums.AlertaCanal
    mensaje?: StringFieldUpdateOperationsInput | string
    fechaProgramada?: DateTimeFieldUpdateOperationsInput | Date | string
    enviado?: IntFieldUpdateOperationsInput | number
  }

  export type AlertaUncheckedUpdateWithoutClienteInput = {
    idAlerta?: IntFieldUpdateOperationsInput | number
    tipo?: EnumAlertaTipoFieldUpdateOperationsInput | $Enums.AlertaTipo
    canal?: EnumAlertaCanalFieldUpdateOperationsInput | $Enums.AlertaCanal
    mensaje?: StringFieldUpdateOperationsInput | string
    fechaProgramada?: DateTimeFieldUpdateOperationsInput | Date | string
    enviado?: IntFieldUpdateOperationsInput | number
  }

  export type AlertaUncheckedUpdateManyWithoutClienteInput = {
    idAlerta?: IntFieldUpdateOperationsInput | number
    tipo?: EnumAlertaTipoFieldUpdateOperationsInput | $Enums.AlertaTipo
    canal?: EnumAlertaCanalFieldUpdateOperationsInput | $Enums.AlertaCanal
    mensaje?: StringFieldUpdateOperationsInput | string
    fechaProgramada?: DateTimeFieldUpdateOperationsInput | Date | string
    enviado?: IntFieldUpdateOperationsInput | number
  }

  export type CitaUpdateWithoutClienteInput = {
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumCitaEstadoFieldUpdateOperationsInput | $Enums.CitaEstado
    operativo?: OperativoUpdateOneWithoutCitasNestedInput
    ficha?: FichaClinicaUpdateOneWithoutCitaNestedInput
  }

  export type CitaUncheckedUpdateWithoutClienteInput = {
    idCita?: IntFieldUpdateOperationsInput | number
    idOperativo?: NullableIntFieldUpdateOperationsInput | number | null
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumCitaEstadoFieldUpdateOperationsInput | $Enums.CitaEstado
    ficha?: FichaClinicaUncheckedUpdateOneWithoutCitaNestedInput
  }

  export type CitaUncheckedUpdateManyWithoutClienteInput = {
    idCita?: IntFieldUpdateOperationsInput | number
    idOperativo?: NullableIntFieldUpdateOperationsInput | number | null
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumCitaEstadoFieldUpdateOperationsInput | $Enums.CitaEstado
  }

  export type VentaUpdateWithoutClienteInput = {
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    items?: ItemVentaUpdateManyWithoutVentaNestedInput
    receta?: RecetaUpdateOneWithoutVentasNestedInput
  }

  export type VentaUncheckedUpdateWithoutClienteInput = {
    idVenta?: IntFieldUpdateOperationsInput | number
    idReceta?: NullableIntFieldUpdateOperationsInput | number | null
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    items?: ItemVentaUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateManyWithoutClienteInput = {
    idVenta?: IntFieldUpdateOperationsInput | number
    idReceta?: NullableIntFieldUpdateOperationsInput | number | null
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type CitaCreateManyOperativoInput = {
    idCita?: number
    idCliente: number
    fechaHora: Date | string
    estado: $Enums.CitaEstado
  }

  export type CitaUpdateWithoutOperativoInput = {
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumCitaEstadoFieldUpdateOperationsInput | $Enums.CitaEstado
    cliente?: ClienteUpdateOneRequiredWithoutCitasNestedInput
    ficha?: FichaClinicaUpdateOneWithoutCitaNestedInput
  }

  export type CitaUncheckedUpdateWithoutOperativoInput = {
    idCita?: IntFieldUpdateOperationsInput | number
    idCliente?: IntFieldUpdateOperationsInput | number
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumCitaEstadoFieldUpdateOperationsInput | $Enums.CitaEstado
    ficha?: FichaClinicaUncheckedUpdateOneWithoutCitaNestedInput
  }

  export type CitaUncheckedUpdateManyWithoutOperativoInput = {
    idCita?: IntFieldUpdateOperationsInput | number
    idCliente?: IntFieldUpdateOperationsInput | number
    fechaHora?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EnumCitaEstadoFieldUpdateOperationsInput | $Enums.CitaEstado
  }

  export type UsuarioRolCreateManyUsuarioInput = {
    idRol: number
  }

  export type ClienteCreateManyVendedorInput = {
    idCliente?: number
    rut: string
    nombre: string
    telefono?: string | null
    correo?: string | null
    direccion?: string | null
    sector?: string | null
    fechaCreacion?: Date | string
  }

  export type UsuarioRolUpdateWithoutUsuarioInput = {
    rol?: RolUpdateOneRequiredWithoutUsuariosNestedInput
  }

  export type UsuarioRolUncheckedUpdateWithoutUsuarioInput = {
    idRol?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioRolUncheckedUpdateManyWithoutUsuarioInput = {
    idRol?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteUpdateWithoutVendedorInput = {
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    alertas?: AlertaUpdateManyWithoutClienteNestedInput
    citas?: CitaUpdateManyWithoutClienteNestedInput
    ventas?: VentaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutVendedorInput = {
    idCliente?: IntFieldUpdateOperationsInput | number
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    alertas?: AlertaUncheckedUpdateManyWithoutClienteNestedInput
    citas?: CitaUncheckedUpdateManyWithoutClienteNestedInput
    ventas?: VentaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateManyWithoutVendedorInput = {
    idCliente?: IntFieldUpdateOperationsInput | number
    rut?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioRolCreateManyRolInput = {
    idUsuario: number
  }

  export type UsuarioRolUpdateWithoutRolInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutRolesNestedInput
  }

  export type UsuarioRolUncheckedUpdateWithoutRolInput = {
    idUsuario?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioRolUncheckedUpdateManyWithoutRolInput = {
    idUsuario?: IntFieldUpdateOperationsInput | number
  }

  export type RecetaCreateManyFichaInput = {
    idReceta?: number
    odEsfera?: Decimal | DecimalJsLike | number | string | null
    odCilindro?: Decimal | DecimalJsLike | number | string | null
    odEje?: number | null
    oiEsfera?: Decimal | DecimalJsLike | number | string | null
    oiCilindro?: Decimal | DecimalJsLike | number | string | null
    oiEje?: number | null
    adicion?: Decimal | DecimalJsLike | number | string | null
    pd?: Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: number | null
    fechaEmision?: Date | string
  }

  export type RecetaUpdateWithoutFichaInput = {
    odEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odEje?: NullableIntFieldUpdateOperationsInput | number | null
    oiEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiEje?: NullableIntFieldUpdateOperationsInput | number | null
    adicion?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: NullableIntFieldUpdateOperationsInput | number | null
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    ventas?: VentaUpdateManyWithoutRecetaNestedInput
  }

  export type RecetaUncheckedUpdateWithoutFichaInput = {
    idReceta?: IntFieldUpdateOperationsInput | number
    odEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odEje?: NullableIntFieldUpdateOperationsInput | number | null
    oiEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiEje?: NullableIntFieldUpdateOperationsInput | number | null
    adicion?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: NullableIntFieldUpdateOperationsInput | number | null
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    ventas?: VentaUncheckedUpdateManyWithoutRecetaNestedInput
  }

  export type RecetaUncheckedUpdateManyWithoutFichaInput = {
    idReceta?: IntFieldUpdateOperationsInput | number
    odEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    odEje?: NullableIntFieldUpdateOperationsInput | number | null
    oiEsfera?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiCilindro?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    oiEje?: NullableIntFieldUpdateOperationsInput | number | null
    adicion?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    vigenciaDias?: NullableIntFieldUpdateOperationsInput | number | null
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VentaCreateManyRecetaInput = {
    idVenta?: number
    idCliente: number
    fechaVenta?: Date | string
    total: Decimal | DecimalJsLike | number | string
  }

  export type VentaUpdateWithoutRecetaInput = {
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    items?: ItemVentaUpdateManyWithoutVentaNestedInput
    cliente?: ClienteUpdateOneRequiredWithoutVentasNestedInput
  }

  export type VentaUncheckedUpdateWithoutRecetaInput = {
    idVenta?: IntFieldUpdateOperationsInput | number
    idCliente?: IntFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    items?: ItemVentaUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateManyWithoutRecetaInput = {
    idVenta?: IntFieldUpdateOperationsInput | number
    idCliente?: IntFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaCreateManyProductoInput = {
    idItem?: number
    idVenta: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaUpdateWithoutProductoInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    garantia?: GarantiaUpdateOneWithoutItemNestedInput
    venta?: VentaUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ItemVentaUncheckedUpdateWithoutProductoInput = {
    idItem?: IntFieldUpdateOperationsInput | number
    idVenta?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    garantia?: GarantiaUncheckedUpdateOneWithoutItemNestedInput
  }

  export type ItemVentaUncheckedUpdateManyWithoutProductoInput = {
    idItem?: IntFieldUpdateOperationsInput | number
    idVenta?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaCreateManyVentaInput = {
    idItem?: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type ItemVentaUpdateWithoutVentaInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    garantia?: GarantiaUpdateOneWithoutItemNestedInput
    producto?: ProductoUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ItemVentaUncheckedUpdateWithoutVentaInput = {
    idItem?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    garantia?: GarantiaUncheckedUpdateOneWithoutItemNestedInput
  }

  export type ItemVentaUncheckedUpdateManyWithoutVentaInput = {
    idItem?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}