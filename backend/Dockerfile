# Backend Dockerfile para Dannig √ìptica
FROM node:18-alpine

# Establecer directorio de trabajo
WORKDIR /app

# Dependencias del sistema requeridas por Prisma y espera de DB
RUN apk add --no-cache openssl libc6-compat netcat-openbsd curl

# Copiar package.json y package-lock.json
COPY package*.json ./

# Instalar dependencias
RUN npm install

# Copiar solo fuentes necesarias para build
COPY tsconfig.json ./
COPY prisma ./prisma
COPY src ./src

# Generar cliente de Prisma
RUN npx prisma generate

# Compilar TypeScript a dist
RUN npm run build

# Copiar scripts de inicializaci√≥n
COPY scripts/init.sh ./scripts/init.sh
COPY scripts/start-production.sh ./scripts/start-production.sh
COPY scripts/validate-env.sh ./scripts/validate-env.sh
RUN chmod +x ./scripts/init.sh ./scripts/start-production.sh ./scripts/validate-env.sh

# Exponer puerto
EXPOSE 3001

# Variables de entorno por defecto
ENV NODE_ENV=production
ENV PORT=3001

# Comando de inicializaci√≥n con validaci√≥n integrada
CMD echo 'üöÄ Iniciando DannigOptica Backend...' && \
    echo 'üîß Verificando y corrigiendo DATABASE_URL...' && \
    if [ -z "$DATABASE_URL" ]; then echo '‚ùå ERROR: DATABASE_URL no est√° configurada' && exit 1; fi && \
    echo 'üìã DATABASE_URL original: '$DATABASE_URL && \
    echo 'üîß Extrayendo URL limpia de DATABASE_URL...' && \
    export DATABASE_URL=$(echo "$DATABASE_URL" | sed 's/DATABASE_URL=//' | sed 's/ NODE_ENV.*//' | sed 's/ PORT.*//' | sed 's/ JWT_SECRET.*//' | sed 's/ ADMIN_NAME.*//' | sed 's/ ADMIN_EMAIL.*//' | sed 's/ ADMIN_PASSWORD.*//' | sed 's/ CAPTADOR_NAME.*//' | sed 's/ CAPTADOR_EMAIL.*//' | sed 's/ CAPTADOR_PASSWORD.*//' | sed 's/ OFTALMOLOGO_NAME.*//' | sed 's/ OFTALMOLOGO_EMAIL.*//' | sed 's/ OFTALMOLOGO_PASSWORD.*//') && \
    echo 'üìã DATABASE_URL limpia: '$DATABASE_URL && \
    if [[ "$DATABASE_URL" == mysql://* ]]; then echo '‚úÖ DATABASE_URL ya tiene el protocolo correcto'; \
    elif [[ "$DATABASE_URL" == *"mysql"* ]]; then echo 'üîß Corrigiendo DATABASE_URL...' && export DATABASE_URL="mysql://$DATABASE_URL" && echo '‚úÖ DATABASE_URL corregida: '$DATABASE_URL; \
    elif [[ "$DATABASE_URL" == *"postgresql"* ]] || [[ "$DATABASE_URL" == *"postgres"* ]]; then echo '‚ùå ERROR: Se requiere MySQL, pero se detect√≥ PostgreSQL. En Railway Dashboard, crear una base de datos MySQL espec√≠ficamente' && exit 1; \
    else echo '‚ùå ERROR: DATABASE_URL no tiene un formato reconocido. Formato esperado: mysql://usuario:password@host:port/database' && exit 1; fi && \
    echo '‚úÖ DATABASE_URL validada correctamente' && \
    echo 'üîç Validando variables de entorno...' && \
    if [ -z "$DATABASE_URL" ]; then echo '‚ùå ERROR: DATABASE_URL no est√° configurada' && exit 1; else echo '‚úÖ DATABASE_URL configurada'; fi && \
    if [ -z "$NODE_ENV" ]; then echo '‚ö†Ô∏è WARNING: NODE_ENV no est√° configurada, usando development' && export NODE_ENV=development; else echo '‚úÖ NODE_ENV: '$NODE_ENV; fi && \
    if [ -z "$PORT" ]; then echo '‚ö†Ô∏è WARNING: PORT no est√° configurada, usando 3001' && export PORT=3001; else echo '‚úÖ PORT: '$PORT; fi && \
    if [ -z "$JWT_SECRET" ]; then echo '‚ùå ERROR: JWT_SECRET no est√° configurada' && exit 1; else echo '‚úÖ JWT_SECRET configurada'; fi && \
    echo 'üéØ Todas las variables de entorno est√°n configuradas correctamente' && \
    echo 'üìä Verificando configuraci√≥n de base de datos...' && \
    if echo "$DATABASE_URL" | grep -q "postgresql"; then \
        echo 'üêò PostgreSQL detectado' && \
        echo '‚öôÔ∏è Generando cliente Prisma para PostgreSQL...' && \
        npx prisma generate --schema=./prisma/schema.prisma && \
        echo 'üîÑ Aplicando migraciones a PostgreSQL...' && \
        npx prisma db push --accept-data-loss --schema=./prisma/schema.prisma && \
        echo '‚úÖ Migraci√≥n PostgreSQL completada exitosamente'; \
    else \
        echo 'üê¨ MySQL detectado' && \
        echo '‚öôÔ∏è Generando cliente Prisma para MySQL...' && \
        npx prisma generate --schema=./prisma/schema.prisma && \
        echo 'üîÑ Sincronizando schema MySQL...' && \
        npx prisma db push --accept-data-loss --schema=./prisma/schema.prisma && \
        echo '‚úÖ Schema MySQL sincronizado exitosamente'; \
    fi && \
    echo 'üéØ Iniciando servidor Node.js...' && \
    node dist/server.js
