# Railway-optimized Dockerfile for Dannig Óptica Backend
# Optimized for network reliability and Railway deployment
FROM node:18-alpine

# Establecer directorio de trabajo
WORKDIR /app

# Configurar variables de entorno para mejor rendimiento de red
ENV NODE_ENV=production
ENV PORT=3001
ENV npm_config_cache=/tmp/.npm
ENV npm_config_registry=https://registry.npmjs.org/

# Dependencias del sistema con reintentos
RUN apk add --no-cache --update \
    openssl \
    libc6-compat \
    netcat-openbsd \
    curl \
    && rm -rf /var/cache/apk/*

# Crear directorio de caché de npm
RUN mkdir -p /tmp/.npm

# Copiar package.json y package-lock.json primero para mejor caché
COPY package*.json ./

# Instalar dependencias con configuración optimizada
RUN npm ci --only=production --no-audit --no-fund \
    && npm cache clean --force \
    && rm -rf /tmp/.npm

# Copiar archivos de configuración
COPY tsconfig.json ./
COPY prisma ./prisma

# Generar cliente de Prisma
RUN npx prisma generate

# Copiar código fuente
COPY src ./src

# Compilar TypeScript
RUN npm run build

# Crear directorio de scripts
RUN mkdir -p ./scripts

# Copiar scripts críticos con verificación
COPY scripts/init.sh ./scripts/init.sh
RUN chmod +x ./scripts/init.sh

COPY scripts/start-production.sh ./scripts/start-production.sh  
RUN chmod +x ./scripts/start-production.sh

COPY scripts/validate-env.sh ./scripts/validate-env.sh
RUN chmod +x ./scripts/validate-env.sh

# Verificación final
RUN ls -la ./scripts/ && echo "✅ Todos los scripts están presentes"

# Limpiar archivos innecesarios
RUN rm -rf src/ tsconfig.json

# Exponer puerto
EXPOSE 3001

# Comando de inicio
CMD ["npm", "start"]
