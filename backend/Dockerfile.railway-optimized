# Railway-optimized Dockerfile for Dannig Óptica Backend
# Optimized for network reliability and Railway deployment
FROM node:18-alpine

# Establecer directorio de trabajo
WORKDIR /app

# Configurar variables de entorno para mejor rendimiento de red
ENV NODE_ENV=production
ENV PORT=3001
ENV npm_config_cache=/tmp/.npm
ENV npm_config_registry=https://registry.npmjs.org/

# Dependencias del sistema con reintentos
RUN apk add --no-cache --update \
    openssl \
    libc6-compat \
    netcat-openbsd \
    curl \
    && rm -rf /var/cache/apk/*

# Crear directorio de caché de npm
RUN mkdir -p /tmp/.npm

# Copiar package.json y package-lock.json primero para mejor caché
# Railway build context es la raíz del repo, por lo que necesitamos backend/
COPY backend/package*.json ./

# Instalar dependencias con configuración optimizada
RUN npm ci --only=production --no-audit --no-fund \
    && npm cache clean --force \
    && rm -rf /tmp/.npm

# Copiar archivos de configuración
COPY backend/tsconfig.json ./
COPY backend/prisma ./prisma

# Generar cliente de Prisma
RUN npx prisma generate

# Copiar código fuente
COPY backend/src ./src

# Compilar TypeScript
RUN npm run build

# Crear directorio de scripts
RUN mkdir -p ./scripts

# Copiar el directorio completo de scripts (el .dockerignore excluirá los no necesarios)
COPY backend/scripts/ ./scripts/

# Limpiar scripts de desarrollo que no son necesarios en producción
RUN rm -f ./scripts/generate-test-clients.ts \
           ./scripts/ping.ts \
           ./scripts/seed-demo-data.ts \
           ./scripts/deployment-diagnostic.sh \
           ./scripts/extract-database-url.sh \
           ./scripts/fix-database-url.sh \
           ./scripts/migrate-to-postgres.sh

# Verificar que los scripts críticos estén presentes
RUN if [ ! -f ./scripts/railway-init.sh ]; then \
        echo "❌ ERROR: railway-init.sh no encontrado" && exit 1; \
    fi && \
    if [ ! -f ./scripts/init.sh ]; then \
        echo "❌ ERROR: init.sh no encontrado" && exit 1; \
    fi && \
    if [ ! -f ./scripts/start-production.sh ]; then \
        echo "❌ ERROR: start-production.sh no encontrado" && exit 1; \
    fi && \
    if [ ! -f ./scripts/validate-env.sh ]; then \
        echo "❌ ERROR: validate-env.sh no encontrado" && exit 1; \
    fi

# Dar permisos de ejecución a todos los scripts .sh
RUN find ./scripts -name "*.sh" -type f -exec chmod +x {} \;

# Verificación final
RUN ls -la ./scripts/ && echo "✅ Todos los scripts están presentes y ejecutables"

# Limpiar archivos innecesarios
RUN rm -rf src/ tsconfig.json

# Exponer puerto
EXPOSE 3001

# Comando de inicio con inicialización automática
CMD ["./scripts/railway-init.sh"]
