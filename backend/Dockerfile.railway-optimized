# Railway-optimized Dockerfile for Dannig Optica Backend
FROM node:18-alpine

WORKDIR /app

ENV NODE_ENV=production
ENV PORT=3001
ENV npm_config_cache=/tmp/.npm
ENV npm_config_registry=https://registry.npmjs.org/

# System dependencies
RUN apk add --no-cache --update \
    openssl \
    libc6-compat \
    netcat-openbsd \
    curl \
    && rm -rf /var/cache/apk/*

RUN mkdir -p /tmp/.npm

# Copy package files and Prisma schema
COPY backend/package*.json ./
COPY backend/prisma ./prisma

# Install dependencies with retries for network issues
RUN NODE_ENV=development npm ci --no-audit --no-fund || \
    (echo "Retrying npm ci..." && sleep 2 && NODE_ENV=development npm ci --no-audit --no-fund) || \
    (echo "Second retry..." && sleep 5 && NODE_ENV=development npm ci --no-audit --no-fund) && \
    npm cache clean --force

# Verify critical dependencies
RUN echo "Verifying dependencies..." && \
    if [ ! -d "./node_modules/typescript" ]; then \
        echo "ERROR: TypeScript not installed" && exit 1; \
    fi && \
    if [ ! -d "./node_modules/@prisma/client" ]; then \
        echo "ERROR: @prisma/client not installed" && exit 1; \
    fi && \
    echo "Basic dependencies verified"

# Copy configuration and source code
COPY backend/tsconfig.json ./
COPY backend/src ./src

# Verify tsconfig exists
RUN if [ ! -f "./tsconfig.json" ]; then \
        echo "ERROR: tsconfig.json not found" && exit 1; \
    fi && \
    echo "tsconfig.json found"

# Verify and install TypeScript types if missing
RUN echo "Verifying TypeScript types..." && \
    if [ ! -d "./node_modules/@types/node" ] || [ ! -f "./node_modules/@types/node/index.d.ts" ]; then \
        echo "Installing @types/node..." && \
        npm install @types/node@^20.19.24 --save-dev || \
        (echo "Retrying @types/node..." && sleep 3 && npm install @types/node@^20.19.24 --save-dev) || \
        (echo "Second retry @types/node..." && sleep 5 && npm install @types/node@^20.19.24 --save-dev); \
    fi && \
    if [ ! -d "./node_modules/@types/bcrypt" ] || [ ! -f "./node_modules/@types/bcrypt/index.d.ts" ]; then \
        echo "Installing @types/bcrypt..." && \
        npm install @types/bcrypt@^5.0.0 --save-dev || \
        (echo "Retrying @types/bcrypt..." && sleep 3 && npm install @types/bcrypt@^5.0.0 --save-dev); \
    fi && \
    if [ ! -d "./node_modules/@types/jsonwebtoken" ] || [ ! -f "./node_modules/@types/jsonwebtoken/index.d.ts" ]; then \
        echo "Installing @types/jsonwebtoken..." && \
        npm install @types/jsonwebtoken@^9.0.6 --save-dev || \
        (echo "Retrying @types/jsonwebtoken..." && sleep 3 && npm install @types/jsonwebtoken@^9.0.6 --save-dev); \
    fi && \
    if [ ! -d "./node_modules/@types/nodemailer" ] || [ ! -f "./node_modules/@types/nodemailer/index.d.ts" ]; then \
        echo "Installing @types/nodemailer..." && \
        npm install @types/nodemailer@^7.0.3 --save-dev || \
        (echo "Retrying @types/nodemailer..." && sleep 3 && npm install @types/nodemailer@^7.0.3 --save-dev); \
    fi && \
    if [ ! -d "./node_modules/@types/node-cron" ] || [ ! -f "./node_modules/@types/node-cron/index.d.ts" ]; then \
        echo "Installing @types/node-cron..." && \
        npm install @types/node-cron@^3.0.11 --save-dev || \
        (echo "Retrying @types/node-cron..." && sleep 3 && npm install @types/node-cron@^3.0.11 --save-dev); \
    fi && \
    echo "TypeScript types verified"

# Final verification before compilation
RUN echo "Final type verification..." && \
    if [ ! -f "./node_modules/@types/node/index.d.ts" ]; then \
        echo "CRITICAL ERROR: @types/node not available" && exit 1; \
    fi && \
    if [ ! -f "./node_modules/@types/bcrypt/index.d.ts" ]; then \
        echo "CRITICAL ERROR: @types/bcrypt not available" && exit 1; \
    fi && \
    if [ ! -f "./node_modules/@types/jsonwebtoken/index.d.ts" ]; then \
        echo "CRITICAL ERROR: @types/jsonwebtoken not available" && exit 1; \
    fi && \
    echo "All required types available"

# Compile TypeScript
RUN echo "Compiling TypeScript..." && npm run build

# Copy and prepare scripts
RUN mkdir -p ./scripts
COPY backend/scripts/ ./scripts/

# Remove development scripts
RUN rm -f ./scripts/generate-test-clients.ts \
           ./scripts/ping.ts \
           ./scripts/seed-demo-data.ts \
           ./scripts/deployment-diagnostic.sh \
           ./scripts/extract-database-url.sh \
           ./scripts/fix-database-url.sh \
           ./scripts/migrate-to-postgres.sh

# Verify critical scripts exist
RUN if [ ! -f ./scripts/railway-init.sh ]; then \
        echo "ERROR: railway-init.sh not found" && exit 1; \
    fi && \
    if [ ! -f ./scripts/init.sh ]; then \
        echo "ERROR: init.sh not found" && exit 1; \
    fi && \
    if [ ! -f ./scripts/start-production.sh ]; then \
        echo "ERROR: start-production.sh not found" && exit 1; \
    fi && \
    if [ ! -f ./scripts/validate-env.sh ]; then \
        echo "ERROR: validate-env.sh not found" && exit 1; \
    fi

# Make scripts executable
RUN find ./scripts -name "*.sh" -type f -exec chmod +x {} \;

# Clean up source files
RUN rm -rf src/ tsconfig.json

EXPOSE 3001

CMD ["./scripts/railway-init.sh"]
