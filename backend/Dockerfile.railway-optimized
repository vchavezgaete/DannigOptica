# Railway-optimized Dockerfile for Dannig √ìptica Backend
# Optimized for network reliability and Railway deployment
FROM node:18-alpine

# Establecer directorio de trabajo
WORKDIR /app

# Configurar variables de entorno para mejor rendimiento de red
ENV NODE_ENV=production
ENV PORT=3001
ENV npm_config_cache=/tmp/.npm
ENV npm_config_registry=https://registry.npmjs.org/

# Dependencias del sistema con reintentos
RUN apk add --no-cache --update \
    openssl \
    libc6-compat \
    netcat-openbsd \
    curl \
    && rm -rf /var/cache/apk/*

# Crear directorio de cach√© de npm
RUN mkdir -p /tmp/.npm

# Copiar package.json y package-lock.json primero para mejor cach√©
# Railway build context es la ra√≠z del repo, por lo que necesitamos backend/
COPY backend/package*.json ./

# Copiar schema de Prisma antes de instalar dependencias
# (el postinstall script ejecuta prisma generate y necesita el schema)
COPY backend/prisma ./prisma

# Instalar todas las dependencias (necesitamos devDependencies para Prisma CLI y TypeScript)
# El postinstall ejecutar√° prisma generate autom√°ticamente
RUN npm ci --no-audit --no-fund \
    && npm cache clean --force \
    && rm -rf /tmp/.npm

# Validaciones previas: verificar que dependencias cr√≠ticas est√©n instaladas
RUN if [ ! -d "./node_modules/@types/node" ]; then \
        echo "‚ùå ERROR: @types/node no est√° instalado" && \
        npm list @types/node || npm install @types/node@^20.0.0 --save-dev && \
        echo "‚úÖ @types/node instalado correctamente"; \
    fi && \
    if [ ! -d "./node_modules/typescript" ]; then \
        echo "‚ùå ERROR: TypeScript no est√° instalado" && exit 1; \
    fi && \
    if [ ! -d "./node_modules/@prisma/client" ]; then \
        echo "‚ùå ERROR: @prisma/client no est√° instalado" && exit 1; \
    fi && \
    echo "‚úÖ Todas las dependencias cr√≠ticas est√°n instaladas"

# Copiar archivos de configuraci√≥n
COPY backend/tsconfig.json ./

# Copiar c√≥digo fuente
COPY backend/src ./src

# Verificar que tsconfig.json existe antes de compilar
RUN if [ ! -f "./tsconfig.json" ]; then \
        echo "‚ùå ERROR: tsconfig.json no encontrado" && exit 1; \
    fi && \
    echo "‚úÖ tsconfig.json encontrado"

# Verificar que los tipos de Node est√°n disponibles antes de compilar
RUN if [ ! -d "./node_modules/@types/node" ]; then \
        echo "‚ùå ERROR: @types/node no disponible para TypeScript" && exit 1; \
    fi && \
    if [ ! -f "./node_modules/@types/node/index.d.ts" ]; then \
        echo "‚ùå ERROR: @types/node/index.d.ts no encontrado" && exit 1; \
    fi && \
    echo "‚úÖ @types/node verificado y disponible" && \
    echo "üì¶ Tipos disponibles:" && \
    ls -la ./node_modules/@types/ | head -10

# Compilar TypeScript con informaci√≥n de debug
RUN echo "üîç Verificando configuraci√≥n de TypeScript..." && \
    cat ./tsconfig.json && \
    echo "" && \
    echo "üî® Compilando TypeScript..." && \
    npm run build

# Crear directorio de scripts
RUN mkdir -p ./scripts

# Copiar el directorio completo de scripts (el .dockerignore excluir√° los no necesarios)
COPY backend/scripts/ ./scripts/

# Limpiar scripts de desarrollo que no son necesarios en producci√≥n
RUN rm -f ./scripts/generate-test-clients.ts \
           ./scripts/ping.ts \
           ./scripts/seed-demo-data.ts \
           ./scripts/deployment-diagnostic.sh \
           ./scripts/extract-database-url.sh \
           ./scripts/fix-database-url.sh \
           ./scripts/migrate-to-postgres.sh

# Verificar que los scripts cr√≠ticos est√©n presentes
RUN if [ ! -f ./scripts/railway-init.sh ]; then \
        echo "‚ùå ERROR: railway-init.sh no encontrado" && exit 1; \
    fi && \
    if [ ! -f ./scripts/init.sh ]; then \
        echo "‚ùå ERROR: init.sh no encontrado" && exit 1; \
    fi && \
    if [ ! -f ./scripts/start-production.sh ]; then \
        echo "‚ùå ERROR: start-production.sh no encontrado" && exit 1; \
    fi && \
    if [ ! -f ./scripts/validate-env.sh ]; then \
        echo "‚ùå ERROR: validate-env.sh no encontrado" && exit 1; \
    fi

# Dar permisos de ejecuci√≥n a todos los scripts .sh
RUN find ./scripts -name "*.sh" -type f -exec chmod +x {} \;

# Verificaci√≥n final
RUN ls -la ./scripts/ && echo "‚úÖ Todos los scripts est√°n presentes y ejecutables"

# Limpiar archivos innecesarios
RUN rm -rf src/ tsconfig.json

# Exponer puerto
EXPOSE 3001

# Comando de inicio con inicializaci√≥n autom√°tica
CMD ["./scripts/railway-init.sh"]
