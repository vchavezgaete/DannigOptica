# Railway-optimized Dockerfile for Dannig Optica Backend
FROM node:18-alpine

WORKDIR /app

# Ensure devDependencies are installed during build
ENV NPM_CONFIG_PRODUCTION=false
ENV npm_config_production=false

ENV NODE_ENV=production
ENV PORT=3001
ENV npm_config_cache=/tmp/.npm
ENV npm_config_registry=https://registry.npmjs.org/

# System dependencies
RUN apk add --no-cache --update \
    openssl \
    libc6-compat \
    netcat-openbsd \
    curl \
    && rm -rf /var/cache/apk/*

RUN mkdir -p /tmp/.npm

# Copy package files and Prisma schema
COPY backend/package*.json ./
COPY backend/prisma ./prisma

# Install dependencies with retries for network issues
# Use --include=dev to ensure devDependencies are installed
RUN npm ci --no-audit --no-fund --include=dev || \
    (echo "Retrying npm ci..." && sleep 2 && npm ci --no-audit --no-fund --include=dev) || \
    (echo "Second retry..." && sleep 5 && npm ci --no-audit --no-fund --include=dev) && \
    npm cache clean --force

# Verify critical dependencies
RUN echo "Verifying dependencies..." && \
    if [ ! -d "./node_modules/typescript" ]; then \
        echo "ERROR: TypeScript not installed" && exit 1; \
    fi && \
    if [ ! -d "./node_modules/@prisma/client" ]; then \
        echo "ERROR: @prisma/client not installed" && exit 1; \
    fi && \
    echo "Basic dependencies verified"

# Copy configuration and source code
COPY backend/tsconfig.json ./
COPY backend/src ./src

# Verify tsconfig exists
RUN if [ ! -f "./tsconfig.json" ]; then \
        echo "ERROR: tsconfig.json not found" && exit 1; \
    fi && \
    echo "tsconfig.json found"

# Ensure TypeScript types are installed
# Install with --include=dev to ensure they are not skipped
RUN echo "Installing TypeScript types..." && \
    npm install --save-dev \
        @types/node@^20.19.24 \
        @types/bcrypt@^5.0.0 \
        @types/jsonwebtoken@^9.0.6 \
        @types/nodemailer@^7.0.3 \
        @types/node-cron@^3.0.11 \
        --include=dev --no-audit --no-fund && \
    echo "TypeScript types installation completed"

# Verify types are available (tolerant to version-specific subdirectories)
RUN echo "Verifying types availability..." && \
    if [ ! -f "./node_modules/@types/node/index.d.ts" ] && [ ! -f "./node_modules/@types/node/ts4.8/index.d.ts" ]; then \
        echo "ERROR: @types/node not found" && \
        ls -la ./node_modules/@types || true && \
        ls -la ./node_modules/@types/node || true && \
        exit 1; \
    fi && \
    if [ ! -f "./node_modules/@types/bcrypt/index.d.ts" ]; then \
        echo "ERROR: @types/bcrypt not found" && exit 1; \
    fi && \
    if [ ! -f "./node_modules/@types/jsonwebtoken/index.d.ts" ]; then \
        echo "ERROR: @types/jsonwebtoken not found" && exit 1; \
    fi && \
    echo "All required types are available"

# Compile TypeScript
RUN echo "Compiling TypeScript..." && npm run build

# Copy and prepare scripts
RUN mkdir -p ./scripts

# Copy railway-init.sh explicitly (critical script)
COPY backend/scripts/railway-init.sh ./scripts/railway-init.sh

# Verify railway-init.sh exists and is executable
RUN if [ ! -f ./scripts/railway-init.sh ]; then \
        echo "ERROR: railway-init.sh not found" && \
        ls -la ./scripts/ || true && \
        ls -la backend/scripts/ || true && \
        exit 1; \
    fi && \
    chmod +x ./scripts/railway-init.sh && \
    echo "railway-init.sh found and made executable"

# Clean up source files
RUN rm -rf src/ tsconfig.json

EXPOSE 3001

CMD ["./scripts/railway-init.sh"]
