# Railway-optimized Dockerfile for Dannig Óptica Backend
# Optimized for network reliability and Railway deployment
FROM node:18-alpine

# Establecer directorio de trabajo
WORKDIR /app

# Configurar variables de entorno para mejor rendimiento de red
ENV NODE_ENV=production
ENV PORT=3001
ENV npm_config_cache=/tmp/.npm
ENV npm_config_registry=https://registry.npmjs.org/

# Dependencias del sistema con reintentos
RUN apk add --no-cache --update \
    openssl \
    libc6-compat \
    netcat-openbsd \
    curl \
    && rm -rf /var/cache/apk/*

# Crear directorio de caché de npm
RUN mkdir -p /tmp/.npm

# Copiar package.json y package-lock.json primero para mejor caché
# Railway build context es la raíz del repo, por lo que necesitamos backend/
COPY backend/package*.json ./

# Copiar schema de Prisma antes de instalar dependencias
# (el postinstall script ejecuta prisma generate y necesita el schema)
COPY backend/prisma ./prisma

# Instalar todas las dependencias incluyendo devDependencies
# Necesitamos devDependencies para Prisma CLI, TypeScript y tipos
# El postinstall ejecutará prisma generate automáticamente
# Usar NODE_ENV=development para asegurar instalación de devDependencies
# Agregar reintentos para problemas de red
RUN NODE_ENV=development npm ci --no-audit --no-fund || \
    (echo "Reintentando npm ci..." && sleep 2 && NODE_ENV=development npm ci --no-audit --no-fund) || \
    (echo "Segundo reintento..." && sleep 5 && NODE_ENV=development npm ci --no-audit --no-fund) && \
    npm cache clean --force

# Verificar que dependencias críticas estén instaladas después de npm ci
RUN echo "Verificando dependencias instaladas..." && \
    if [ ! -d "./node_modules/typescript" ]; then \
        echo "ERROR: TypeScript no está instalado" && exit 1; \
    fi && \
    if [ ! -d "./node_modules/@prisma/client" ]; then \
        echo "ERROR: @prisma/client no está instalado" && exit 1; \
    fi && \
    echo "Dependencias básicas verificadas"

# Copiar archivos de configuración
COPY backend/tsconfig.json ./

# Copiar código fuente
COPY backend/src ./src

# Verificar que tsconfig.json existe antes de compilar
RUN if [ ! -f "./tsconfig.json" ]; then \
        echo "❌ ERROR: tsconfig.json no encontrado" && exit 1; \
    fi && \
    echo "✅ tsconfig.json encontrado"

# Verificar que todos los tipos necesarios estén instalados después de npm ci
# Si falta alguno, reinstalarlo usando npm install con reintentos
RUN echo "Verificando tipos de TypeScript instalados..." && \
    if [ ! -d "./node_modules/@types/node" ] || [ ! -f "./node_modules/@types/node/index.d.ts" ]; then \
        echo "Instalando @types/node..." && \
        npm install @types/node@^20.19.24 --save-dev || \
        (echo "Reintentando @types/node..." && sleep 3 && npm install @types/node@^20.19.24 --save-dev) || \
        (echo "Segundo reintento @types/node..." && sleep 5 && npm install @types/node@^20.19.24 --save-dev); \
    fi && \
    if [ ! -d "./node_modules/@types/bcrypt" ] || [ ! -f "./node_modules/@types/bcrypt/index.d.ts" ]; then \
        echo "Instalando @types/bcrypt..." && \
        npm install @types/bcrypt@^5.0.0 --save-dev || \
        (echo "Reintentando @types/bcrypt..." && sleep 3 && npm install @types/bcrypt@^5.0.0 --save-dev); \
    fi && \
    if [ ! -d "./node_modules/@types/jsonwebtoken" ] || [ ! -f "./node_modules/@types/jsonwebtoken/index.d.ts" ]; then \
        echo "Instalando @types/jsonwebtoken..." && \
        npm install @types/jsonwebtoken@^9.0.6 --save-dev || \
        (echo "Reintentando @types/jsonwebtoken..." && sleep 3 && npm install @types/jsonwebtoken@^9.0.6 --save-dev); \
    fi && \
    if [ ! -d "./node_modules/@types/nodemailer" ] || [ ! -f "./node_modules/@types/nodemailer/index.d.ts" ]; then \
        echo "Instalando @types/nodemailer..." && \
        npm install @types/nodemailer@^7.0.3 --save-dev || \
        (echo "Reintentando @types/nodemailer..." && sleep 3 && npm install @types/nodemailer@^7.0.3 --save-dev); \
    fi && \
    if [ ! -d "./node_modules/@types/node-cron" ] || [ ! -f "./node_modules/@types/node-cron/index.d.ts" ]; then \
        echo "Instalando @types/node-cron..." && \
        npm install @types/node-cron@^3.0.11 --save-dev || \
        (echo "Reintentando @types/node-cron..." && sleep 3 && npm install @types/node-cron@^3.0.11 --save-dev); \
    fi && \
    echo "Tipos de TypeScript verificados e instalados"

# Verificación final de tipos críticos antes de compilar
RUN echo "Verificación final de tipos..." && \
    if [ ! -f "./node_modules/@types/node/index.d.ts" ]; then \
        echo "ERROR CRITICO: @types/node no está disponible después de instalación" && exit 1; \
    fi && \
    if [ ! -f "./node_modules/@types/bcrypt/index.d.ts" ]; then \
        echo "ERROR CRITICO: @types/bcrypt no está disponible después de instalación" && exit 1; \
    fi && \
    if [ ! -f "./node_modules/@types/jsonwebtoken/index.d.ts" ]; then \
        echo "ERROR CRITICO: @types/jsonwebtoken no está disponible después de instalación" && exit 1; \
    fi && \
    echo "Todos los tipos requeridos están disponibles y listos para compilar"

# Compilar TypeScript
RUN echo "Compilando TypeScript..." && \
    npm run build

# Crear directorio de scripts
RUN mkdir -p ./scripts

# Copiar el directorio completo de scripts (el .dockerignore excluirá los no necesarios)
COPY backend/scripts/ ./scripts/

# Limpiar scripts de desarrollo que no son necesarios en producción
RUN rm -f ./scripts/generate-test-clients.ts \
           ./scripts/ping.ts \
           ./scripts/seed-demo-data.ts \
           ./scripts/deployment-diagnostic.sh \
           ./scripts/extract-database-url.sh \
           ./scripts/fix-database-url.sh \
           ./scripts/migrate-to-postgres.sh

# Verificar que los scripts críticos estén presentes
RUN if [ ! -f ./scripts/railway-init.sh ]; then \
        echo "❌ ERROR: railway-init.sh no encontrado" && exit 1; \
    fi && \
    if [ ! -f ./scripts/init.sh ]; then \
        echo "❌ ERROR: init.sh no encontrado" && exit 1; \
    fi && \
    if [ ! -f ./scripts/start-production.sh ]; then \
        echo "❌ ERROR: start-production.sh no encontrado" && exit 1; \
    fi && \
    if [ ! -f ./scripts/validate-env.sh ]; then \
        echo "❌ ERROR: validate-env.sh no encontrado" && exit 1; \
    fi

# Dar permisos de ejecución a todos los scripts .sh
RUN find ./scripts -name "*.sh" -type f -exec chmod +x {} \;

# Verificación final
RUN ls -la ./scripts/ && echo "✅ Todos los scripts están presentes y ejecutables"

# Limpiar archivos innecesarios
RUN rm -rf src/ tsconfig.json

# Exponer puerto
EXPOSE 3001

# Comando de inicio con inicialización automática
CMD ["./scripts/railway-init.sh"]
