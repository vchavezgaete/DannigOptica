# Railway-optimized Dockerfile for Dannig Optica Backend
FROM node:18-alpine

WORKDIR /app

ENV NODE_ENV=production
ENV PORT=3001
ENV npm_config_cache=/tmp/.npm
ENV npm_config_registry=https://registry.npmjs.org/

# System dependencies
RUN apk add --no-cache --update \
    openssl \
    libc6-compat \
    netcat-openbsd \
    curl \
    && rm -rf /var/cache/apk/*

RUN mkdir -p /tmp/.npm

# Copy package files and Prisma schema
COPY backend/package*.json ./
COPY backend/prisma ./prisma

# Install dependencies with retries for network issues
RUN NODE_ENV=development npm ci --no-audit --no-fund || \
    (echo "Retrying npm ci..." && sleep 2 && NODE_ENV=development npm ci --no-audit --no-fund) || \
    (echo "Second retry..." && sleep 5 && NODE_ENV=development npm ci --no-audit --no-fund) && \
    npm cache clean --force

# Verify critical dependencies
RUN echo "Verifying dependencies..." && \
    if [ ! -d "./node_modules/typescript" ]; then \
        echo "ERROR: TypeScript not installed" && exit 1; \
    fi && \
    if [ ! -d "./node_modules/@prisma/client" ]; then \
        echo "ERROR: @prisma/client not installed" && exit 1; \
    fi && \
    echo "Basic dependencies verified"

# Copy configuration and source code
COPY backend/tsconfig.json ./
COPY backend/src ./src

# Verify tsconfig exists
RUN if [ ! -f "./tsconfig.json" ]; then \
        echo "ERROR: tsconfig.json not found" && exit 1; \
    fi && \
    echo "tsconfig.json found"

# Ensure all TypeScript types are installed
# Force installation even if already in package.json to ensure they are in node_modules
RUN echo "Installing TypeScript types..." && \
    npm install --save-dev --force \
        @types/node@^20.19.24 \
        @types/bcrypt@^5.0.0 \
        @types/jsonwebtoken@^9.0.6 \
        @types/nodemailer@^7.0.3 \
        @types/node-cron@^3.0.11 && \
    echo "TypeScript types installation step completed"

# Verify types were actually installed
RUN echo "Verifying installed types..." && \
    ls -la ./node_modules/@types/ 2>/dev/null | head -10 && \
    if [ ! -f "./node_modules/@types/node/index.d.ts" ]; then \
        echo "ERROR: @types/node/index.d.ts not found after installation" && \
        ls -la ./node_modules/@types/node/ 2>/dev/null || echo "Directory does not exist" && \
        exit 1; \
    fi && \
    if [ ! -f "./node_modules/@types/bcrypt/index.d.ts" ]; then \
        echo "ERROR: @types/bcrypt/index.d.ts not found" && exit 1; \
    fi && \
    if [ ! -f "./node_modules/@types/jsonwebtoken/index.d.ts" ]; then \
        echo "ERROR: @types/jsonwebtoken/index.d.ts not found" && exit 1; \
    fi && \
    echo "All required types verified and available"

# Compile TypeScript
RUN echo "Compiling TypeScript..." && npm run build

# Copy and prepare scripts
RUN mkdir -p ./scripts
COPY backend/scripts/ ./scripts/

# Remove development scripts if they exist
RUN rm -f ./scripts/generate-test-clients.ts \
           ./scripts/ping.ts \
           ./scripts/seed-demo-data.ts \
           ./scripts/deployment-diagnostic.sh \
           ./scripts/extract-database-url.sh \
           ./scripts/fix-database-url.sh \
           ./scripts/migrate-to-postgres.sh 2>/dev/null || true

# Verify railway-init.sh exists (critical script)
RUN if [ ! -f ./scripts/railway-init.sh ]; then \
        echo "ERROR: railway-init.sh not found" && ls -la ./scripts/ && exit 1; \
    fi && \
    echo "railway-init.sh found"

# Make all shell scripts executable
RUN find ./scripts -name "*.sh" -type f -exec chmod +x {} \; 2>/dev/null || true

# Clean up source files
RUN rm -rf src/ tsconfig.json

EXPOSE 3001

CMD ["./scripts/railway-init.sh"]
