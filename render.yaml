# Render Blueprint para DannigOptica
# Documentación: https://render.com/docs/blueprint-spec

services:
  # Backend API
  - type: web
    name: dannig-backend
    runtime: docker
    dockerfilePath: ./backend/Dockerfile
    dockerContext: ./backend
    plan: free  # Cambia a 'starter' para más recursos
    healthCheckPath: /health
    healthCheckTimeout: 600  # 10 minutos para inicialización completa
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: dannig-db
          property: connectionString
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3001
      - key: JWT_SECRET
        generateValue: true
        sync: false  # No sincronizar entre servicios
      - key: ADMIN_NAME
        value: Admin
      - key: ADMIN_EMAIL
        value: admin@dannig.local
      - key: ADMIN_PASSWORD
        value: admin123
        sync: false  # Configurar manualmente en UI por seguridad
      - key: CAPTADOR_NAME
        value: Captador
      - key: CAPTADOR_EMAIL
        value: captador@dannig.local
              - key: CAPTADOR_PASSWORD
                value: captador123
                sync: false
              - key: OFTALMOLOGO_NAME
                value: Dr. Oftalmólogo
              - key: OFTALMOLOGO_EMAIL
                value: oftalmologo@dannig.local
              - key: OFTALMOLOGO_PASSWORD
                value: oftalmologo123
                sync: false

  # Frontend React
  - type: web
    name: dannig-frontend
    runtime: docker
    dockerfilePath: ./frontend/Dockerfile
    dockerContext: ./frontend
    plan: free
    envVars:
      - key: VITE_API_URL
        fromService:
          name: dannig-backend
          type: web
          property: url

databases:
  # Base de datos PostgreSQL
  # Nota: Render free tier solo ofrece PostgreSQL
  # Para MySQL, necesitas plan de pago o base de datos externa
  - name: dannig-db
    databaseName: dannig
    user: dannig
    plan: free  # 90 días gratis, luego $7/mes
    # Para MySQL (requiere plan de pago):
    # plan: starter
    # ipAllowList: []  # Permitir conexiones desde cualquier IP

